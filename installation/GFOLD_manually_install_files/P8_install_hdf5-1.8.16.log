 Start compile hdf5-1.8.16 (will take ~1 min)
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking whether to enable maintainer-specific portions of Makefiles... no
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking shell variables initial values... done
checking if basename works... yes
checking if xargs works... yes
checking for cached host... none
checking for config x86_64-unknown-linux-gnu... no
checking for config x86_64-unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-unknown... no
checking for config linux-gnu... found
compiler 'gcc' is GNU gcc-4.8.5
checking for config ./config/site-specific/host-multicom.eecs.missouri.edu... no
checking for config ./config/site-specific/host-eecs.missouri.edu... no
checking for config ./config/site-specific/host-missouri.edu... no
checking for config ./config/site-specific/host-edu... no
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking for style of include used by make... GNU
checking dependency style of gcc... gcc3
checking if unsupported combinations of configure options are allowed... no
checking if Fortran interface enabled... no
checking if Fortran 2003 interface enabled... no
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking dependency style of g++... gcc3
checking how to run the C++ preprocessor... g++ -E
checking if c++ interface enabled... no
checking if high level library is enabled... yes
checking for perl... perl
checking for ar... ar
checking whether make sets $(MAKE)... (cached) yes
checking for tr... /usr/bin/tr
checking if srcdir= and time commands work together... no
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 1572864
checking whether the shell understands some XSI constructs... yes
checking whether the shell understands "+="... yes
checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop
checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for mt... no
checking if : is a manifest tool... no
checking how to run the C preprocessor... gcc -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking for shl_load... no
checking for shl_load in -ldld... no
checking for dlopen... no
checking for dlopen in -ldl... yes
checking whether a program can dlopen itself... yes
checking whether a statically linked program can dlopen itself... yes
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking if we should install only statically linked executables... no
checking if -Wl,-rpath should be used to link shared libs in nondefault directories... yes
checking whether make will build with undefined variables... yes
checking for production mode... production
checking for ceil in -lm... yes
checking for dlopen in -ldl... (cached) yes
checking for ANSI C header files... (cached) yes
checking whether time.h and sys/time.h may both be included... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for unistd.h... (cached) yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking for sys/stat.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking for sys/types.h... (cached) yes
checking stddef.h usability... yes
checking stddef.h presence... yes
checking for stddef.h... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking features.h usability... yes
checking features.h presence... yes
checking for features.h... yes
checking dirent.h usability... yes
checking dirent.h presence... yes
checking for dirent.h... yes
checking for stdint.h... (cached) yes
checking mach/mach_time.h usability... no
checking mach/mach_time.h presence... no
checking for mach/mach_time.h... no
checking io.h usability... no
checking io.h presence... no
checking for io.h... no
checking winsock2.h usability... no
checking winsock2.h presence... no
checking for winsock2.h... no
checking sys/timeb.h usability... yes
checking sys/timeb.h presence... yes
checking for sys/timeb.h... yes
checking if libtool needs -no-undefined flag to build shared libraries... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for lseek64... yes
checking for fseeko64... yes
checking for ftello64... yes
checking for ftruncate64... yes
checking for fseeko... yes
checking for ftello... yes
checking for stat64... yes
checking for fstat64... yes
checking for off_t... yes
checking for size_t... yes
checking for ssize_t... yes
checking for ptrdiff_t... yes
checking whether byte ordering is bigendian... no
checking size of char... 1
checking size of short... 2
checking size of int... 4
checking size of unsigned... 4
checking size of long... 8
checking size of long long... 8
checking size of __int64... 0
checking size of float... 4
checking size of double... 8
checking size of long double... 16
checking size of int8_t... 1
checking size of uint8_t... 1
checking size of int_least8_t... 1
checking size of uint_least8_t... 1
checking size of int_fast8_t... 1
checking size of uint_fast8_t... 1
checking size of int16_t... 2
checking size of uint16_t... 2
checking size of int_least16_t... 2
checking size of uint_least16_t... 2
checking size of int_fast16_t... 8
checking size of uint_fast16_t... 8
checking size of int32_t... 4
checking size of uint32_t... 4
checking size of int_least32_t... 4
checking size of uint_least32_t... 4
checking size of int_fast32_t... 8
checking size of uint_fast32_t... 8
checking size of int64_t... 8
checking size of uint64_t... 8
checking size of int_least64_t... 8
checking size of uint_least64_t... 8
checking size of int_fast64_t... 8
checking size of uint_fast64_t... 8
checking size of size_t... 8
checking size of ssize_t... 8
checking size of ptrdiff_t... 8
checking size of off_t... 8
checking size of off64_t... 8
checking if dev_t is scalar... yes
checking for dmalloc library... suppressed
checking zlib.h usability... yes
checking zlib.h presence... yes
checking for zlib.h... yes
checking for compress2 in -lz... yes
checking for compress2... yes
checking for szlib... suppressed
checking for thread safe support... no
checking whether CLOCK_MONOTONIC is declared... yes
checking for tm_gmtoff in struct tm... yes
checking for global timezone variable... yes
checking for st_blocks in struct stat... yes
checking for _getvideoconfig... no
checking for gettextinfo... no
checking for GetConsoleScreenBufferInfo... no
checking for _scrsize... no
checking for ioctl... yes
checking for struct videoconfig... no
checking for struct text_info... no
checking for TIOCGWINSZ... yes
checking for TIOCGETD... yes
checking for library containing clock_gettime... none required
checking for alarm... yes
checking for clock_gettime... yes
checking for difftime... yes
checking for fork... yes
checking for frexpf... yes
checking for frexpl... yes
checking for gethostname... yes
checking for getpwuid... yes
checking for getrusage... yes
checking for gettimeofday... yes
checking for lstat... yes
checking for rand_r... yes
checking for random... yes
checking for setsysinfo... no
checking for signal... yes
checking for longjmp... yes
checking for setjmp... yes
checking for siglongjmp... yes
checking for sigsetjmp... no
checking for sigprocmask... yes
checking for snprintf... yes
checking for srandom... yes
checking for strdup... yes
checking for symlink... yes
checking for system... yes
checking for tmpfile... yes
checking for asprintf... yes
checking for vasprintf... yes
checking for vsnprintf... yes
checking for waitpid... yes
checking for an ANSI C-conforming const... yes
checking if the compiler understands  __inline__... yes
checking if the compiler understands __inline... yes
checking if the compiler understands inline... yes
checking for __attribute__ extension... yes
checking for __func__ extension... yes
checking for __FUNCTION__ extension... yes
checking for C99 designated initialization support... yes
checking how to print long long... %ld and %lu
checking Threads support system scope... yes
checking for debug flags... none
checking whether function stack tracking is enabled... no
checking whether metadata trace file code is enabled... no
checking for API tracing... no
checking for instrumented library... no
checking whether to clear file buffers... yes
checking whether a memory checking tool will be used... no
checking for parallel support files... skipped
checking whether O_DIRECT is declared... yes
checking for posix_memalign... yes
checking if the direct I/O virtual file driver (VFD) is enabled... no
checking for custom plugin default path definition... /usr/local/hdf5/lib/plugin
checking whether exception handling functions is checked during data conversions... yes
checking whether data accuracy is guaranteed during data conversions... yes
checking if the machine has window style path name... no
checking if using special algorithm to convert long double to (unsigned) long values... no
checking if using special algorithm to convert (unsigned) long to long double values... no
checking if correctly converting long double to (unsigned) long long values... yes
checking if correctly converting (unsigned) long long to long double values... yes
checking additional programs should be built... no
checking if deprecated public symbols are available... yes
checking which version of public symbols to use by default... v18
checking whether to perform strict file format checks... no
checking whether to have library information embedded in the executables... yes
checking if alignment restrictions are strictly enforced... no
configure: creating ./config.lt
config.lt: creating libtool
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating src/libhdf5.settings
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating test/Makefile
config.status: creating test/testcheck_version.sh
config.status: creating test/testerror.sh
config.status: creating test/H5srcdir_str.h
config.status: creating test/testlibinfo.sh
config.status: creating test/testlinks_env.sh
config.status: creating test/test_plugin.sh
config.status: creating testpar/Makefile
config.status: creating tools/Makefile
config.status: creating tools/h5dump/Makefile
config.status: creating tools/h5dump/testh5dump.sh
config.status: creating tools/h5dump/testh5dumppbits.sh
config.status: creating tools/h5dump/testh5dumpxml.sh
config.status: creating tools/h5ls/testh5ls.sh
config.status: creating tools/h5import/Makefile
config.status: creating tools/h5import/h5importtestutil.sh
config.status: creating tools/h5diff/Makefile
config.status: creating tools/h5diff/testh5diff.sh
config.status: creating tools/h5diff/testph5diff.sh
config.status: creating tools/h5jam/Makefile
config.status: creating tools/h5jam/testh5jam.sh
config.status: creating tools/h5repack/Makefile
config.status: creating tools/h5repack/h5repack.sh
config.status: creating tools/h5repack/h5repack_plugin.sh
config.status: creating tools/h5ls/Makefile
config.status: creating tools/h5copy/Makefile
config.status: creating tools/h5copy/testh5copy.sh
config.status: creating tools/lib/Makefile
config.status: creating tools/misc/Makefile
config.status: creating tools/misc/h5cc
config.status: creating tools/misc/testh5mkgrp.sh
config.status: creating tools/misc/testh5repart.sh
config.status: creating tools/h5stat/testh5stat.sh
config.status: creating tools/h5stat/Makefile
config.status: creating tools/perform/Makefile
config.status: creating examples/Makefile
config.status: creating examples/run-c-ex.sh
config.status: creating examples/testh5cc.sh
config.status: creating c++/Makefile
config.status: creating c++/src/Makefile
config.status: creating c++/src/h5c++
config.status: creating c++/test/Makefile
config.status: creating c++/test/H5srcdir_str.h
config.status: creating c++/examples/Makefile
config.status: creating c++/examples/run-c++-ex.sh
config.status: creating c++/examples/testh5c++.sh
config.status: creating fortran/Makefile
config.status: creating fortran/src/h5fc
config.status: creating fortran/src/Makefile
config.status: creating fortran/test/Makefile
config.status: creating fortran/testpar/Makefile
config.status: creating fortran/examples/Makefile
config.status: creating fortran/examples/run-fortran-ex.sh
config.status: creating fortran/examples/testh5fc.sh
config.status: creating hl/Makefile
config.status: creating hl/src/Makefile
config.status: creating hl/test/Makefile
config.status: creating hl/test/H5srcdir_str.h
config.status: creating hl/tools/Makefile
config.status: creating hl/tools/gif2h5/Makefile
config.status: creating hl/tools/gif2h5/h52giftest.sh
config.status: creating hl/examples/Makefile
config.status: creating hl/examples/run-hlc-ex.sh
config.status: creating hl/c++/Makefile
config.status: creating hl/c++/src/Makefile
config.status: creating hl/c++/test/Makefile
config.status: creating hl/c++/examples/Makefile
config.status: creating hl/c++/examples/run-hlc++-ex.sh
config.status: creating hl/fortran/Makefile
config.status: creating hl/fortran/src/Makefile
config.status: creating hl/fortran/test/Makefile
config.status: creating hl/fortran/examples/Makefile
config.status: creating hl/fortran/examples/run-hlfortran-ex.sh
config.status: creating src/H5config.h
config.status: executing pubconf commands
creating src/H5pubconf.h
Post process src/libhdf5.settings
config.status: executing depfiles commands
config.status: executing libtool commands
	    SUMMARY OF THE HDF5 CONFIGURATION
	    =================================

General Information:
-------------------
		   HDF5 Version: 1.8.16
		  Configured on: Fri Aug  2 00:15:33 CDT 2019
		  Configured by: jh7x3@multicom.eecs.missouri.edu
		 Configure mode: production
		    Host system: x86_64-unknown-linux-gnu
	      Uname information: Linux multicom.eecs.missouri.edu 3.10.0-957.5.1.el7.x86_64 #1 SMP Fri Feb 1 14:54:57 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
		       Byte sex: little-endian
		      Libraries: static, shared
	     Installation point: /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5

Compiling Options:
------------------
               Compilation Mode: production
                     C Compiler: /usr/bin/gcc ( gcc (GCC) 4.8.5 20150623 )
                         CFLAGS: 
                      H5_CFLAGS: -std=c99 -pedantic -Wall -Wextra -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline -Wfloat-equal -Wmissing-format-attribute -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wformat=2 -Wunreachable-code -Wendif-labels -Wdeclaration-after-statement -Wold-style-definition -Winvalid-pch -Wvariadic-macros -Winit-self -Wmissing-include-dirs -Wswitch-default -Wswitch-enum -Wunused-macros -Wunsafe-loop-optimizations -Wc++-compat -Wstrict-overflow -Wlogical-op -Wlarger-than=2048 -Wvla -Wsync-nand -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wstrict-overflow=5 -Wjump-misses-init -Wdouble-promotion -Wsuggest-attribute=const -Wtrampolines -Wstack-usage=8192 -Wvector-operation-performance -Wsuggest-attribute=pure -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -O3
                      AM_CFLAGS: 
                       CPPFLAGS: 
                    H5_CPPFLAGS: -D_GNU_SOURCE -D_POSIX_C_SOURCE=200112L   -DNDEBUG -UH5_DEBUG_API
                    AM_CPPFLAGS: -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE  -I/data/jh7x3/GFOLD/GFOLD_database_tools2//tools/zlib-1.2.8/include
               Shared C Library: yes
               Static C Library: yes
  Statically Linked Executables: no
                        LDFLAGS: 
                     H5_LDFLAGS: 
                     AM_LDFLAGS:  -L/data/jh7x3/GFOLD/GFOLD_database_tools2//tools/zlib-1.2.8/lib
 	 	Extra libraries: -lz -ldl -lm 
 		       Archiver: ar
 		 	 Ranlib: ranlib
 	      Debugged Packages: 
		    API Tracing: no

Languages:
----------
                        Fortran: no

                            C++: no

Features:
---------
                  Parallel HDF5: no
             High Level library: yes
                   Threadsafety: no
            Default API Mapping: v18
 With Deprecated Public Symbols: yes
         I/O filters (external): deflate(zlib)
                            MPE: no
                     Direct VFD: no
                        dmalloc: no
Clear file buffers before write: yes
           Using memory checker: no
         Function Stack Tracing: no
      Strict File Format Checks: no
   Optimization Instrumentation: no
Making all in src
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
make  all-am
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
  CC       H5.lo
  CC       H5checksum.lo
H5checksum.c: In function 'H5_checksum_fletcher32':
H5checksum.c:112:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5_checksum_fletcher32(const void *_data, size_t _len)
 ^
H5checksum.c: In function 'H5_checksum_lookup3':
H5checksum.c:374:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5_checksum_lookup3(const void *key, size_t length, uint32_t initval)
 ^
H5checksum.c: In function 'H5_hash_string':
H5checksum.c:481:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5_hash_string(const char *str)
 ^
  CC       H5dbg.lo
H5dbg.c: In function 'H5_buffer_dump':
H5dbg.c:102:5: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
     for(u = 0; u < buf_size; u += 16) {
     ^
  CC       H5system.lo
H5system.c: In function 'HDfprintf':
H5system.c:277:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:280:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:283:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:286:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:296:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:299:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:302:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:305:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:316:25: warning: implicit conversion from 'float' to 'double' when passing argument to function [-Wdouble-promotion]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:316:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5system.c:319:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:327:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:364:29: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                             n = fprintf(stream, format_templ, x);
                             ^
H5system.c:376:29: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                             fprintf(stream, format_templ, "UNDEF");
                             ^
H5system.c:384:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:392:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:398:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                     n = fprintf(stream, format_templ, nout);
                     ^
H5system.c: In function 'HDstrtoll':
H5system.c:515:7: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
       (*s>='A' && *s<'A'+base-10)))) {
       ^
H5system.c:515:7: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
H5system.c:515:7: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
  CC       H5timer.lo
H5timer.c: In function 'H5_timer_begin':
H5timer.c:130:53: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                    ((double)rusage.ru_utime.tv_usec / 1e6F);
                                                     ^
H5timer.c:132:53: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                    ((double)rusage.ru_stime.tv_usec / 1e6F);
                                                     ^
H5timer.c:139:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     timer->etime = (double)etime.tv_sec + ((double)etime.tv_usec / 1e6F);
                                                                  ^
In file included from H5timer.c:35:0:
H5timer.c: In function 'H5_timer_end':
H5private.h:328:26: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                          ^
H5timer.c:169:20: note: in expansion of macro 'MAX'
     timer->utime = MAX(0.0F, now.utime - timer->utime);
                    ^
H5private.h:328:38: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                      ^
H5timer.c:169:20: note: in expansion of macro 'MAX'
     timer->utime = MAX(0.0F, now.utime - timer->utime);
                    ^
H5private.h:328:26: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                          ^
H5timer.c:170:20: note: in expansion of macro 'MAX'
     timer->stime = MAX(0.0F, now.stime - timer->stime);
                    ^
H5private.h:328:38: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                      ^
H5timer.c:170:20: note: in expansion of macro 'MAX'
     timer->stime = MAX(0.0F, now.stime - timer->stime);
                    ^
H5private.h:328:26: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                          ^
H5timer.c:171:20: note: in expansion of macro 'MAX'
     timer->etime = MAX(0.0F, now.etime - timer->etime);
                    ^
H5private.h:328:38: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                      ^
H5timer.c:171:20: note: in expansion of macro 'MAX'
     timer->etime = MAX(0.0F, now.etime - timer->etime);
                    ^
H5timer.c: In function 'H5_bandwidth':
H5timer.c:211:17: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     if(nseconds <= 0.0F)
                 ^
In file included from H5timer.c:35:0:
H5private.h:512:47: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define H5_DBL_ABS_EQUAL(X,Y)       (HDfabs (X-Y) < DBL_EPSILON)
                                               ^
H5private.h:715:31: note: in definition of macro 'HDfabs'
     #define HDfabs(X)    fabs(X)
                               ^
H5timer.c:215:12: note: in expansion of macro 'H5_DBL_ABS_EQUAL'
         if(H5_DBL_ABS_EQUAL(bw, 0.0F))
            ^
H5timer.c:217:20: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         else if(bw < 1.0F)
                    ^
H5timer.c:219:20: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         else if(bw < H5_KB) {
                    ^
H5timer.c:222:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_MB) {
                      ^
H5timer.c:223:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_KB);
                                       ^
H5timer.c:225:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_GB) {
                      ^
H5timer.c:226:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_MB);
                                       ^
H5timer.c:228:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_TB) {
                      ^
H5timer.c:229:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_GB);
                                       ^
H5timer.c:231:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_EB) {
                      ^
H5timer.c:232:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_TB);
                                       ^
  CC       H5trace.lo
H5trace.c: In function 'H5_trace':
H5trace.c:159:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     if(HDfabs(first_time.etime) < 0.0000000001F)
                                 ^
H5trace.c:235:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      unsigned n = (unsigned)MAX (0, (int)HDstrlen(argname) - 3); /*lint !e666 Allow expression with side effects */
      ^
H5trace.c:2312:29: warning: conversion to 'hssize_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
                             asize[argno] = iul;
                             ^
H5trace.c:2336:29: warning: conversion to 'hssize_t' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                             asize[argno] = iull;
                             ^
  CC       H5A.lo
  CC       H5Abtree2.lo
H5Abtree2.c: In function 'H5A_dense_btree2_name_compare':
H5Abtree2.c:272:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;                  /* Status from fractal heap 'op' routine */
                ^
  CC       H5Adense.lo
  CC       H5Adeprec.lo
  CC       H5Aint.lo
H5Aint.c: In function 'H5A_create':
H5Aint.c:202:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (attr->shared->dt = H5T_copy(type, H5T_COPY_ALL)))
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Aprivate.h:27,
                 from H5Apkg.h:39,
                 from H5Aint.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Aint.c: In function 'H5A_write':
H5Aint.c:529:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if((src_id = H5I_register(H5I_DATATYPE, H5T_copy(mem_type, H5T_COPY_ALL), FALSE)) < 0 ||
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Aprivate.h:27,
                 from H5Apkg.h:39,
                 from H5Aint.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Aint.c: In function 'H5A_read':
H5Aint.c:646:25: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
                         (dst_id = H5I_register(H5I_DATATYPE, H5T_copy(mem_type, H5T_COPY_ALL), FALSE)) < 0)
                         ^
In file included from H5Oprivate.h:41:0,
                 from H5Aprivate.h:27,
                 from H5Apkg.h:39,
                 from H5Aint.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
In file included from H5Aint.c:38:0:
H5Aint.c: In function 'H5A_attr_copy_file':
H5Sprivate.h:172:71: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
 #define H5S_GET_EXTENT_NPOINTS(S)       (H5S_get_simple_extent_npoints(S))
                                                                       ^
H5private.h:1522:23: note: in definition of macro 'H5_CHECKED_ASSIGN'
     (dst) = (dsttype)(src);
                       ^
H5Aint.c:2016:60: note: in expansion of macro 'H5S_GET_EXTENT_NPOINTS'
     H5_CHECKED_ASSIGN(attr_dst->shared->data_size, size_t, H5S_GET_EXTENT_NPOINTS(attr_dst->shared->ds) * H5T_get_size(attr_dst->shared->dt), hssize_t);
                                                            ^
H5Aint.c:1914:17: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     H5O_copy_t *cpy_info, hid_t dxpl_id)
                 ^
H5Aint.c: In function 'H5A_oloc':
H5Aint.c:1093:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5A_oloc(H5A_t *attr)
 ^
H5Aint.c: In function 'H5A_nameof':
H5Aint.c:1124:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5A_nameof(H5A_t *attr)
 ^
H5Aint.c: In function 'H5A_type':
H5Aint.c:1153:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5A_type(const H5A_t *attr)
 ^
  CC       H5Atest.lo
  CC       H5AC.lo
  CC       H5B.lo
H5B.c: In function 'H5B_shared_new':
H5B.c:1751:30: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
                 shared->nkey = H5FL_SEQ_FREE(size_t, shared->nkey);
                              ^
H5B.c: In function 'H5B_shared_free':
H5B.c:1782:18: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
     shared->nkey = H5FL_SEQ_FREE(size_t, shared->nkey);
                  ^
H5B.c: In function 'H5B_copy':
H5B.c:1850:22: warning: request for implicit conversion from 'void *' to 'haddr_t *' not permitted in C++ [-Wc++-compat]
      new_node->child = H5FL_SEQ_FREE(haddr_t, new_node->child);
                      ^
H5B.c: In function 'H5B_valid':
H5B.c:2035:26: warning: variable 'shared' set but not used [-Wunused-but-set-variable]
     H5B_shared_t        *shared;                /* Pointer to shared B-tree info */
                          ^
H5B.c: In function 'H5B_node_dest':
H5B.c:2097:15: warning: request for implicit conversion from 'void *' to 'haddr_t *' not permitted in C++ [-Wc++-compat]
     bt->child = H5FL_SEQ_FREE(haddr_t, bt->child);
               ^
  CC       H5Bcache.lo
  CC       H5Bdbg.lo
H5Bdbg.c: In function 'H5B_debug':
H5Bdbg.c:130:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     "Address:", bt->child[u]);
     ^
H5Bdbg.c:136:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       "Left Key:");
                       ^
H5Bdbg.c:139:10: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
          H5B_NKEY(bt, shared, u), udata);
          ^
H5Bdbg.c:143:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       "Right Key:");
                       ^
H5Bdbg.c:146:10: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
          H5B_NKEY(bt, shared, u + 1), udata);
          ^
  CC       H5B2.lo
  CC       H5B2cache.lo
H5B2cache.c: In function 'H5B2__cache_internal_load':
H5B2cache.c:553:27: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
     internal->nrec = udata->nrec;
                           ^
H5B2cache.c:554:28: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
     internal->depth = udata->depth;
                            ^
In file included from H5B2private.h:34:0,
                 from H5B2pkg.h:32,
                 from H5B2cache.c:38:
H5Fprivate.h:151:20: warning: conversion to 'uint16_t' from 'int' may alter its value [-Wconversion]
       n = (n << 8) | *(--p);            \
                    ^
H5Fprivate.h:183:41: note: in expansion of macro 'DECODE_VAR'
 #  define UINT64DECODE_VAR(p, n, l)     DECODE_VAR(p, n, l)
                                         ^
H5B2cache.c:573:9: note: in expansion of macro 'UINT64DECODE_VAR'
         UINT64DECODE_VAR(p, int_node_ptr->node_nrec, udata->hdr->max_nrec_size);
         ^
H5B2cache.c: In function 'H5B2__cache_leaf_load':
H5B2cache.c:891:23: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
     leaf->nrec = udata->nrec;
                       ^
  CC       H5B2dbg.lo
H5B2dbg.c: In function 'H5B2_hdr_debug':
H5B2dbg.c:175:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             hdr->node_info[u].max_nrec, hdr->node_info[u].split_nrec, hdr->node_info[u].merge_nrec);
             ^
H5B2dbg.c: In function 'H5B2_int_debug':
H5B2dbg.c:289:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   internal->node_ptrs[u].addr);
                   ^
H5B2dbg.c:294:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   temp_str);
                   ^
H5B2dbg.c:297:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5B2_INT_NREC(internal, hdr, u), dbg_ctx);
             ^
H5B2dbg.c:306:15: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
               internal->node_ptrs[u].addr);
               ^
H5B2dbg.c: In function 'H5B2_leaf_debug':
H5B2dbg.c:415:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   temp_str);
                   ^
H5B2dbg.c:418:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5B2_LEAF_NREC(leaf, hdr, u), dbg_ctx);
             ^
  CC       H5B2hdr.lo
H5B2hdr.c: In function 'H5B2_hdr_free':
H5B2hdr.c:525:22: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         hdr->nat_off = H5FL_SEQ_FREE(size_t, hdr->nat_off);
                      ^
H5B2hdr.c:542:24: warning: request for implicit conversion from 'void *' to 'struct H5B2_node_info_t *' not permitted in C++ [-Wc++-compat]
         hdr->node_info = H5FL_SEQ_FREE(H5B2_node_info_t, hdr->node_info);
                        ^
  CC       H5B2int.lo
  CC       H5B2stat.lo
  CC       H5B2test.lo
H5B2test.c: In function 'H5B2_get_node_depth_test':
H5B2test.c:529:22: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
     ret_value = ninfo.depth;
                      ^
  CC       H5C.lo
H5C.c: In function 'H5C_pin_protected_entry':
H5C.c:3418:25: warning: variable 'cache_ptr' set but not used [-Wunused-but-set-variable]
     H5C_t             * cache_ptr;
                         ^
H5C.c: At top level:
H5C.c:285:1: warning: 'H5C_epoch_marker_notify' defined but not used [-Wunused-function]
 H5C_epoch_marker_notify(H5C_notify_action_t H5_ATTR_UNUSED action,
 ^
H5C.c: In function 'H5C_stats__reset':
H5C.c:4812:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5C_stats__reset(H5C_t H5_ATTR_UNUSED * cache_ptr)
 ^
H5C.c: In function 'H5C_make_space_in_cache':
H5C.c:8336:36: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 ( entries_examined <= initial_list_len )
                                    ^
  CC       H5CS.lo
  CC       H5D.lo
  CC       H5Dbtree.lo
  CC       H5Dchunk.lo
H5Dchunk.c: In function 'H5D__chunk_io_init':
H5Dchunk.c:738:60: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     if((file_space_normalized = H5S_hyper_normalize_offset((H5S_t *)file_space, old_offset)) < 0)
                                                            ^
H5Dchunk.c:976:41: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5S_hyper_denormalize_offset((H5S_t *)file_space, old_offset) < 0)
                                         ^
H5Dchunk.c: In function 'H5D__create_chunk_map_single':
H5Dchunk.c:1196:26: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     chunk_info->mspace = (H5S_t *)fm->mem_space;
                          ^
H5Dchunk.c: In function 'H5D__create_chunk_file_map_hyper':
H5Dchunk.c:1263:46: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(TRUE == H5S_hyper_intersect_block((H5S_t *)fm->file_space, coords, end)) {
                                              ^
H5Dchunk.c: In function 'H5D__create_chunk_mem_map_hyper':
H5Dchunk.c:1430:30: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         chunk_info->mspace = (H5S_t *)fm->mem_space;
                              ^
H5Dchunk.c: In function 'H5D__chunk_allocate':
H5Dchunk.c:3345:17: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                 (void *)pline, (H5MM_free_t)H5D__chunk_xfree, (void *)pline,
                 ^
H5Dchunk.c:3345:63: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                 (void *)pline, (H5MM_free_t)H5D__chunk_xfree, (void *)pline,
                                                               ^
H5Dchunk.c: In function 'H5D__chunk_prune_fill':
H5Dchunk.c:3789:20: warning: size of 'chunk_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t chunk_iter;          /* Memory selection iteration info */
                    ^
H5Dchunk.c: In function 'H5D__chunk_copy':
H5Dchunk.c:4831:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (dt_mem = H5T_copy(dt_src, H5T_COPY_TRANSIENT)))
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dchunk.c:57:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dchunk.c:4839:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (dt_dst = H5T_copy(dt_src, H5T_COPY_TRANSIENT)))
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dchunk.c:57:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dchunk.c: In function 'H5D__chunk_dest':
H5Dchunk.c:5168:20: warning: request for implicit conversion from 'void *' to 'struct H5D_rdcc_ent_t **' not permitted in C++ [-Wc++-compat]
         rdcc->slot = H5FL_SEQ_FREE(H5D_rdcc_ent_ptr_t, rdcc->slot);
                    ^
  CC       H5Dcompact.lo
  CC       H5Dcontig.lo
H5Dcontig.c: In function 'H5D__contig_is_space_alloc':
H5Dcontig.c:471:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5D__contig_is_space_alloc(const H5O_storage_t *storage)
 ^
  CC       H5Ddbg.lo
  CC       H5Ddeprec.lo
  CC       H5Defl.lo
In file included from H5Cprivate.h:37:0,
                 from H5ACprivate.h:35,
                 from H5Oprivate.h:38,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Defl.c:32:
H5Defl.c: In function 'H5D__efl_read':
H5Defl.c:292:42: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(H5F_OVERFLOW_HSIZET2OFFT(efl->slot[u].offset + skip))
                                          ^
H5Fprivate.h:346:16: note: in definition of macro 'H5F_OVERFLOW_HSIZET2OFFT'
     ((hsize_t)(X)>=(hsize_t)((hsize_t)1<<(8*sizeof(off_t)-1)))
                ^
In file included from H5Defl.c:31:0:
H5Defl.c:296:37: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(HDlseek(fd, (off_t)(efl->slot[u].offset + skip), SEEK_SET) < 0)
                                     ^
H5private.h:1000:43: note: in definition of macro 'HDlseek'
         #define HDlseek(F,O,W)  lseek64(F,O,W)
                                           ^
In file included from H5Cprivate.h:37:0,
                 from H5ACprivate.h:35,
                 from H5Oprivate.h:38,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Defl.c:32:
H5Defl.c: In function 'H5D__efl_write':
H5Defl.c:378:42: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(H5F_OVERFLOW_HSIZET2OFFT(efl->slot[u].offset + skip))
                                          ^
H5Fprivate.h:346:16: note: in definition of macro 'H5F_OVERFLOW_HSIZET2OFFT'
     ((hsize_t)(X)>=(hsize_t)((hsize_t)1<<(8*sizeof(off_t)-1)))
                ^
In file included from H5Defl.c:31:0:
H5Defl.c:386:37: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(HDlseek(fd, (off_t)(efl->slot[u].offset + skip), SEEK_SET) < 0)
                                     ^
H5private.h:1000:43: note: in definition of macro 'HDlseek'
         #define HDlseek(F,O,W)  lseek64(F,O,W)
                                           ^
H5Defl.c: In function 'H5D__efl_is_space_alloc':
H5Defl.c:201:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5D__efl_is_space_alloc(const H5O_storage_t H5_ATTR_UNUSED *storage)
 ^
  CC       H5Dfill.lo
H5Dfill.c: In function 'H5D__fill':
H5Dfill.c:234:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if((src_id = H5I_register(H5I_DATATYPE, H5T_copy(fill_type, H5T_COPY_ALL), FALSE)) < 0)
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dfill.c:37:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dfill.c:237:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if((dst_id = H5I_register(H5I_DATATYPE, H5T_copy(buf_type, H5T_COPY_ALL), FALSE)) < 0)
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dfill.c:37:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dfill.c:248:28: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
             H5S_sel_iter_t mem_iter;            /* Memory selection iteration info */
                            ^
H5Dfill.c: In function 'H5D__fill_init':
H5Dfill.c:407:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if(NULL == (fb_info->mem_type = H5T_copy(dset_type, H5T_COPY_REOPEN)))
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dfill.c:37:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
  CC       H5Dint.lo
H5Dint.c: In function 'H5D__init_type':
H5Dint.c:636:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if((dset->shared->type = H5T_copy(type, H5T_COPY_ALL)) == NULL)
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dint.c:30:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dint.c:659:30: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         dset->shared->type = (H5T_t *)type; /* (Cast away const OK - QAK) */
                              ^
H5Dint.c: In function 'H5D_oloc':
H5Dint.c:1529:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5D_oloc(H5D_t *dataset)
 ^
H5Dint.c: In function 'H5D_nameof':
H5Dint.c:1552:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5D_nameof(H5D_t *dataset)
 ^
H5Dint.c: In function 'H5D_typeof':
H5Dint.c:1576:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5D_typeof(const H5D_t *dset)
 ^
  CC       H5Dio.lo
H5Dio.c: In function 'H5D__pre_write':
H5Dio.c:330:15: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for(u = 0; u < ndims; u++) {
               ^
H5Dio.c: In function 'H5D__read':
H5Dio.c:377:21: warning: size of 'fm' is 2864 bytes [-Wlarger-than=]
     H5D_chunk_map_t fm;                 /* Chunk file<->memory mapping */
                     ^
H5Dio.c:478:66: warning: to be safe all intermediate pointers in cast from 'void **' to 'const void **' must be 'const' qualified [-Wcast-qual]
                 (unsigned)H5S_GET_EXTENT_NDIMS(file_space), buf, (const void **)&adj_buf, type_info.dst_type_size) < 0)
                                                                  ^
H5Dio.c: In function 'H5D__write':
H5Dio.c:593:21: warning: size of 'fm' is 2864 bytes [-Wlarger-than=]
     H5D_chunk_map_t fm;                 /* Chunk file<->memory mapping */
                     ^
H5Dio.c:732:66: warning: to be safe all intermediate pointers in cast from 'void **' to 'const void **' must be 'const' qualified [-Wcast-qual]
                 (unsigned)H5S_GET_EXTENT_NDIMS(file_space), buf, (const void **)&adj_buf, type_info.src_type_size) < 0)
                                                                  ^
  CC       H5Dlayout.lo
  CC       H5Dmpio.lo
  CC       H5Doh.lo
  CC       H5Dscatgath.lo
H5Dscatgath.c: In function 'H5D__scatter_file':
H5Dscatgath.c:100:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];             /* Array to store sequence offsets */
             ^
H5Dscatgath.c:105:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];              /* Array to store sequence lengths */
            ^
H5Dscatgath.c:164:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:166:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__gather_file':
H5Dscatgath.c:199:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];   /* Array to store sequence offsets */
             ^
H5Dscatgath.c:204:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];    /* Array to store sequence lengths */
            ^
H5Dscatgath.c:265:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:267:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__scatter_mem':
H5Dscatgath.c:295:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];          /* Array to store sequence offsets */
             ^
H5Dscatgath.c:297:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];           /* Array to store sequence lengths */
            ^
H5Dscatgath.c:350:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:352:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__gather_mem':
H5Dscatgath.c:382:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];          /* Array to store sequence offsets */
             ^
H5Dscatgath.c:384:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];           /* Array to store sequence lengths */
            ^
H5Dscatgath.c:437:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:439:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__scatgath_read':
H5Dscatgath.c:463:20: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t mem_iter;            /*memory selection iteration info*/
                    ^
H5Dscatgath.c:465:20: warning: size of 'bkg_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t bkg_iter;            /*background iteration info*/
                    ^
H5Dscatgath.c:467:20: warning: size of 'file_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t file_iter;           /*file selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5D__scatgath_write':
H5Dscatgath.c:595:20: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t mem_iter;            /*memory selection iteration info*/
                    ^
H5Dscatgath.c:597:20: warning: size of 'bkg_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t bkg_iter;            /*background iteration info*/
                    ^
H5Dscatgath.c:599:20: warning: size of 'file_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t file_iter;           /*file selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5D__compound_opt_read':
H5Dscatgath.c:747:16: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t    _off[H5D_IO_VECTOR_SIZE];        /* Array to store sequence offsets */
                ^
H5Dscatgath.c:749:16: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t     _len[H5D_IO_VECTOR_SIZE];        /* Array to store sequence lengths */
                ^
H5Dscatgath.c:831:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:833:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5Dscatter':
H5Dscatgath.c:926:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5Dgather':
H5Dscatgath.c:1026:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5D__gather_file':
H5Dscatgath.c:194:1: warning: stack usage is 16800 bytes [-Wstack-usage=]
 H5D__gather_file(const H5D_io_info_t *_io_info,
 ^
H5Dscatgath.c:270:1: warning: the frame size of 16712 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* H5D__gather_file() */
 ^
H5Dscatgath.c: In function 'H5D__gather_mem.isra.0':
H5Dscatgath.c:376:1: warning: stack usage is 16576 bytes [-Wstack-usage=]
 H5D__gather_mem(const void *_buf, const H5S_t *space,
 ^
H5Dscatgath.c:442:1: warning: the frame size of 16488 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* H5D__gather_mem() */
 ^
H5Dscatgath.c: In function 'H5D__scatter_mem':
H5Dscatgath.c:289:1: warning: stack usage is 16576 bytes [-Wstack-usage=]
 H5D__scatter_mem (const void *_tscat_buf, const H5S_t *space,
 ^
H5Dscatgath.c:355:1: warning: the frame size of 16480 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* H5D__scatter_mem() */
 ^
H5Dscatgath.c: In function 'H5D__scatgath_read':
H5Dscatgath.c:458:1: warning: stack usage is 23392 bytes [-Wstack-usage=]
 H5D__scatgath_read(const H5D_io_info_t *io_info, const H5D_type_info_t *type_info,
 ^
H5Dscatgath.c:574:1: warning: the frame size of 23304 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end H5D__scatgath_read() */
 ^
H5Dscatgath.c: In function 'H5D__scatgath_write':
H5Dscatgath.c:590:1: warning: stack usage is 23600 bytes [-Wstack-usage=]
 H5D__scatgath_write(const H5D_io_info_t *io_info, const H5D_type_info_t *type_info,
 ^
H5Dscatgath.c:705:1: warning: the frame size of 23512 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end H5D__scatgath_write() */
 ^
  CC       H5Dselect.lo
H5Dselect.c: In function 'H5D__select_io':
H5Dselect.c:89:20: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t mem_iter;    /* Memory selection iteration info */
                    ^
H5Dselect.c:91:20: warning: size of 'file_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t file_iter;   /* File selection iteration info */
                    ^
H5Dselect.c:93:13: warning: size of '_mem_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _mem_off[H5D_IO_VECTOR_SIZE];      /* Array to store sequence offsets in memory */
             ^
H5Dselect.c:95:13: warning: size of '_file_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _file_off[H5D_IO_VECTOR_SIZE];     /* Array to store sequence offsets in the file */
             ^
H5Dselect.c:97:12: warning: size of '_mem_len' is 8192 bytes [-Wlarger-than=]
     size_t _mem_len[H5D_IO_VECTOR_SIZE];       /* Array to store sequence lengths in memory */
            ^
H5Dselect.c:99:12: warning: size of '_file_len' is 8192 bytes [-Wlarger-than=]
     size_t _file_len[H5D_IO_VECTOR_SIZE];      /* Array to store sequence lengths in the file */
            ^
H5Dselect.c:242:18: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         file_len = H5FL_SEQ_FREE(size_t, file_len);
                  ^
H5Dselect.c:244:18: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         file_off = H5FL_SEQ_FREE(hsize_t, file_off);
                  ^
H5Dselect.c:246:17: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         mem_len = H5FL_SEQ_FREE(size_t, mem_len);
                 ^
H5Dselect.c:248:17: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         mem_off = H5FL_SEQ_FREE(hsize_t, mem_off);
                 ^
H5Dselect.c:86:1: warning: stack usage is 37504 bytes [-Wstack-usage=]
 H5D__select_io(const H5D_io_info_t *io_info, size_t elmt_size,
 ^
H5Dselect.c:251:1: warning: the frame size of 37416 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end H5D__select_io() */
 ^
  CC       H5Dtest.lo
  CC       H5E.lo
H5E.c: In function 'H5Epush2':
H5E.c:1391:5: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
     if(HDvasprintf(&tmp, fmt, ap) < 0)
     ^
  CC       H5Edeprec.lo
  CC       H5Eint.lo
H5Eint.c: In function 'H5E_printf_stack':
H5Eint.c:739:5: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
     if(HDvasprintf(&tmp, fmt, ap) < 0)
     ^
H5Eint.c: In function 'H5E_clear_entries':
H5Eint.c:905:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             H5MM_xfree((void *)error->func_name);        /* Casting away const OK - QAK */
                        ^
H5Eint.c:907:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             H5MM_xfree((void *)error->file_name);        /* Casting away const OK - QAK */
                        ^
H5Eint.c:909:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             H5MM_xfree((void *)error->desc);     /* Casting away const OK - QAK */
                        ^
H5Eint.c: In function 'H5E_walk':
H5Eint.c:574:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int)(estack->nused - 1); i >= 0 && status >= 0; i--) {
                                                     ^
H5Eint.c:604:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int)(estack->nused - 1); i >= 0 && status >= 0; i--)
                                                     ^
  CC       H5F.lo
  CC       H5Fint.lo
H5Fint.c: In function 'H5F_build_actual_name':
H5Fint.c:1583:18: warning: size of 'realname' is 4096 bytes [-Wlarger-than=]
             char realname[PATH_MAX];    /* Fully resolved path name of file */
                  ^
  CC       H5Faccum.lo
  CC       H5Fcwfs.lo
  CC       H5Fdbg.lo
H5Fdbg.c: In function 'H5F_debug':
H5Fdbg.c:126:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5G__ent_debug(f->shared->sblock->root_ent, stream, indent + 3, MAX(0, fwidth - 3), NULL);
             ^
H5Fdbg.c:141:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5G__ent_debug(&root_ent, stream, indent + 3, MAX(0, fwidth - 3), NULL);
             ^
  CC       H5Fefc.lo
H5Fefc.c: In function 'H5F_efc_max_nfiles':
H5Fefc.c:396:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_efc_max_nfiles(H5F_efc_t *efc)
 ^
  CC       H5Ffake.lo
  CC       H5Fio.lo
  CC       H5Fmount.lo
H5Fmount.c: In function 'H5F_is_mount':
H5Fmount.c:440:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_is_mount(const H5F_t *file)
 ^
  CC       H5Fmpi.lo
  CC       H5Fquery.lo
H5Fquery.c: In function 'H5F_get_intent':
H5Fquery.c:94:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_intent(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_open_name':
H5Fquery.c:119:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_open_name(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_actual_name':
H5Fquery.c:145:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_actual_name(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_extpath':
H5Fquery.c:171:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_extpath(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_shared':
H5Fquery.c:195:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_shared(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_same_shared':
H5Fquery.c:218:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_same_shared(const H5F_t *f1, const H5F_t *f2)
 ^
H5Fquery.c: In function 'H5F_get_nopen_objs':
H5Fquery.c:244:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_nopen_objs(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_file_id':
H5Fquery.c:267:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_file_id(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_parent':
H5Fquery.c:290:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_parent(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_nmounts':
H5Fquery.c:313:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_nmounts(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_fcpl':
H5Fquery.c:340:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_fcpl(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sizeof_addr':
H5Fquery.c:367:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sizeof_addr(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sizeof_size':
H5Fquery.c:394:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sizeof_size(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_sohm_addr':
H5Fquery.c:418:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_sohm_addr(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_sohm_vers':
H5Fquery.c:442:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_sohm_vers(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_sohm_nindexes':
H5Fquery.c:466:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_sohm_nindexes(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sym_leaf_k':
H5Fquery.c:497:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sym_leaf_k(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_Kvalue':
H5Fquery.c:529:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_Kvalue(const H5F_t *f, const H5B_class_t *type)
 ^
H5Fquery.c: In function 'H5F_get_nrefs':
H5Fquery.c:555:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_nrefs(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_rdcc_nslots':
H5Fquery.c:586:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_rdcc_nslots(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_rdcc_nbytes':
H5Fquery.c:617:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_rdcc_nbytes(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_rdcc_w0':
H5Fquery.c:648:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_rdcc_w0(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_base_addr':
H5Fquery.c:675:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_base_addr(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_grp_btree_shared':
H5Fquery.c:707:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_grp_btree_shared(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sieve_buf_size':
H5Fquery.c:738:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sieve_buf_size(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_gc_ref':
H5Fquery.c:769:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_gc_ref(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_use_latest_format':
H5Fquery.c:798:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_use_latest_format(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_fc_degree':
H5Fquery.c:826:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_fc_degree(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_store_msg_crt_idx':
H5Fquery.c:854:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_store_msg_crt_idx(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_has_feature':
H5Fquery.c:881:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_has_feature(const H5F_t *f, unsigned feature)
 ^
H5Fquery.c: In function 'H5F_get_driver_id':
H5Fquery.c:908:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_driver_id(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_is_tmp_addr':
H5Fquery.c:1037:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_is_tmp_addr(const H5F_t *f, haddr_t addr)
 ^
H5Fquery.c: In function 'H5F_use_tmp_space':
H5Fquery.c:1065:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_use_tmp_space(const H5F_t *f)
 ^
  CC       H5Fsfile.lo
H5Fsfile.c: In function 'H5F_sfile_assert_num':
H5Fsfile.c:57:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5F_sfile_assert_num(unsigned n)
 ^
  CC       H5Fsuper.lo
  CC       H5Fsuper_cache.lo
H5Fsuper_cache.c: In function 'H5F_sblock_load':
H5Fsuper_cache.c:282:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->base_addr/*out*/);
                            ^
H5Fsuper_cache.c:283:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->ext_addr/*out*/);
                            ^
H5Fsuper_cache.c:284:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &stored_eoa/*out*/);
                            ^
H5Fsuper_cache.c:285:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->driver_addr/*out*/);
                            ^
H5Fsuper_cache.c:293:30: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         if(H5G_ent_decode(f, (const uint8_t **)&p, sblock->root_ent) < 0)
                              ^
H5Fsuper_cache.c:414:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->base_addr/*out*/);
                            ^
H5Fsuper_cache.c:415:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->ext_addr/*out*/);
                            ^
H5Fsuper_cache.c:416:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &stored_eoa/*out*/);
                            ^
H5Fsuper_cache.c:417:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->root_addr/*out*/);
                            ^
  CC       H5Ftest.lo
  CC       H5FD.lo
H5FD.c: In function 'H5FD_get_base_addr':
H5FD.c:2053:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5FD_get_base_addr(const H5FD_t *file)
 ^
  CC       H5FDcore.lo
  CC       H5FDdirect.lo
In file included from H5FDdirect.c:32:0:
H5private.h:1835:15: warning: 'H5_interface_initialize_g' defined but not used [-Wunused-variable]
 static int    H5_interface_initialize_g = 0;
               ^
H5FDdirect.c:26:33: warning: 'H5FD_direct_init_interface' declared 'static' but never defined [-Wunused-function]
 #define H5_INTERFACE_INIT_FUNC  H5FD_direct_init_interface
                                 ^
H5private.h:1836:18: note: in expansion of macro 'H5_INTERFACE_INIT_FUNC'
 static herr_t    H5_INTERFACE_INIT_FUNC(void);
                  ^
  CC       H5FDfamily.lo
H5FDfamily.c: In function 'H5FD_family_open':
H5FDfamily.c:649:11: warning: size of 'memb_name' is 4096 bytes [-Wlarger-than=]
     char  memb_name[4096], temp[4096];
           ^
H5FDfamily.c:649:28: warning: size of 'temp' is 4096 bytes [-Wlarger-than=]
     char  memb_name[4096], temp[4096];
                            ^
H5FDfamily.c:711:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(memb_name, sizeof(memb_name), name, 0);
     ^
H5FDfamily.c:711:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c:712:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(temp, sizeof(temp), name, 1);
     ^
H5FDfamily.c:712:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c:718:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
         HDsnprintf(memb_name, sizeof(memb_name), name, file->nmembs);
         ^
H5FDfamily.c:718:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c: In function 'H5FD_family_cmp':
H5FDfamily.c:870:1: warning: label 'done' defined but not used [-Wunused-label]
 done:
 ^
H5FDfamily.c: In function 'H5FD_family_set_eoa':
H5FDfamily.c:970:11: warning: size of 'memb_name' is 4096 bytes [-Wlarger-than=]
     char  memb_name[4096];
           ^
H5FDfamily.c:993:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
             HDsnprintf(memb_name, sizeof(memb_name), file->name, u);
             ^
H5FDfamily.c:993:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c: In function 'H5FD_family_open':
H5FDfamily.c:644:1: warning: stack usage is 8352 bytes [-Wstack-usage=]
 H5FD_family_open(const char *name, unsigned flags, hid_t fapl_id,
 ^
  CC       H5FDint.lo
  CC       H5FDlog.lo
H5FDlog.c: In function 'H5Pset_fapl_log':
H5FDlog.c:326:18: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     fa.logfile = (char *)logfile;
                  ^
H5FDlog.c: In function 'H5FD_log_open':
H5FDlog.c:616:95: warning: 'stat_timeval_diff.tv_usec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Stat took: (%f s)\n", (double)stat_timeval_diff.tv_sec + ((double)stat_timeval_diff.tv_usec / (double)1000000.0f));
                                                                                               ^
H5FDlog.c:616:59: warning: 'stat_timeval_diff.tv_sec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Stat took: (%f s)\n", (double)stat_timeval_diff.tv_sec + ((double)stat_timeval_diff.tv_usec / (double)1000000.0f));
                                                           ^
H5FDlog.c:614:95: warning: 'open_timeval_diff.tv_usec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Open took: (%f s)\n", (double)open_timeval_diff.tv_sec + ((double)open_timeval_diff.tv_usec / (double)1000000.0f));
                                                                                               ^
H5FDlog.c:614:59: warning: 'open_timeval_diff.tv_sec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Open took: (%f s)\n", (double)open_timeval_diff.tv_sec + ((double)open_timeval_diff.tv_usec / (double)1000000.0f));
                                                           ^
  CC       H5FDmpi.lo
  CC       H5FDmpio.lo
In file included from H5FDmpio.c:28:0:
H5private.h:1835:15: warning: 'H5_interface_initialize_g' defined but not used [-Wunused-variable]
 static int    H5_interface_initialize_g = 0;
               ^
H5FDmpio.c:25:33: warning: 'H5FD_mpio_init_interface' declared 'static' but never defined [-Wunused-function]
 #define H5_INTERFACE_INIT_FUNC  H5FD_mpio_init_interface
                                 ^
H5private.h:1836:18: note: in expansion of macro 'H5_INTERFACE_INIT_FUNC'
 static herr_t    H5_INTERFACE_INIT_FUNC(void);
                  ^
  CC       H5FDmulti.lo
H5FDmulti.c: In function 'H5FD_multi_read':
H5FDmulti.c:1622:55: warning: unused parameter 'dxpl_id' [-Wunused-parameter]
 H5FD_multi_read(H5FD_t *_file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr,
                                                       ^
H5FDmulti.c: In function 'H5FD_multi_write':
H5FDmulti.c:1673:56: warning: unused parameter 'dxpl_id' [-Wunused-parameter]
 H5FD_multi_write(H5FD_t *_file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr,
                                                        ^
H5FDmulti.c: In function 'compute_next':
H5FDmulti.c:52:16: warning: declaration of '_unmapped' shadows a previous local [-Wshadow]
     H5FD_mem_t _unmapped, LOOPVAR;           \
                ^
H5FDmulti.c:1847:2: note: in expansion of macro 'UNIQUE_MEMBERS'
  UNIQUE_MEMBERS(file->fa.memb_map, mt2) {
  ^
H5FDmulti.c:52:16: warning: shadowed declaration is here [-Wshadow]
     H5FD_mem_t _unmapped, LOOPVAR;           \
                ^
H5FDmulti.c:1846:5: note: in expansion of macro 'UNIQUE_MEMBERS'
     UNIQUE_MEMBERS(file->fa.memb_map, mt1) {
     ^
H5FDmulti.c:53:13: warning: declaration of '_seen' shadows a previous local [-Wshadow]
     hbool_t _seen[H5FD_MEM_NTYPES];           \
             ^
H5FDmulti.c:1847:2: note: in expansion of macro 'UNIQUE_MEMBERS'
  UNIQUE_MEMBERS(file->fa.memb_map, mt2) {
  ^
H5FDmulti.c:53:13: warning: shadowed declaration is here [-Wshadow]
     hbool_t _seen[H5FD_MEM_NTYPES];           \
             ^
H5FDmulti.c:1846:5: note: in expansion of macro 'UNIQUE_MEMBERS'
     UNIQUE_MEMBERS(file->fa.memb_map, mt1) {
     ^
H5FDmulti.c: In function 'open_members':
H5FDmulti.c:1896:2: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
  sprintf(tmp, file->fa.memb_name[mt], file->name);
  ^
  CC       H5FDsec2.lo
  CC       H5FDspace.lo
  CC       H5FDstdio.lo
  CC       H5FL.lo
  CC       H5FO.lo
  CC       H5FS.lo
H5FS.c: In function 'H5FS_new':
H5FS.c:540:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     fspace->nclasses = nclasses;
     ^
In file included from H5FS.c:38:0:
H5FSpkg.h:79:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + H5F_SIZEOF_SIZE(f) /* Allocated size of serialized free space sections */ \
     ^
H5FS.c:566:24: note: in expansion of macro 'H5FS_HEADER_SIZE'
     fspace->hdr_size = H5FS_HEADER_SIZE(f);
                        ^
H5FS.c: In function 'H5FS_size':
H5FS.c:601:24: warning: unused parameter 'f' [-Wunused-parameter]
 H5FS_size(const H5F_t *f, const H5FS_t *fspace, hsize_t *meta_size)
                        ^
H5FS.c: In function 'H5FS_sinfo_dest':
H5FS.c:892:17: warning: request for implicit conversion from 'void *' to 'struct H5FS_bin_t *' not permitted in C++ [-Wc++-compat]
     sinfo->bins = H5FL_SEQ_FREE(H5FS_bin_t, sinfo->bins);
                 ^
  CC       H5FScache.lo
H5FScache.c: In function 'H5FS_cache_sinfo_load':
H5FScache.c:618:17: warning: variable 'old_tot_space' set but not used [-Wunused-but-set-variable]
         hsize_t old_tot_space;          /* Total space managed from header */
                 ^
H5FScache.c:617:17: warning: variable 'old_ghost_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_ghost_sect_count;   /* Total ghost section count from header */
                 ^
H5FScache.c:616:17: warning: variable 'old_serial_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_serial_sect_count;  /* Total serializable section count from header */
                 ^
H5FScache.c:615:17: warning: variable 'old_tot_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_tot_sect_count;     /* Total section count from header */
                 ^
  CC       H5FSdbg.lo
H5FSdbg.c: In function 'H5FS_sects_debug':
H5FSdbg.c:288:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(H5HF_sects_debug(f, dxpl_id, client_addr, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
             ^
  CC       H5FSsection.lo
H5FSsection.c: In function 'H5FS_sinfo_new':
H5FSsection.c:147:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     sinfo->sect_prefix_size = (size_t)H5FS_SINFO_PREFIX_SIZE(f);
                               ^
H5FSsection.c:178:25: warning: request for implicit conversion from 'void *' to 'struct H5FS_bin_t *' not permitted in C++ [-Wc++-compat]
             sinfo->bins = H5FL_SEQ_FREE(H5FS_bin_t, sinfo->bins);
                         ^
H5FSsection.c: In function 'H5FS_sect_try_shrink_eoa':
H5FSsection.c:2338:5: warning: passing argument 1 of 'H5FS_sinfo_lock' discards 'const' qualifier from pointer target type [enabled by default]
     if(H5FS_sinfo_lock(f, dxpl_id, fspace, H5AC_WRITE) < 0)
     ^
H5FSsection.c:207:1: note: expected 'struct H5F_t *' but argument is of type 'const struct H5F_t *'
 H5FS_sinfo_lock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, H5AC_protect_t accmode)
 ^
H5FSsection.c:2338:5: warning: passing argument 3 of 'H5FS_sinfo_lock' discards 'const' qualifier from pointer target type [enabled by default]
     if(H5FS_sinfo_lock(f, dxpl_id, fspace, H5AC_WRITE) < 0)
     ^
H5FSsection.c:207:1: note: expected 'struct H5FS_t *' but argument is of type 'const struct H5FS_t *'
 H5FS_sinfo_lock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, H5AC_protect_t accmode)
 ^
H5FSsection.c:2362:7: warning: passing argument 1 of 'H5FS_sect_remove_real' discards 'const' qualifier from pointer target type [enabled by default]
       if(H5FS_sect_remove_real(fspace, tmp_sect) < 0)
       ^
H5FSsection.c:859:1: note: expected 'struct H5FS_t *' but argument is of type 'const struct H5FS_t *'
 H5FS_sect_remove_real(H5FS_t *fspace, H5FS_section_info_t *sect)
 ^
H5FSsection.c:2376:5: warning: passing argument 1 of 'H5FS_sinfo_unlock' discards 'const' qualifier from pointer target type [enabled by default]
     if(sinfo_valid && H5FS_sinfo_unlock(f, dxpl_id, fspace, section_removed) < 0)
     ^
H5FSsection.c:313:1: note: expected 'struct H5F_t *' but argument is of type 'const struct H5F_t *'
 H5FS_sinfo_unlock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, hbool_t modified)
 ^
H5FSsection.c:2376:5: warning: passing argument 3 of 'H5FS_sinfo_unlock' discards 'const' qualifier from pointer target type [enabled by default]
     if(sinfo_valid && H5FS_sinfo_unlock(f, dxpl_id, fspace, section_removed) < 0)
     ^
H5FSsection.c:313:1: note: expected 'struct H5FS_t *' but argument is of type 'const struct H5FS_t *'
 H5FS_sinfo_unlock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, hbool_t modified)
 ^
  CC       H5FSstat.lo
H5FSstat.c: In function 'H5FS_stat_info':
H5FSstat.c:99:23: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     stats->hdr_size = (size_t)H5FS_HEADER_SIZE(f);
                       ^
  CC       H5FStest.lo
H5FStest.c: In function 'H5FS_cmp_cparam_test':
H5FStest.c:118:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5FS_cmp_cparam_test(const H5FS_create_t *cparam1, const H5FS_create_t *cparam2)
 ^
  CC       H5G.lo
  CC       H5Gbtree2.lo
H5Gbtree2.c: In function 'H5G_dense_btree2_name_compare':
H5Gbtree2.c:266:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;                  /* Status from fractal heap 'op' routine */
                ^
  CC       H5Gcache.lo
In file included from H5Gpkg.h:32:0,
                 from H5Gcache.c:39:
H5Gcache.c: In function 'H5G_node_load':
H5Gprivate.h:54:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     4 +    /*reserved    */    \
       ^
H5Gpkg.h:58:34: note: in expansion of macro 'H5G_SIZEOF_ENTRY'
     + ((2 * H5F_SYM_LEAF_K(f)) * H5G_SIZEOF_ENTRY(f))                         \
                                  ^
H5Gcache.c:148:22: note: in expansion of macro 'H5G_NODE_SIZE'
     sym->node_size = H5G_NODE_SIZE(f);
                      ^
H5Gcache.c:123:60: warning: unused parameter 'udata' [-Wunused-parameter]
 H5G_node_load(H5F_t *f, hid_t dxpl_id, haddr_t addr, void *udata)
                                                            ^
  CC       H5Gcompact.lo
  CC       H5Gdense.lo
H5Gdense.c: In function 'H5G__dense_create':
H5Gdense.c:325:30: warning: conversion to 'uint32_t' from 'size_t' may alter its value [-Wconversion]
     bt2_cparam.rrec_size = 4 +          /* Name's hash value */
                              ^
H5Gdense.c:345:34: warning: conversion to 'uint32_t' from 'size_t' may alter its value [-Wconversion]
         bt2_cparam.rrec_size = 8 +      /* Creation order value */
                                  ^
  CC       H5Gdeprec.lo
H5Gdeprec.c: In function 'H5G_map_obj_type':
H5Gdeprec.c:169:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5G_map_obj_type(H5O_type_t obj_type)
 ^
  CC       H5Gent.lo
H5Gent.c: In function 'H5G__ent_copy':
H5Gent.c:341:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         H5G__ent_reset((H5G_entry_t *)src);
                        ^
H5Gent.c: In function 'H5G__ent_debug':
H5Gent.c:553:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     nested_fwidth = MAX(0, fwidth - 3);
     ^
  CC       H5Gint.lo
H5Gint.c: In function 'H5G_oloc':
H5Gint.c:578:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5G_oloc(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_nameof':
H5Gint.c:601:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5G_nameof(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_fileof':
H5Gint.c:625:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5G_fileof(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_get_shared_count':
H5Gint.c:649:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5G_get_shared_count(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_mounted':
H5Gint.c:701:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5G_mounted(H5G_t *grp)
 ^
  CC       H5Glink.lo
  CC       H5Gloc.lo
H5Gloc.c: In function 'H5G__loc_insert':
H5Gloc.c:580:16: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     lnk.name = (char *)name;
                ^
H5Gloc.c: In function 'H5G_loc_set_comment_cb':
H5Gloc.c:793:14: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
  comment.s = (char *)udata->comment;
              ^
  CC       H5Gname.lo
H5Gname.c: In function 'H5G_name_copy':
H5Gname.c:537:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         H5G_name_reset((H5G_name_t *)src);
                        ^
  CC       H5Gnode.lo
H5Gnode.c: In function 'H5G__node_free':
H5Gnode.c:299:20: warning: request for implicit conversion from 'void *' to 'struct H5G_entry_t *' not permitted in C++ [-Wc++-compat]
         sym->entry = H5FL_SEQ_FREE(H5G_entry_t, sym->entry);
                    ^
In file included from H5Gpkg.h:32:0,
                 from H5Gnode.c:45:
H5Gnode.c: In function 'H5G_node_create':
H5Gprivate.h:54:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     4 +    /*reserved    */    \
       ^
H5Gpkg.h:58:34: note: in expansion of macro 'H5G_SIZEOF_ENTRY'
     + ((2 * H5F_SYM_LEAF_K(f)) * H5G_SIZEOF_ENTRY(f))                         \
                                  ^
H5Gnode.c:344:22: note: in expansion of macro 'H5G_NODE_SIZE'
     sym->node_size = H5G_NODE_SIZE(f);
                      ^
H5Gnode.c:367:28: warning: request for implicit conversion from 'void *' to 'struct H5G_entry_t *' not permitted in C++ [-Wc++-compat]
                 sym->entry = H5FL_SEQ_FREE(H5G_entry_t, sym->entry);
                            ^
H5Gnode.c: In function 'H5G_node_insert':
H5Gnode.c:718:6: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
      idx -= H5F_SYM_LEAF_K(f);
      ^
H5Gnode.c:718:10: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
      idx -= H5F_SYM_LEAF_K(f);
          ^
H5Gnode.c: In function 'H5G_node_remove':
H5Gnode.c:792:21: warning: unused variable 'lt_key' [-Wunused-variable]
     H5G_node_key_t *lt_key = (H5G_node_key_t *)_lt_key;
                     ^
H5Gnode.c: In function 'H5G__node_copy':
H5Gnode.c:1294:28: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             grp_loc.oloc = (H5O_loc_t *)src_oloc;
                            ^
In file included from H5Gpkg.h:32:0,
                 from H5Gnode.c:45:
H5Gnode.c: In function 'H5G__node_iterate_size':
H5Gprivate.h:54:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     4 +    /*reserved    */    \
       ^
H5Gpkg.h:58:34: note: in expansion of macro 'H5G_SIZEOF_ENTRY'
     + ((2 * H5F_SYM_LEAF_K(f)) * H5G_SIZEOF_ENTRY(f))                         \
                                  ^
H5Gnode.c:1481:19: note: in expansion of macro 'H5G_NODE_SIZE'
     *stab_size += H5G_NODE_SIZE(f);
                   ^
H5Gnode.c: In function 'H5G_node_debug':
H5Gnode.c:1550:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         fwidth = MAX(0, fwidth - 3);
         ^
  CC       H5Gobj.lo
H5Gobj.c: In function 'H5G__obj_create_real':
H5Gobj.c:272:67: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5O_msg_create(oloc, H5O_LINFO_ID, 0, H5O_UPDATE_TIME, (void *)linfo, dxpl_id) < 0)
                                                                   ^
H5Gobj.c:277:73: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5O_msg_create(oloc, H5O_GINFO_ID, H5O_MSG_FLAG_CONSTANT, 0, (void *)ginfo, dxpl_id) < 0)
                                                                         ^
H5Gobj.c:283:77: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if(H5O_msg_create(oloc, H5O_PLINE_ID, H5O_MSG_FLAG_CONSTANT, 0, (void *)pline, dxpl_id) < 0)
                                                                             ^
H5Gobj.c: In function 'H5G_obj_stab_to_new_cb':
H5Gobj.c:433:51: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     if(H5G_obj_insert(udata->grp_oloc, lnk->name, (H5O_link_t *)lnk, FALSE,
                                                   ^
  CC       H5Goh.lo
  CC       H5Groot.lo
  CC       H5Gstab.lo
  CC       H5Gtest.lo
  CC       H5Gtraverse.lo
H5Gtraverse.c: In function 'H5G_traverse_real':
H5Gtraverse.c:743:52: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_GINFO_ID, (void *)ginfo) < 0)
                                                    ^
H5Gtraverse.c:747:52: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_LINFO_ID, (void *)linfo) < 0)
                                                    ^
H5Gtraverse.c:751:52: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_PLINE_ID, (void *)pline) < 0)
                                                    ^
  CC       H5HF.lo
In file included from H5HF.c:41:0:
H5HF.c: In function 'H5HF_op_write':
H5HF.c:130:14: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     HDmemcpy((void *)obj, op_data, obj_len);    /* Casting away const OK -QAK */
              ^
H5private.h:1033:47: note: in definition of macro 'HDmemcpy'
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5HF.c: In function 'H5HF_insert':
H5HF.c:375:49: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5HF_huge_insert(hdr, dxpl_id, size, (void *)obj, id) < 0)
                                                 ^
  CC       H5HFbtree2.lo
  CC       H5HFcache.lo
H5HFcache.c: In function 'H5HF_cache_hdr_flush':
H5HFcache.c:503:20: warning: conversion to 'uint8_t' from 'int' may alter its value [-Wconversion]
         heap_flags |= (hdr->huge_ids_wrapped ?  H5HF_HDR_FLAGS_HUGE_ID_WRAPPED : 0);
                    ^
H5HFcache.c:504:20: warning: conversion to 'uint8_t' from 'int' may alter its value [-Wconversion]
         heap_flags |= (hdr->checksum_dblocks ?  H5HF_HDR_FLAGS_CHECKSUM_DBLOCKS : 0);
                    ^
H5HFcache.c: In function 'H5HF_cache_iblock_load':
H5HFcache.c:708:25: warning: size of 'iblock_buf' is 4096 bytes [-Wlarger-than=]
     uint8_t             iblock_buf[H5HF_IBLOCK_BUF_SIZE]; /* Buffer for indirect block */
                         ^
In file included from H5HFcache.c:40:0:
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFcache.c:749:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFcache.c:749:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFcache.c: In function 'H5HF_cache_iblock_flush':
H5HFcache.c:906:17: warning: size of 'iblock_buf' is 4096 bytes [-Wlarger-than=]
     uint8_t     iblock_buf[H5HF_IBLOCK_BUF_SIZE]; /* Buffer for indirect block */
                 ^
In file included from H5HFcache.c:37:0:
H5HFcache.c: In function 'H5HF_cache_dblock_load':
H5HFcache.c:1349:18: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         HDmemset((uint8_t *)p - H5HF_SIZEOF_CHKSUM, 0, (size_t)H5HF_SIZEOF_CHKSUM);
                  ^
H5private.h:1039:39: note: in definition of macro 'HDmemset'
     #define HDmemset(X,C,Z)    memset(X,C,Z)
                                       ^
  CC       H5HFdbg.lo
H5HFdbg.c: In function 'H5HF_hdr_print':
H5HFdbg.c:259:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     H5HF_dtable_debug(&hdr->man_dtable, stream, indent + 3, MAX(0, fwidth - 3));
     ^
H5HFdbg.c:267:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       hdr->pline_root_direct_size);
                       ^
H5HFdbg.c:270:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       hdr->pline_root_direct_filter_mask);
                       ^
H5HFdbg.c:273:30: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                              indent + 3, MAX(0, fwidth - 3));
                              ^
H5HFdbg.c:283:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   hdr->root_iblock_flags);
                   ^
H5HFdbg.c:286:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   hdr->root_iblock);
                   ^
H5HFdbg.c: In function 'H5HF_dblock_debug_cb':
H5HFdbg.c:402:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   start, len);
   ^
In file included from H5HFdbg.c:40:0:
H5HFdbg.c: In function 'H5HF_dblock_debug':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFdbg.c:483:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     blk_prefix_size = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFdbg.c: In function 'H5HF_iblock_print':
H5HFdbg.c:622:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 temp_str);
                 ^
H5HFdbg.c:632:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->filt_ents[off].filter_mask);
                         ^
H5HFdbg.c:636:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->ents[off].addr);
                         ^
H5HFdbg.c:650:21: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     temp_str);
                     ^
H5HFdbg.c:657:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->ents[off].addr);
                         ^
H5HFdbg.c:663:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   "<none>");
                   ^
H5HFdbg.c:672:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   iblock->rc);
                   ^
H5HFdbg.c:677:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   iblock->parent);
                   ^
H5HFdbg.c: In function 'H5HF_sects_debug_cb':
H5HFdbg.c:791:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5FS_sect_debug(udata->fspace, _sect, udata->stream, udata->indent + 3, MAX(0, udata->fwidth - 3)) < 0)
     ^
  CC       H5HFdblock.lo
In file included from H5HFdblock.c:39:0:
H5HFdblock.c: In function 'H5HF_man_dblock_create':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFdblock.c:143:33: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     free_space = dblock->size - H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                                 ^
H5HFpkg.h:115:5: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFdblock.c:171:70: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     if(NULL == (sec_node = H5HF_sect_single_new((dblock->block_off + H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr)),
                                                                      ^
H5HFdblock.c: In function 'H5HF_man_dblock_new':
H5HFdblock.c:363:36: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     if((min_dblock_size - request) < H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr))
                                    ^
  CC       H5HFdtable.lo
H5HFdtable.c: In function 'H5HF_dtable_size_to_row':
H5HFdtable.c:241:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_dtable_size_to_row(const H5HF_dtable_t *dtable, size_t block_size)
 ^
H5HFdtable.c: In function 'H5HF_dtable_size_to_rows':
H5HFdtable.c:275:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_dtable_size_to_rows(const H5HF_dtable_t *dtable, hsize_t size)
 ^
H5HFdtable.c: In function 'H5HF_dtable_span_size':
H5HFdtable.c:306:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_dtable_span_size(const H5HF_dtable_t *dtable, unsigned start_row,
 ^
  CC       H5HFhdr.lo
In file included from H5HFhdr.c:36:0:
H5HFhdr.c: In function 'H5HF_hdr_finish_init_phase1':
H5HFhdr.c:226:45: warning: conversion to 'uint8_t' from 'unsigned int' may alter its value [-Wconversion]
     hdr->heap_len_size = MIN(hdr->man_dtable.max_dir_blk_off_size,
                                             ^
H5private.h:321:35: note: in definition of macro 'MIN'
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                   ^
H5HFhdr.c:227:32: warning: conversion to 'uint8_t' from 'unsigned int' may alter its value [-Wconversion]
             H5VM_limit_enc_size((uint64_t)hdr->max_man_size));
                                ^
H5private.h:321:41: note: in definition of macro 'MIN'
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                         ^
In file included from H5HFhdr.c:38:0:
H5HFhdr.c: In function 'H5HF_hdr_finish_init_phase2':
H5HFpkg.h:115:5: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFhdr.c:264:21: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
                     H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                     ^
H5HFhdr.c: In function 'H5HF_hdr_create':
H5HFhdr.c:435:52: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         if(0 == (hdr->filter_len = H5O_msg_raw_size(hdr->f, H5O_PLINE_ID, FALSE, &(hdr->pline))))
                                                    ^
H5HFhdr.c:441:13: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
             + 4                                 /* Size of filter mask for filtered root direct block */
             ^
In file included from H5HFhdr.c:38:0:
H5HFpkg.h:105:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + H5HF_DTABLE_INFO_SIZE(h) /* Size of managed obj. doubling-table info */ \
     ^
H5HFhdr.c:446:26: note: in expansion of macro 'H5HF_HEADER_SIZE'
         hdr->heap_size = H5HF_HEADER_SIZE(hdr);
                          ^
H5HFhdr.c:468:21: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                     + hdr->sizeof_size; /* Size of de-filtered object in memory */
                     ^
H5HFhdr.c:472:21: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                     + hdr->sizeof_size; /* Length of object */
                     ^
In file included from H5HFhdr.c:38:0:
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFhdr.c:494:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFhdr.c: In function 'H5HF_hdr_adj_free':
H5HFhdr.c:763:5: warning: conversion to 'long long unsigned int' from 'ssize_t' may change the sign of the result [-Wsign-conversion]
     hdr->total_man_free += amt;
     ^
H5HFhdr.c: In function 'H5HF_hdr_adjust_heap':
H5HFhdr.c:803:5: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
     hdr->total_man_free += extra_free;
     ^
H5HFhdr.c: In function 'H5HF_hdr_reverse_iter':
H5HFhdr.c:1245:9: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
         tmp_entry = curr_entry;
         ^
H5HFhdr.c:1280:13: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
             curr_entry = tmp_entry;
             ^
  CC       H5HFhuge.lo
H5HFhuge.c: In function 'H5HF_huge_bt2_create':
H5HFhuge.c:127:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of object */
                                    ^
H5HFhuge.c:134:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of object */
                                    ^
H5HFhuge.c:141:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of filtered object */
                                    ^
H5HFhuge.c:149:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of object */
                                    ^
H5HFhuge.c: In function 'H5HF_huge_write':
H5HFhuge.c:805:23: warning: 'obj_size' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5F_block_write(hdr->f, H5FD_MEM_FHEAP_HUGE_OBJ, obj_addr, obj_size, dxpl_id, obj) < 0)
                       ^
  CC       H5HFiblock.lo
H5HFiblock.c: In function 'H5HF_iblock_unpin':
H5HFiblock.c:216:13: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
             iblock->hdr->root_iblock_flags &= ~(H5HF_ROOT_IBLOCK_PINNED);
             ^
In file included from H5HFiblock.c:39:0:
H5HFiblock.c: In function 'H5HF_man_iblock_root_double':
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFiblock.c:592:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFiblock.c:592:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFiblock.c:631:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         unsigned row = u / hdr->man_dtable.cparam.width;        /* Row for current entry */
                          ^
H5HFiblock.c: In function 'H5HF_man_iblock_root_halve':
H5HFiblock.c:733:19: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     new_nrows = 1 << (1 + H5VM_log2_gen((uint64_t)max_child_row));
                   ^
In file included from H5HFiblock.c:39:0:
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFiblock.c:761:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFiblock.c:761:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFiblock.c: In function 'H5HF_man_iblock_create':
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFiblock.c:1030:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFiblock.c:1030:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFiblock.c: In function 'H5HF_man_iblock_unprotect':
H5HFiblock.c:1283:13: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
             iblock->hdr->root_iblock_flags &= ~(H5HF_ROOT_IBLOCK_PROTECTED);
             ^
H5HFiblock.c: In function 'H5HF_man_iblock_dest':
H5HFiblock.c:1725:22: warning: request for implicit conversion from 'void *' to 'struct H5HF_indirect_ent_t *' not permitted in C++ [-Wc++-compat]
         iblock->ents = H5FL_SEQ_FREE(H5HF_indirect_ent_t, iblock->ents);
                      ^
H5HFiblock.c:1727:27: warning: request for implicit conversion from 'void *' to 'struct H5HF_indirect_filt_ent_t *' not permitted in C++ [-Wc++-compat]
         iblock->filt_ents = H5FL_SEQ_FREE(H5HF_indirect_filt_ent_t, iblock->filt_ents);
                           ^
H5HFiblock.c:1729:31: warning: request for implicit conversion from 'void *' to 'struct H5HF_indirect_t **' not permitted in C++ [-Wc++-compat]
         iblock->child_iblocks = H5FL_SEQ_FREE(H5HF_indirect_ptr_t, iblock->child_iblocks);
                               ^
  CC       H5HFiter.lo
H5HFiter.c: In function 'H5HF_man_iter_ready':
H5HFiter.c:653:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_man_iter_ready(H5HF_block_iter_t *biter)
 ^
  CC       H5HFman.lo
H5HFman.c: In function 'H5HF_man_write':
H5HFman.c:432:58: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     if(H5HF_man_op_real(hdr, dxpl_id, id, H5HF_op_write, (void *)obj, H5HF_OP_MODIFY) < 0)
                                                          ^
  CC       H5HFsection.lo
H5HFsection.c: In function 'H5HF_sect_single_dblock_info':
H5HFsection.c:651:53: warning: unused parameter 'dxpl_id' [-Wunused-parameter]
 H5HF_sect_single_dblock_info(H5HF_hdr_t *hdr, hid_t dxpl_id,
                                                     ^
In file included from H5HFsection.c:35:0:
H5HFsection.c: In function 'H5HF_sect_single_full_dblock':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:774:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFsection.c: In function 'H5HF_sect_single_can_shrink':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:1034:27: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
         dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                           ^
H5HFsection.c: In function 'H5HF_sect_single_valid':
H5HFsection.c:1200:78: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             status = H5HF_sect_single_dblock_info(iblock->hdr, H5AC_dxpl_id, (H5HF_free_section_t *)sect, &dblock_addr, &dblock_size);
                                                                              ^
In file included from H5HFsection.c:35:0:
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:1209:31: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
             dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(iblock->hdr);
                               ^
H5HFsection.c:1192:20: warning: variable 'status' set but not used [-Wunused-but-set-variable]
             herr_t status;              /* Generic status value */
                    ^
H5HFsection.c:1190:20: warning: variable 'dblock_overhead' set but not used [-Wunused-but-set-variable]
             size_t dblock_overhead;     /* Direct block's overhead */
                    ^
H5HFsection.c: In function 'H5HF_sect_row_init_cls':
H5HFsection.c:48:9: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         + 2             /* # of entries */                                    \
         ^
H5HFsection.c:1569:28: note: in expansion of macro 'H5HF_SECT_INDIRECT_SERIAL_SIZE'
         cls->serial_size = H5HF_SECT_INDIRECT_SERIAL_SIZE(hdr);
                            ^
H5HFsection.c: In function 'H5HF_sect_row_valid':
H5HFsection.c:2000:14: warning: variable 'indir_idx' set but not used [-Wunused-but-set-variable]
     unsigned indir_idx;         /* Index of row in underlying indirect section's row array */
              ^
H5HFsection.c: In function 'H5HF_sect_row_debug':
H5HFsection.c:2082:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         H5HF_sect_indirect_debug(sect->u.row.under, stream, indent + 3, MAX(0, fwidth - 3));
         ^
H5HFsection.c: In function 'H5HF_sect_indirect_init_cls':
H5HFsection.c:48:9: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         + 2             /* # of entries */                                    \
         ^
H5HFsection.c:2185:24: note: in expansion of macro 'H5HF_SECT_INDIRECT_SERIAL_SIZE'
     cls->serial_size = H5HF_SECT_INDIRECT_SERIAL_SIZE(hdr);
                        ^
In file included from H5HFsection.c:35:0:
H5HFsection.c: In function 'H5HF_sect_indirect_init_rows':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:2478:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFsection.c: In function 'H5HF_sect_indirect_valid':
H5HFsection.c:4107:44: warning: variable 'tmp_row_sect2' set but not used [-Wunused-but-set-variable]
                 const H5HF_free_section_t *tmp_row_sect2;    /* Pointer to row section */
                                            ^
H5HFsection.c:4099:40: warning: variable 'tmp_row_sect' set but not used [-Wunused-but-set-variable]
             const H5HF_free_section_t *tmp_row_sect;    /* Pointer to row section */
                                        ^
H5HFsection.c:4134:44: warning: variable 'tmp_child_sect2' set but not used [-Wunused-but-set-variable]
                 const H5HF_free_section_t *tmp_child_sect2;    /* Pointer to child indirect section */
                                            ^
H5HFsection.c: In function 'H5HF_sect_indirect_top':
H5HFsection.c:2134:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_indirect_top(H5HF_free_section_t *sect)
 ^
H5HFsection.c: In function 'H5HF_sect_row_can_merge':
H5HFsection.c:1716:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_row_can_merge(const H5FS_section_info_t *_sect1,
 ^
H5HFsection.c: In function 'H5HF_sect_indirect_is_first.isra.1':
H5HFsection.c:3389:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_indirect_is_first(H5HF_free_section_t *sect)
 ^
H5HFsection.c: In function 'H5HF_sect_indirect_valid.isra.3':
H5HFsection.c:4060:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_indirect_valid(const H5HF_hdr_t *hdr, const H5HF_free_section_t *sect)
 ^
H5HFsection.c: In function 'H5HF_sect_row_valid':
H5HFsection.c:1994:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_row_valid(const H5FS_section_class_t *cls, const H5FS_section_info_t *_sect)
 ^
H5HFsection.c: In function 'H5HF_sect_row_get_iblock':
H5HFsection.c:1514:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_sect_row_get_iblock(H5HF_free_section_t *sect)
 ^
  CC       H5HFspace.lo
  CC       H5HFstat.lo
  CC       H5HFtest.lo
H5HFtest.c: In function 'H5HF_get_cparam_test':
H5HFtest.c:99:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     else if(fh->hdr->id_len == (1 + fh->hdr->sizeof_size + fh->hdr->sizeof_addr))
                             ^
H5HFtest.c:102:33: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
         cparam->id_len = fh->hdr->id_len;
                                 ^
H5HFtest.c: In function 'H5HF_cmp_cparam_test':
H5HFtest.c:125:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_cmp_cparam_test(const H5HF_create_t *cparam1, const H5HF_create_t *cparam2)
 ^
H5HFtest.c: In function 'H5HF_get_max_root_rows':
H5HFtest.c:245:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_max_root_rows(const H5HF_t *fh)
 ^
H5HFtest.c: In function 'H5HF_get_dtable_width_test':
H5HFtest.c:276:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dtable_width_test(const H5HF_t *fh)
 ^
H5HFtest.c: In function 'H5HF_get_dtable_max_drows_test':
H5HFtest.c:307:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dtable_max_drows_test(const H5HF_t *fh)
 ^
H5HFtest.c: In function 'H5HF_get_iblock_max_drows_test':
H5HFtest.c:342:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_iblock_max_drows_test(const H5HF_t *fh, unsigned pos)
 ^
H5HFtest.c: In function 'H5HF_get_dblock_size_test':
H5HFtest.c:375:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dblock_size_test(const H5HF_t *fh, unsigned row)
 ^
H5HFtest.c: In function 'H5HF_get_dblock_free_test':
H5HFtest.c:407:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dblock_free_test(const H5HF_t *fh, unsigned row)
 ^
  CC       H5HFtiny.lo
H5HFtiny.c: In function 'H5HF_tiny_insert':
H5HFtiny.c:172:55: warning: conversion to 'uint8_t' from 'size_t' may alter its value [-Wconversion]
         *id++ = H5HF_ID_VERS_CURR | H5HF_ID_TYPE_TINY |
                                                       ^
H5HFtiny.c:176:55: warning: conversion to 'uint8_t' from 'size_t' may alter its value [-Wconversion]
         *id++ = H5HF_ID_VERS_CURR | H5HF_ID_TYPE_TINY |
                                                       ^
H5HFtiny.c: In function 'H5HF_tiny_get_obj_len':
H5HFtiny.c:232:34: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         enc_obj_size = *(id + 1) | ((*id & H5HF_TINY_MASK_EXT_1) << 8);
                                  ^
H5HFtiny.c: In function 'H5HF_tiny_op_real':
H5HFtiny.c:283:34: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         enc_obj_size = *(id + 1) | ((*id & H5HF_TINY_MASK_EXT_1) << 8);
                                  ^
H5HFtiny.c: In function 'H5HF_tiny_remove':
H5HFtiny.c:408:34: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         enc_obj_size = *(id + 1) | ((*id & H5HF_TINY_MASK_EXT_1) << 8);
                                  ^
  CC       H5HG.lo
In file included from H5HG.c:53:0:
H5HG.c: In function 'H5HG_create':
H5HGpkg.h:80:38: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 #define H5HG_ALIGN(X) (H5HG_ALIGNMENT*(((X)+H5HG_ALIGNMENT-1)/H5HG_ALIGNMENT))
                                      ^
H5HG.c:185:9: note: in expansion of macro 'H5HG_ALIGN'
     n = H5HG_ALIGN(p - heap->chunk) - (size_t)(p - heap->chunk);
         ^
H5HG.c: In function 'H5HG_free':
H5HG.c:844:19: warning: request for implicit conversion from 'void *' to 'struct H5HG_obj_t *' not permitted in C++ [-Wc++-compat]
         heap->obj = H5FL_SEQ_FREE(H5HG_obj_t, heap->obj);
                   ^
  CC       H5HGcache.lo
H5HGcache.c: In function 'H5HG_load':
H5HGcache.c:186:70: warning: conversion to 'size_t' from 'long int' may change the sign of the result [-Wsign-conversion]
      heap->obj[0].size = ((const uint8_t *)heap->chunk + heap->size) - p;
                                                                      ^
H5HGcache.c:114:56: warning: unused parameter 'udata' [-Wunused-parameter]
 H5HG_load(H5F_t *f, hid_t dxpl_id, haddr_t addr, void *udata)
                                                        ^
  CC       H5HGdbg.lo
H5HGdbg.c: In function 'H5HG_debug':
H5HGdbg.c:144:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        (unsigned long)(h->obj[u].begin - h->chunk));
        ^
H5HGdbg.c:147:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        h->obj[u].nrefs);
        ^
H5HGdbg.c:152:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        (unsigned long)H5HG_ALIGN(h->obj[u].size));
        ^
  CC       H5HGquery.lo
H5HGquery.c: In function 'H5HG_get_addr':
H5HGquery.c:88:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HG_get_addr(const H5HG_heap_t *heap)
 ^
H5HGquery.c: In function 'H5HG_get_size':
H5HGquery.c:112:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HG_get_size(const H5HG_heap_t *heap)
 ^
H5HGquery.c: In function 'H5HG_get_free_size':
H5HGquery.c:136:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HG_get_free_size(const H5HG_heap_t *heap)
 ^
  CC       H5HL.lo
H5HL.c: In function 'H5HL_offset_into':
H5HL.c:536:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HL_offset_into(const H5HL_t *heap, size_t offset)
 ^
  CC       H5HLcache.lo
H5HLcache.c: In function 'H5HL_datablock_load':
H5HLcache.c:627:54: warning: unused parameter 'addr' [-Wunused-parameter]
 H5HL_datablock_load(H5F_t *f, hid_t dxpl_id, haddr_t addr, void *_udata)
                                                      ^
H5HLcache.c: In function 'H5HL_datablock_flush':
H5HLcache.c:693:72: warning: unused parameter 'addr' [-Wunused-parameter]
 H5HL_datablock_flush(H5F_t *f, hid_t dxpl_id, hbool_t destroy, haddr_t addr,
                                                                        ^
  CC       H5HLdbg.lo
H5HLdbg.c: In function 'H5HL_debug':
H5HLdbg.c:100:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   freelist->offset, freelist->size);
   ^
  CC       H5HLint.lo
  CC       H5HP.lo
H5HP.c: In function 'H5HP_create':
H5HP.c:384:32: warning: request for implicit conversion from 'void *' to 'struct H5HP_ent_t *' not permitted in C++ [-Wc++-compat]
                 new_heap->heap = H5FL_SEQ_FREE(H5HP_ent_t, new_heap->heap);
                                ^
H5HP.c: In function 'H5HP_decr':
H5HP.c:851:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     heap->heap[obj_loc].val-=amt;
     ^
H5HP.c:851:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
     heap->heap[obj_loc].val-=amt;
                            ^
H5HP.c: In function 'H5HP_close':
H5HP.c:913:16: warning: request for implicit conversion from 'void *' to 'struct H5HP_ent_t *' not permitted in C++ [-Wc++-compat]
     heap->heap = H5FL_SEQ_FREE(H5HP_ent_t, heap->heap);
                ^
H5HP.c: In function 'H5HP_count':
H5HP.c:412:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HP_count(const H5HP_t *heap)
 ^
  CC       H5I.lo
H5I.c: In function 'H5Iregister_type':
H5I.c:254:25: warning: unused parameter 'hash_size' [-Wunused-parameter]
 H5Iregister_type(size_t hash_size, unsigned reserved, H5I_free_t free_func)
                         ^
H5I.c: In function 'H5I__clear_type_cb':
H5I.c:655:81: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(udata->type_ptr->cls->free_func && (udata->type_ptr->cls->free_func)((void *)id->obj_ptr) < 0) {
                                                                                 ^
In file included from H5I.c:47:0:
H5I.c: In function 'H5I__destroy_type':
H5I.c:760:48: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         type_ptr->cls = H5FL_FREE(H5I_class_t, (void *)type_ptr->cls);
                                                ^
H5FLprivate.h:132:65: note: in definition of macro 'H5FL_FREE'
 #define H5FL_FREE(t,obj) (t *)H5FL_reg_free(&(H5FL_REG_NAME(t)),obj)
                                                                 ^
H5I.c: In function 'H5I_subst':
H5I.c:987:17: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     ret_value = (void *)id_ptr->obj_ptr;
                 ^
H5I.c: In function 'H5I_object':
H5I.c:1022:21: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         ret_value = (void *)id_ptr->obj_ptr;
                     ^
H5I.c: In function 'H5I_object_verify':
H5I.c:1097:21: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         ret_value = (void *)id_ptr->obj_ptr;
                     ^
H5I.c: In function 'H5I__remove_common':
H5I.c:1271:17: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     ret_value = (void *)curr_id->obj_ptr;
                 ^
H5I.c: In function 'H5I_dec_ref':
H5I.c:1445:68: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(!type_ptr->cls->free_func || (type_ptr->cls->free_func)((void *)id_ptr->obj_ptr) >= 0) {
                                                                    ^
H5I.c: In function 'H5I__iterate_cb':
H5I.c:2104:42: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         cb_ret_val = (*udata->user_func)((void *)item->obj_ptr, item->id, udata->user_udata);
                                          ^
  CC       H5Itest.lo
  CC       H5L.lo
H5L.c: In function 'H5L_link_cb':
H5L.c:1718:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     udata->lnk->name = (char *)name;
                        ^
H5L.c: In function 'H5L_move_dest_cb':
H5L.c:2437:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     udata->lnk->name = (char *)name;
                        ^
H5L.c: In function 'H5L_move_cb':
H5L.c:2580:13: warning: passing argument 1 of 'H5RS_wrap' discards 'const' qualifier from pointer target type [enabled by default]
             dst_name_r = H5RS_wrap(udata->dst_name);
             ^
In file included from H5Gprivate.h:37:0,
                 from H5Tprivate.h:30,
                 from H5Oprivate.h:41,
                 from H5Dprivate.h:27,
                 from H5L.c:30:
H5RSprivate.h:49:20: note: expected 'char *' but argument is of type 'const char *'
 H5_DLL H5RS_str_t *H5RS_wrap(char *s);
                    ^
H5L.c: In function 'H5L_link_copy_file':
H5L.c:3014:28: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         lnk_grp_loc.oloc = (H5O_loc_t *)src_oloc;    /* Casting away const OK -QAK */
                            ^
H5L.c: In function 'H5L_find_class_idx':
H5L.c:1410:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5L_find_class_idx(H5L_type_t id)
 ^
  CC       H5Lexternal.lo
  CC       H5make_libsettings.o
  CCLD     H5make_libsettings
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5make_libsettings > H5lib_settings.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5lib_settings.c ; exit 1)
  CC       H5lib_settings.lo
H5lib_settings.c:34:6: warning: size of 'H5libhdf5_settings' is 3170 bytes [-Wlarger-than=]
 char H5libhdf5_settings[]=
      ^
  CC       H5MF.lo
  CC       H5MFaggr.lo
H5MFaggr.c: In function 'H5MF_aggr_try_extend':
H5MFaggr.c:417:49: warning: conversion to 'float' from 'hsize_t' may alter its value [-Wconversion]
   if(extra_requested <= (EXTEND_THRESHOLD * aggr->size)) {
                                                 ^
  CC       H5MFdbg.lo
  CC       H5MFsection.lo
  CC       H5MM.lo
  CC       H5MP.lo
  CC       H5MPtest.lo
H5MPtest.c: In function 'H5MP_pool_is_free_size_correct':
H5MPtest.c:119:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5MP_pool_is_free_size_correct(const H5MP_pool_t *mp)
 ^
  CC       H5O.lo
H5O.c: In function 'H5O_get_oh_addr':
H5O.c:3047:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5O_get_oh_addr(const H5O_t *oh)
 ^
  CC       H5Oainfo.lo
H5Oainfo.c: In function 'H5O_ainfo_copy_file':
H5Oainfo.c:405:28: warning: unused parameter 'file_src' [-Wunused-parameter]
 H5O_ainfo_copy_file(H5F_t *file_src, void *mesg_src, H5F_t *file_dst,
                            ^
H5Oainfo.c:407:17: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     H5O_copy_t *cpy_info, void H5_ATTR_UNUSED *udata, hid_t dxpl_id)
                 ^
  CC       H5Oalloc.lo
H5Oalloc.c: In function 'H5O_add_gap':
H5Oalloc.c:112:20: warning: unused parameter 'f' [-Wunused-parameter]
 H5O_add_gap(H5F_t *f, H5O_t *oh, unsigned chunkno, hbool_t *chk_dirtied,
                    ^
H5Oalloc.c: In function 'H5O_alloc_new_chunk':
H5Oalloc.c:955:75: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         if(NULL == (chk_proxy = H5O_chunk_protect(f, dxpl_id, oh, chunkno - 1)))
                                                                           ^
H5Oalloc.c:973:21: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
                     curr_msg->chunkno = chunkno;
                     ^
H5Oalloc.c:994:37: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         null_msg->chunkno = chunkno - 1;
                                     ^
H5Oalloc.c:1029:9: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         oh->mesg[found_other.msgno].chunkno = chunkno;
         ^
H5Oalloc.c:1081:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     oh->mesg[idx].chunkno = chunkno;
     ^
H5Oalloc.c:1084:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     if(H5O_chunk_add(f, dxpl_id, oh, chunkno) < 0)
     ^
H5Oalloc.c:1092:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cont->chunkno = chunkno;
     ^
  CC       H5Oattr.lo
H5Oattr.c: In function 'H5O_attr_debug':
H5Oattr.c:862:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->shared->dt_size));
      ^
H5Oattr.c:863:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if((H5O_MSG_DTYPE->debug)(f, dxpl_id, mesg->shared->dt, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
     ^
H5Oattr.c:869:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->shared->ds_size));
      ^
H5Oattr.c:870:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5S_debug(f, dxpl_id, mesg->shared->ds, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
     ^
H5Oattr.c: In function 'H5O_attr_reset':
H5Oattr.c:481:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5O_attr_reset(void H5_ATTR_UNUSED *_mesg)
 ^
  CC       H5Oattribute.lo
  CC       H5Obogus.lo
  CC       H5Obtreek.lo
  CC       H5Ocache.lo
H5Ocache.c: In function 'H5O_load':
H5Ocache.c:166:12: warning: variable 'prefix_size' set but not used [-Wunused-but-set-variable]
     size_t prefix_size;    /* Size of object header prefix */
            ^
H5Ocache.c: In function 'H5O_cache_chk_load':
H5Ocache.c:728:49: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         chk_proxy->chunkno = udata->oh->nchunks - 1;
                                                 ^
H5Ocache.c: In function 'H5O_chunk_deserialize':
H5Ocache.c:1064:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     chunkno = oh->nchunks++;
                          ^
H5Ocache.c:1186:36: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             oh->mesg[mesgno].raw = (uint8_t *)p;        /* Casting away const OK - QAK */
                                    ^
H5Ocache.c:1289:57: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
             cont->chunkno = udata->cont_msg_info->nmsgs + 1; /*the next continuation message/chunk */
                                                         ^
H5Ocache.c: In function 'H5O_chunk_serialize':
H5Ocache.c:1385:30: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if(H5O_msg_flush((H5F_t *)f, oh, curr_msg) < 0)
                              ^
  CC       H5Ochunk.lo
  CC       H5Ocont.lo
  CC       H5Ocopy.lo
  CC       H5Odbg.lo
H5Odbg.c: In function 'H5O_debug_real':
H5Odbg.c:395:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   oh->chunk[i].addr);
                   ^
H5Odbg.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     chunk_size);
     ^
H5Odbg.c:416:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   oh->chunk[i].gap);
                   ^
H5Odbg.c:448:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     sequence[oh->mesg[i].type->id]++);
     ^
H5Odbg.c:451:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      oh->mesg[i].dirty);
      ^
H5Odbg.c:453:20: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                    "Message flags:");
                    ^
H5Odbg.c:488:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                            oh->mesg[i].flags & ~H5O_MSG_FLAG_BITS);
                            ^
H5Odbg.c:494:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     oh->mesg[i].chunkno);
     ^
H5Odbg.c:501:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     oh->mesg[i].raw_size);
     ^
H5Odbg.c:516:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     "Message Information:");
     ^
H5Odbg.c:518:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (debug_type->debug)(f, dxpl_id, oh->mesg[i].native, stream, indent + 6, MAX(0, fwidth - 6));
      ^
  CC       H5Odrvinfo.lo
  CC       H5Odtype.lo
H5Odtype.c: In function 'H5O_dtype_copy':
H5Odtype.c:1188:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (dst = H5T_copy(src, H5T_COPY_ALL)))
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Odtype.c:20:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Odtype.c: In function 'H5O_dtype_pre_copy_file':
H5Odtype.c:1533:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (udata->src_dtype = H5T_copy(dt_src, H5T_COPY_TRANSIENT)))
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Odtype.c:20:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Odtype.c: In function 'H5O_dtype_debug':
H5Odtype.c:1732:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       (unsigned long)(dt->shared->u.compnd.memb[i].offset));
       ^
H5Odtype.c:1734:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        indent + 3, MAX(0, fwidth - 3));
        ^
H5Odtype.c:1738:2: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  H5O_dtype_debug(f, dxpl_id, dt->shared->parent, stream, indent+3, MAX(0, fwidth-3));
  ^
H5Odtype.c:1965:2: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  H5O_dtype_debug(f, dxpl_id, dt->shared->parent, stream, indent + 3, MAX(0, fwidth - 3));
  ^
H5Odtype.c: In function 'H5O_dtype_size':
H5Odtype.c:1223:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5O_dtype_size(const H5F_t *f, const void *_mesg)
 ^
H5Odtype.c: In function 'H5O_dtype_decode_helper':
H5Odtype.c:333:25: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
                         for(j = 0; j <= i; j++)
                         ^
H5Odtype.c:353:33: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
                                 for(j = 0; j <= i; j++)
                                 ^
  CC       H5Oefl.lo
H5Oefl.c: In function 'H5O_efl_debug':
H5Oefl.c:574:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     mesg->slot[u].name);
     ^
H5Oefl.c:578:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     (unsigned long)(mesg->slot[u].name_offset));
     ^
H5Oefl.c:582:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->slot[u].offset));
      ^
H5Oefl.c:586:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->slot[u].size));
      ^
  CC       H5Ofill.lo
In file included from H5Ofill.c:69:0:
H5Oshared.h: In function 'H5O_fill_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
In file included from H5Ofill.c:105:0:
H5Oshared.h: In function 'H5O_fill_new_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
In file included from H5Cprivate.h:37:0,
                 from H5ACprivate.h:35,
                 from H5Oprivate.h:38,
                 from H5Dprivate.h:27,
                 from H5Ofill.c:26:
H5Ofill.c: In function 'H5O_fill_new_decode':
H5Fprivate.h:132:37: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
    (i) |= ((int32_t)(((*(p) & 0xff) << 24) |                                  \
                                     ^
H5Ofill.c:219:13: note: in expansion of macro 'INT32DECODE'
             INT32DECODE(p, fill->size);
             ^
  CC       H5Oginfo.lo
  CC       H5Olayout.lo
  CC       H5Olinfo.lo
  CC       H5Olink.lo
  CC       H5Omessage.lo
H5Omessage.c: In function 'H5O_msg_reset_share':
H5Omessage.c:1703:28: warning: variable 'type' set but not used [-Wunused-but-set-variable]
     const H5O_msg_class_t *type;        /* Actual H5O class type for the ID */
                            ^
H5Omessage.c: In function 'H5O_msg_count_real':
H5Omessage.c:836:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5O_msg_count_real(const H5O_t *oh, const H5O_msg_class_t *type)
 ^
H5Omessage.c: In function 'H5O_msg_exists_oh':
H5Omessage.c:921:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5O_msg_exists_oh(const H5O_t *oh, unsigned type_id)
 ^
H5Omessage.c: In function 'H5O_msg_can_share_in_ohdr':
H5Omessage.c:1574:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5O_msg_can_share_in_ohdr(unsigned type_id)
 ^
H5Omessage.c: In function 'H5O_msg_is_shared':
H5Omessage.c:1612:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5O_msg_is_shared(unsigned type_id, const void *mesg)
 ^
  CC       H5Omtime.lo
H5Omtime.c: In function 'H5O_mtime_decode':
H5Omtime.c:182:5: warning: "_MSC_VER" is not defined [-Wundef]
 #if _MSC_VER >= 1900  /* VS 2015 */
     ^
  CC       H5Oname.lo
  CC       H5Onull.lo
  CC       H5Opline.lo
In file included from H5Opline.c:67:0:
H5Oshared.h: In function 'H5O_pline_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
H5Opline.c: In function 'H5O_pline_debug':
H5Opline.c:637:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   (unsigned)(pline->filter[i].id));
   ^
H5Opline.c:641:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       pline->filter[i].name);
       ^
H5Opline.c:644:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       "Filter name:");
       ^
H5Opline.c:647:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   pline->filter[i].flags);
   ^
H5Opline.c:650:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   pline->filter[i].cd_nelmts);
   ^
H5Opline.c:659:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       pline->filter[i].cd_values[j]);
       ^
  CC       H5Orefcount.lo
  CC       H5Osdspace.lo
In file included from H5Osdspace.c:61:0:
H5Oshared.h: In function 'H5O_sdspace_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
  CC       H5Oshared.lo
H5Oshared.c: In function 'H5O_shared_copy_file':
H5Oshared.c:590:29: warning: unused parameter 'file_src' [-Wunused-parameter]
 H5O_shared_copy_file(H5F_t *file_src, H5F_t *file_dst,
                             ^
H5Oshared.c:592:79: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     hbool_t H5_ATTR_UNUSED *recompute_size, unsigned *mesg_flags, H5O_copy_t *cpy_info,
                                                                               ^
  CC       H5Ostab.lo
  CC       H5Oshmesg.lo
  CC       H5Otest.lo
  CC       H5Ounknown.lo
  CC       H5P.lo
  CC       H5Pacpl.lo
  CC       H5Pdapl.lo
  CC       H5Pdcpl.lo
H5Pdcpl.c: In function 'H5P_get_fill_value':
H5Pdcpl.c:1565:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if((dst_id = H5I_register(H5I_DATATYPE, H5T_copy(type, H5T_COPY_TRANSIENT), FALSE)) < 0)
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Pdcpl.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
  CC       H5Pdeprec.lo
  CC       H5Pdxpl.lo
  CC       H5Pfapl.lo
  CC       H5Pfcpl.lo
  CC       H5Pfmpl.lo
  CC       H5Pgcpl.lo
  CC       H5Pint.lo
H5Pint.c: In function 'H5P__iterate_pclass_cb':
H5Pint.c:3632:11: warning: unused variable 'key' [-Wunused-variable]
     char *key = (char *)_key;                           /* Pointer to the property's name */
           ^
H5Pint.c: In function 'H5P_get_class_parent':
H5Pint.c:4830:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5P_get_class_parent(const H5P_genclass_t *pclass)
 ^
H5Pint.c: In function 'H5P_get_plist_id':
H5Pint.c:4898:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5P_get_plist_id(const H5P_genplist_t *plist)
 ^
H5Pint.c: In function 'H5P_get_class':
H5Pint.c:4926:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5P_get_class(const H5P_genplist_t *plist)
 ^
  CC       H5Plapl.lo
H5Plapl.c: In function 'H5P_lacc_elink_fapl_cmp':
H5Plapl.c:305:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;
                ^
  CC       H5Plcpl.lo
  CC       H5Pocpl.lo
H5Pocpl.c: In function 'H5Pget_filter_by_id2':
H5Pocpl.c:1072:30: warning: unused variable 'filter' [-Wunused-variable]
     const H5Z_filter_info_t *filter;        /* Pointer to filter information */
                              ^
H5Pocpl.c:1071:21: warning: unused variable 'pline' [-Wunused-variable]
     H5O_pline_t     pline;                  /* Filter pipeline */
                     ^
  CC       H5Pocpypl.lo
H5Pocpypl.c: In function 'H5P__ocpy_merge_comm_dt_list_cmp':
H5Pocpypl.c:280:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5P__ocpy_merge_comm_dt_list_cmp(const void *_dt_list1, const void *_dt_list2,
 ^
  CC       H5Pstrcpl.lo
  CC       H5Ptest.lo
  CC       H5PL.lo
H5PL.c: In function 'H5PL_load':
H5PL.c:326:5: warning: enumeration value 'H5PL_TYPE_ERROR' not handled in switch [-Wswitch-enum]
     switch (type) {
     ^
H5PL.c:326:5: warning: enumeration value 'H5PL_TYPE_NONE' not handled in switch [-Wswitch-enum]
H5PL.c: In function 'H5PL__open':
H5PL.c:605:39: warning: ISO C forbids conversion of object pointer to function pointer type [-Wpedantic]
         if(NULL == (get_plugin_info = (H5PL_get_plugin_info_t)H5PL_GET_LIB_FUNC(handle, "H5PLget_plugin_info"))) {
                                       ^
H5PL.c: In function 'H5PL__search_table':
H5PL.c:688:47: warning: ISO C forbids conversion of object pointer to function pointer type [-Wpedantic]
                 if(NULL == (get_plugin_info = (H5PL_get_plugin_info_t)H5PL_GET_LIB_FUNC((H5PL_table_g[i]).handle, "H5PLget_plugin_info")))
                                               ^
  CC       H5R.lo
  CC       H5Rdeprec.lo
  CC       H5RC.lo
  CC       H5RS.lo
H5RS.c: In function 'H5RS_cmp':
H5RS.c:389:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_cmp(const H5RS_str_t *rs1, const H5RS_str_t *rs2)
 ^
H5RS.c: In function 'H5RS_len':
H5RS.c:423:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_len(const H5RS_str_t *rs)
 ^
H5RS.c: In function 'H5RS_get_str':
H5RS.c:457:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_get_str(const H5RS_str_t *rs)
 ^
H5RS.c: In function 'H5RS_get_count':
H5RS.c:489:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_get_count(const H5RS_str_t *rs)
 ^
  CC       H5S.lo
H5S.c: In function 'H5S_has_extent':
H5S.c:1903:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_has_extent(const H5S_t *ds)
 ^
H5S.c: In function 'H5S_extent_equal':
H5S.c:2018:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_extent_equal(const H5S_t *ds1, const H5S_t *ds2)
 ^
H5S.c: In function 'H5S_extent_nelem':
H5S.c:2079:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_extent_nelem(const H5S_extent_t *ext)
 ^
  CC       H5Sall.lo
H5Sall.c: In function 'H5S_all_project_simple':
H5Sall.c:814:37: warning: unused parameter 'base_space' [-Wunused-parameter]
 H5S_all_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                     ^
H5Sall.c:814:76: warning: unused parameter 'offset' [-Wunused-parameter]
 H5S_all_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                                                            ^
  CC       H5Sdbg.lo
H5Sdbg.c: In function 'H5S_debug':
H5Sdbg.c:113:34: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                                  indent + 3, MAX(0, fwidth - 3));
                                  ^
  CC       H5Shyper.lo
H5Shyper.c: In function 'H5S_hyper_serialize':
H5Shyper.c:2200:13: warning: conversion to 'uint32_t' from 'long unsigned int' may alter its value [-Wconversion]
         len += (size_t)(8 * space->extent.rank * block_count);
             ^
H5Shyper.c: In function 'H5S_hyper_iter_has_next_block':
H5Shyper.c:598:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_iter_has_next_block(const H5S_sel_iter_t *iter)
 ^
H5Shyper.c: In function 'H5S_hyper_cmp_spans':
H5Shyper.c:1415:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_cmp_spans (H5S_hyper_span_info_t *span_info1, H5S_hyper_span_info_t *span_info2)
 ^
H5Shyper.c: In function 'H5S_hyper_is_valid_helper.isra.4':
H5Shyper.c:1690:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_valid_helper (const H5S_hyper_span_info_t *spans, const hssize_t *offset, const hsize_t *size, hsize_t rank)
 ^
H5Shyper.c: In function 'H5S_hyper_is_valid':
H5Shyper.c:1753:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_valid (const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_span_nblocks':
H5Shyper.c:1814:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_span_nblocks(H5S_hyper_span_info_t *spans)
 ^
H5Shyper.c: In function 'H5S_get_select_hyper_nblocks.isra.5':
H5Shyper.c:1859:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_get_select_hyper_nblocks(H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_serial_size':
H5Shyper.c:1941:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_serial_size(const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_is_contiguous':
H5Shyper.c:2882:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_contiguous(const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_is_single':
H5Shyper.c:3067:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_single(const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_spans_nelem':
H5Shyper.c:5623:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_spans_nelem (H5S_hyper_span_info_t *spans)
 ^
H5Shyper.c: In function 'H5S_get_select_hyper_blocklist.isra.18.constprop.29':
H5Shyper.c:2515:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 while(temp_dim >= 0 && !done) {
                                ^
cc1: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
H5Shyper.c: In function 'H5S_hyper_serialize':
H5Shyper.c:2162:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 while(temp_dim >= 0 && done == 0) {
                                ^
cc1: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
  CC       H5Smpio.lo
  CC       H5Snone.lo
H5Snone.c: In function 'H5S_none_project_simple':
H5Snone.c:763:38: warning: unused parameter 'base_space' [-Wunused-parameter]
 H5S_none_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                      ^
H5Snone.c:763:77: warning: unused parameter 'offset' [-Wunused-parameter]
 H5S_none_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                                                             ^
  CC       H5Spoint.lo
H5Spoint.c: In function 'H5S_point_bounds':
H5Spoint.c:1106:63: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
             if(start[u] > (node->pnt[u] + space->select.offset[u]))
                                                               ^
H5Spoint.c:1107:63: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                 start[u] = node->pnt[u] + space->select.offset[u];
                                                               ^
H5Spoint.c:1108:61: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
             if(end[u] < (node->pnt[u] + space->select.offset[u]))
                                                             ^
H5Spoint.c:1109:61: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                 end[u] = node->pnt[u] + space->select.offset[u];
                                                             ^
H5Spoint.c: In function 'H5S_point_get_seq_list':
H5Spoint.c:1655:56: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
             loc += (node->pnt[i] + space->select.offset[i]) * acc;
                                                        ^
H5Spoint.c: In function 'H5S_point_is_valid':
H5Spoint.c:685:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_point_is_valid (const H5S_t *space)
 ^
H5Spoint.c: In function 'H5S_point_serial_size':
H5Spoint.c:774:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_point_serial_size (const H5S_t *space)
 ^
  CC       H5Sselect.lo
H5Sselect.c: In function 'H5S_select_iterate':
H5Sselect.c:1217:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info */
                    ^
H5Sselect.c:1263:17: warning: size of 'off' is 8192 bytes [-Wlarger-than=]
         hsize_t off[H5D_IO_VECTOR_SIZE];        /* Array to store sequence offsets */
                 ^
H5Sselect.c:1264:16: warning: size of 'len' is 8192 bytes [-Wlarger-than=]
         size_t len[H5D_IO_VECTOR_SIZE];         /* Array to store sequence lengths */
                ^
H5Sselect.c: In function 'H5S_select_shape_same':
H5Sselect.c:1436:20: warning: size of 'iter_a' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter_a;    /* Selection a iteration info */
                    ^
H5Sselect.c:1437:20: warning: size of 'iter_b' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter_b;    /* Selection b iteration info */
                    ^
H5Sselect.c: In function 'H5S_select_fill':
H5Sselect.c:2005:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info */
                    ^
H5Sselect.c:2033:17: warning: size of 'off' is 8192 bytes [-Wlarger-than=]
         hsize_t off[H5D_IO_VECTOR_SIZE];          /* Array to store sequence offsets */
                 ^
H5Sselect.c:2034:16: warning: size of 'len' is 8192 bytes [-Wlarger-than=]
         size_t len[H5D_IO_VECTOR_SIZE];           /* Array to store sequence lengths */
                ^
H5Sselect.c: In function 'H5S_get_select_npoints':
H5Sselect.c:333:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_get_select_npoints(const H5S_t *space)
 ^
H5Sselect.c: In function 'H5S_get_select_type':
H5Sselect.c:1394:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_get_select_type(const H5S_t *space)
 ^
H5Sselect.c: In function 'H5S_select_iterate':
H5Sselect.c:1214:1: warning: stack usage is 19376 bytes [-Wstack-usage=]
 H5S_select_iterate(void *buf, const H5T_t *type, const H5S_t *space,
 ^
H5Sselect.c:1335:1: warning: the frame size of 19288 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* end H5S_select_iterate() */
 ^
H5Sselect.c: In function 'H5S_select_fill':
H5Sselect.c:2003:1: warning: stack usage is 18784 bytes [-Wstack-usage=]
 H5S_select_fill(const void *fill, size_t fill_size, const H5S_t *space, void *_buf)
 ^
H5Sselect.c:2065:1: warning: the frame size of 18696 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* H5S_select_fill() */
 ^
  CC       H5Stest.lo
  CC       H5SL.lo
H5SL.c: In function 'H5SL_release_common':
H5SL.c:840:36: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             (void)(op)(node->item, (void *)node->key, op_data);
                                    ^
H5SL.c: In function 'H5SL_remove_first':
H5SL.c:1235:30: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     size_t      level = slist->curr_level;      /* Skip list level */
                              ^
H5SL.c: In function 'H5SL_iterate':
H5SL.c:2150:46: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if((ret_value = (op)(node->item, (void *)node->key, op_data)) != 0)
                                              ^
H5SL.c: In function 'H5SL_try_free_safe':
H5SL.c:2309:44: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if((op_ret = (op)(node->item , (void *)node->key, op_data)) < 0)
                                            ^
H5SL.c: In function 'H5SL_term_interface':
H5SL.c:2535:13: warning: variable 'ret' set but not used [-Wunused-but-set-variable]
     herr_t  ret;
             ^
H5SL.c: In function 'H5SL_count':
H5SL.c:1009:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_count(H5SL_t *slist)
 ^
H5SL.c: In function 'H5SL_first':
H5SL.c:1927:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_first(H5SL_t *slist)
 ^
H5SL.c: In function 'H5SL_next':
H5SL.c:1964:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_next(H5SL_node_t *slist_node)
 ^
H5SL.c: In function 'H5SL_prev':
H5SL.c:2001:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_prev(H5SL_node_t *slist_node)
 ^
H5SL.c: In function 'H5SL_last':
H5SL.c:2039:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_last(H5SL_t *slist)
 ^
H5SL.c: In function 'H5SL_item':
H5SL.c:2076:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_item(H5SL_node_t *slist_node)
 ^
  CC       H5SM.lo
  CC       H5SMbtree2.lo
  CC       H5SMcache.lo
  CC       H5SMmessage.lo
H5SMmessage.c: In function 'H5SM_message_compare':
H5SMmessage.c:229:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;
                ^
  CC       H5SMtest.lo
  CC       H5ST.lo
H5ST.c: In function 'H5ST_find_internal':
H5ST.c:290:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_find_internal(H5ST_ptr_t p, const char *s)
 ^
H5ST.c: In function 'H5ST_findfirst_internal':
H5ST.c:405:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_findfirst_internal(H5ST_ptr_t p)
 ^
H5ST.c: In function 'H5ST_getnext':
H5ST.c:484:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_getnext(H5ST_ptr_t p)
 ^
H5ST.c: In function 'H5ST_search':
H5ST.c:245:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_search(H5ST_tree_t *tree, const char *s)
 ^
H5ST.c: In function 'H5ST_findnext':
H5ST.c:542:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_findnext(H5ST_ptr_t p)
 ^
  CC       H5T.lo
H5T.c: In function 'H5T_path_find':
H5T.c:4485:2: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
  if(NULL == (path->src = H5T_copy(src, H5T_COPY_ALL)))
  ^
H5T.c:3115:1: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5T_copy(H5T_t *old_dt, H5T_copy_t method)
 ^
H5T.c:4487:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (path->dst = H5T_copy(dst, H5T_COPY_ALL)))
         ^
H5T.c:3115:1: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5T_copy(H5T_t *old_dt, H5T_copy_t method)
 ^
H5T.c: In function 'H5T_is_variable_str':
H5T.c:2062:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_is_variable_str(const H5T_t *dt)
 ^
H5T.c: In function 'H5T_get_size':
H5T.c:3878:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_get_size(const H5T_t *dt)
 ^
H5T.c: In function 'H5T_path_bkg':
H5T.c:4726:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_path_bkg(const H5T_path_t *p)
 ^
H5T.c: In function 'H5T_cmp':
H5T.c:3968:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt1->shared->u.compnd.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:3980:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt2->shared->u.compnd.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:4053:95: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for (i = (int) dt1->shared->u.enumer.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                               ^
H5T.c:4071:95: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for (i = (int) dt2->shared->u.enumer.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                               ^
H5T.c:4068:15: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             if(dt2->shared->u.enumer.nmembs > 1) {
               ^
H5T.c:4051:15: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             if(dt1->shared->u.enumer.nmembs > 1) {
               ^
  CC       H5Tarray.lo
H5Tarray.c: In function 'H5T__get_array_ndims':
H5Tarray.c:275:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T__get_array_ndims(const H5T_t *dt)
 ^
  CC       H5Tbit.lo
H5Tbit.c: In function 'H5T__bit_find':
H5Tbit.c:424:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5T__bit_find(uint8_t *buf, size_t offset, size_t size, H5T_sdir_t direction,
 ^
  CC       H5Tcommit.lo
H5Tcommit.c: In function 'H5T_committed':
H5Tcommit.c:493:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_committed(const H5T_t *type)
 ^
  CC       H5Tcompound.lo
H5Tcompound.c: In function 'H5T__insert':
H5Tcompound.c:484:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     parent->shared->u.compnd.memb[idx].type = H5T_copy(member, H5T_COPY_ALL);
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tcompound.c:38:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tcompound.c: In function 'H5T_is_packed':
H5Tcompound.c:606:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5T_is_packed(const H5T_t *dt)
 ^
H5Tcompound.c: In function 'H5T_get_member_offset':
H5Tcompound.c:166:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_get_member_offset(const H5T_t *dt, unsigned membno)
 ^
H5Tcompound.c: In function 'H5T__get_member_size':
H5Tcompound.c:315:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T__get_member_size(const H5T_t *dt, unsigned membno)
 ^
  CC       H5Tconv.lo
H5Tconv.c: In function 'H5T_conv_struct_free':
H5Tconv.c:1842:17: warning: variable 'status' set but not used [-Wunused-but-set-variable]
             int status;
                 ^
H5Tconv.c: In function 'H5T__conv_float_ullong':
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c: In function 'H5T__conv_double_ullong':
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c: In function 'H5T__conv_ldouble_ullong':
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c: In function 'H5T__conv_f_i':
H5Tconv.c:8917:24: warning: cast from function call of type 'double' to non-matching type 'long unsigned int' [-Wbad-function-cast]
             buf_size = (size_t)HDpow((double)2.0f, (double)src.u.f.esize) / 8 + 1;
                        ^
H5Tconv.c:8993:38: warning: conversion to 'hssize_t' from 'uint64_t' may change the sign of the result [-Wsign-conversion]
                 sign = H5T__bit_get_d(s, src.u.f.sign, (size_t)1);
                                      ^
H5Tconv.c:9120:38: warning: conversion to 'hssize_t' from 'uint64_t' may change the sign of the result [-Wsign-conversion]
                 expo = H5T__bit_get_d(s, src.u.f.epos, src.u.f.esize);
                                      ^
H5Tconv.c:9127:21: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                     expo -= (src.u.f.ebias-1);
                     ^
H5Tconv.c:9127:26: warning: conversion to 'hssize_t' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                     expo -= (src.u.f.ebias-1);
                          ^
H5Tconv.c:9129:21: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                     expo -= src.u.f.ebias;
                     ^
H5Tconv.c:9129:26: warning: conversion to 'hssize_t' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                     expo -= src.u.f.ebias;
                          ^
H5Tconv.c:9159:17: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                 H5T__bit_shift(int_buf, (ssize_t)(expo-src.u.f.msize), (size_t)0, buf_size * 8);
                 ^
H5Tconv.c:9364:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * buf_stride;
                     ^
H5Tconv.c:9365:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * buf_stride;
                     ^
H5Tconv.c:9367:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * src_p->shared->size;
                     ^
H5Tconv.c:9368:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * dst_p->shared->size;
                     ^
H5Tconv.c: In function 'H5T__conv_i_f':
H5Tconv.c:9714:28: warning: cast from function call of type 'double' to non-matching type 'long long unsigned int' [-Wbad-function-cast]
                 expo_max = (hsize_t)HDpow((double)2.0f, (double)dst.u.f.esize) - 1;
                            ^
H5Tconv.c:9793:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * buf_stride;
                     ^
H5Tconv.c:9794:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * buf_stride;
                     ^
H5Tconv.c:9796:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * src_p->shared->size;
                     ^
H5Tconv.c:9797:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * dst_p->shared->size;
                     ^
In file included from H5Tconv.c:33:0:
H5Tconv.c: At top level:
H5private.h:1835:15: warning: 'H5_interface_initialize_g' defined but not used [-Wunused-variable]
 static int    H5_interface_initialize_g = 0;
               ^
H5Tconv.c:985:1: warning: 'H5T_init_conv_interface' defined but not used [-Wunused-function]
 H5T_init_conv_interface(void)
 ^
H5Tconv.c: In function 'H5T__conv_struct_subset':
H5Tconv.c:2077:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T__conv_struct_subset(const H5T_cdata_t *cdata)
 ^
H5Tconv.c: In function 'H5T__conv_b_b':
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c: In function 'H5T__conv_i_i':
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c: In function 'H5T__conv_f_f':
H5Tconv.c:4482:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:4127:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c: In function 'H5T__conv_f_i':
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:8975:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c: In function 'H5T__conv_i_f':
H5Tconv.c:9774:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
  CC       H5Tcset.lo
  CC       H5Tdbg.lo
H5Tdbg.c: In function 'H5T_debug':
H5Tdbg.c:175:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dt->shared->type) {
     ^
H5Tdbg.c:175:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tdbg.c:175:5: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
H5Tdbg.c:175:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Tdbg.c:249:2: warning: enumeration value 'H5T_ORDER_ERROR' not handled in switch [-Wswitch-enum]
  switch(dt->shared->u.atomic.order) {
  ^
H5Tdbg.c:249:2: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
H5Tdbg.c:281:17: warning: enumeration value 'H5T_SGN_ERROR' not handled in switch [-Wswitch-enum]
                 switch(dt->shared->u.atomic.u.i.sign) {
                 ^
H5Tdbg.c:281:17: warning: enumeration value 'H5T_NSGN' not handled in switch [-Wswitch-enum]
H5Tdbg.c:300:17: warning: enumeration value 'H5T_NORM_ERROR' not handled in switch [-Wswitch-enum]
                 switch(dt->shared->u.atomic.u.f.norm) {
                 ^
H5Tdbg.c:279:2: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
  switch(dt->shared->type) {
  ^
H5Tdbg.c:279:2: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_COMPOUND' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Tdbg.c:353:9: warning: enumeration value 'H5T_LOC_BADLOC' not handled in switch [-Wswitch-enum]
         switch(dt->shared->u.vlen.loc) {
         ^
H5Tdbg.c:353:9: warning: enumeration value 'H5T_LOC_MAXLOC' not handled in switch [-Wswitch-enum]
H5Tdbg.c: In function 'H5T__print_stats':
H5Tdbg.c:105:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5T__print_stats(H5T_path_t H5_ATTR_UNUSED * path, int H5_ATTR_UNUSED * nprint/*in,out*/)
 ^
  CC       H5Tdeprec.lo
  CC       H5Tenum.lo
H5Tenum.c: In function 'H5T__enum_create':
H5Tenum.c:136:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     ret_value->shared->parent = H5T_copy(parent, H5T_COPY_ALL);
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tenum.c:31:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tenum.c: In function 'H5T_enum_nameof':
H5Tenum.c:437:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (copied_dt = H5T_copy(dt, H5T_COPY_ALL)))
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tenum.c:31:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tenum.c: In function 'H5T_enum_valueof':
H5Tenum.c:576:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if (NULL==(copied_dt=H5T_copy(dt, H5T_COPY_ALL)))
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tenum.c:31:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
  CC       H5Tfields.lo
  CC       H5Tfixed.lo
H5Tfixed.c: In function 'H5Tget_sign':
H5Tfixed.c:82:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tfixed.c: In function 'H5Tset_sign':
H5Tfixed.c:161:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Tfloat.lo
  CC       H5detect.o
H5detect.c:115:19: warning: size of ‘d_g’ is 12800 bytes [-Wlarger-than=]
 static detected_t d_g[MAXDETECT];
                   ^
H5detect.c: In function ‘find_bias’:
H5detect.c:1180:24: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     unsigned char *a = (unsigned char *) _a;
                        ^
In file included from H5detect.c:57:0:
H5private.h:321:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                      ^
H5detect.c:1185:10: note: in expansion of macro ‘MIN’
  nbits = MIN(esize, (8 - epos % 8));
          ^
H5detect.c:1186:22: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
  mask = (1 << nbits) - 1;
                      ^
H5detect.c:1187:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  b = (a[perm[epos / 8]] >> (epos % 8)) & mask;
                                        ^
H5detect.c:1191:2: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  esize -= nbits;
  ^
H5detect.c:1191:8: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
  esize -= nbits;
        ^
H5detect.c:1192:2: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  epos += nbits;
  ^
H5detect.c:1192:7: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
  epos += nbits;
       ^
In file included from H5detect.c:57:0:
H5detect.c: In function ‘detect_C89_integers’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1357:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(signed char,   SCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1357:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(signed char,   SCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1358:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(unsigned char,   UCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1358:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(unsigned char,   UCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1359:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(short,    SHORT,        d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1359:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(short,    SHORT,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1359:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(short,    SHORT,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1360:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned short,   USHORT,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1360:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned short,   USHORT,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1360:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned short,   USHORT,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1361:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int,    INT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1361:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int,    INT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:1362:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(unsigned int,   UINT,         d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1362:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned int,   UINT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1362:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned int,   UINT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1363:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long,    LONG,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1363:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long,    LONG,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:1364:5: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(unsigned long,   ULONG,        d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1364:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long,   ULONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1364:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long,   ULONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C89_floats’:
H5detect.c:327:21: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                        \
                     ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:329:67: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         for(_byte_mask = (unsigned char)1; _byte_mask; _byte_mask <<= 1) {    \
                                                                   ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:331:22: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
             HDmemcpy((void *)&_v2, (const void *)_buf1, sizeof(TYPE));        \
                      ^
H5private.h:1033:47: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:332:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(_v1 != _v2)                                                    \
                    ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:342:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:343:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf3, (const void *)&_v3, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:350:47: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     fix_order(sizeof(TYPE), _last, INFO.perm, (const char**)&_mesg);          \
                                               ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:448:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  if(_val!=_val2)             \
         ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:327:21: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                        \
                     ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:329:67: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         for(_byte_mask = (unsigned char)1; _byte_mask; _byte_mask <<= 1) {    \
                                                                   ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:331:22: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
             HDmemcpy((void *)&_v2, (const void *)_buf1, sizeof(TYPE));        \
                      ^
H5private.h:1033:47: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:332:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(_v1 != _v2)                                                    \
                    ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:342:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:343:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf3, (const void *)&_v3, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:350:47: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     fix_order(sizeof(TYPE), _last, INFO.perm, (const char**)&_mesg);          \
                                               ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:448:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  if(_val!=_val2)             \
         ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c: In function ‘detect_C99_integers8’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1409:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int8_t,           INT8,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1409:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int8_t,           INT8,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1416:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint8_t,    UINT8,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1416:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint8_t,    UINT8,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1423:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_least8_t,     INT_LEAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1423:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_least8_t,     INT_LEAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1430:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_least8_t,    UINT_LEAST8,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1430:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_least8_t,    UINT_LEAST8,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1437:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_fast8_t,      INT_FAST8,    d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1437:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_fast8_t,      INT_FAST8,    d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1444:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_fast8_t,    UINT_FAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1444:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_fast8_t,    UINT_FAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_integers16’:
H5detect.c:254:24: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1470:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int16_t,     INT16,        d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1470:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int16_t,     INT16,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1470:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int16_t,     INT16,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1473:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint16_t,     UINT16,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1473:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint16_t,     UINT16,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1473:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint16_t,     UINT16,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘int_least16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1476:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least16_t,    INT_LEAST16,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1476:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least16_t,    INT_LEAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1476:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least16_t,    INT_LEAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘uint_least16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1479:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least16_t,    UINT_LEAST16, d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1479:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least16_t,    UINT_LEAST16, d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1479:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least16_t,    UINT_LEAST16, d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1482:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast16_t,    INT_FAST16,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1482:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast16_t,    INT_FAST16,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:1485:5: warning: conversion to ‘uint_fast16_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_fast16_t,    UINT_FAST16,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1485:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast16_t,    UINT_FAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1485:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast16_t,    UINT_FAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_integers32’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1508:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int32_t,     INT32,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1508:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int32_t,     INT32,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:1511:5: warning: conversion to ‘uint32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint32_t,     UINT32,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1511:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint32_t,     UINT32,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1511:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint32_t,     UINT32,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1514:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least32_t,    INT_LEAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1514:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least32_t,    INT_LEAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:1517:5: warning: conversion to ‘uint_least32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_least32_t,    UINT_LEAST32, d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1517:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least32_t,    UINT_LEAST32, d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1517:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least32_t,    UINT_LEAST32, d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1520:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast32_t,    INT_FAST32,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1520:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast32_t,    INT_FAST32,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:1523:5: warning: conversion to ‘uint_fast32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_fast32_t,    UINT_FAST32,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1523:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast32_t,    UINT_FAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1523:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast32_t,    UINT_FAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_integers64’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1546:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int64_t,     INT64,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1546:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int64_t,     INT64,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:1549:5: warning: conversion to ‘uint64_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint64_t,     UINT64,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1549:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint64_t,     UINT64,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1549:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint64_t,     UINT64,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1552:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least64_t,    INT_LEAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1552:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least64_t,    INT_LEAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:1555:5: warning: conversion to ‘uint_least64_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_least64_t,    UINT_LEAST64, d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1555:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least64_t,    UINT_LEAST64, d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1555:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least64_t,    UINT_LEAST64, d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1558:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast64_t,    INT_FAST64,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1558:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast64_t,    INT_FAST64,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:1561:5: warning: conversion to ‘uint_fast64_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_fast64_t,    UINT_FAST64,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1561:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast64_t,    UINT_FAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1561:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast64_t,    UINT_FAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1565:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long long,    LLONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1565:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long long,    LLONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:1566:5: warning: conversion to ‘long long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(unsigned long long,  ULLONG,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1566:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long long,  ULLONG,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1566:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long long,  ULLONG,       d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_floats’:
H5detect.c:327:21: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                        \
                     ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:329:67: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         for(_byte_mask = (unsigned char)1; _byte_mask; _byte_mask <<= 1) {    \
                                                                   ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:331:22: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
             HDmemcpy((void *)&_v2, (const void *)_buf1, sizeof(TYPE));        \
                      ^
H5private.h:1033:47: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:332:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(_v1 != _v2)                                                    \
                    ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:342:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:343:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf3, (const void *)&_v3, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:350:47: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     fix_order(sizeof(TYPE), _last, INFO.perm, (const char**)&_mesg);          \
                                               ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:448:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  if(_val!=_val2)             \
         ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘find_bias’:
H5detect.c:1178:1: warning: function might be candidate for attribute ‘pure’ if it is known to return normally [-Wsuggest-attribute=pure]
 find_bias(int epos, int esize, int *perm, volatile void *_a)
 ^
H5detect.c: In function ‘main’:
H5detect.c:900:2: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
  for (i=MIN(pass*4+3,d->size-1),
  ^
H5detect.c:891:2: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
  for (i=MIN(pass*4+3,d->size-1); i>=pass*4; --i) {
  ^
  CCLD     H5detect
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5detect > H5Tinit.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5Tinit.c ; exit 1)
  CC       H5Tinit.lo
  CC       H5Tnative.lo
  CC       H5Toffset.lo
  CC       H5Toh.lo
  CC       H5Topaque.lo
H5Topaque.c: In function 'H5Tset_tag':
H5Topaque.c:80:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Topaque.c: In function 'H5Tget_tag':
H5Topaque.c:127:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Torder.lo
  CC       H5Tpad.lo
H5Tpad.c: In function 'H5Tget_pad':
H5Tpad.c:83:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tpad.c: In function 'H5Tset_pad':
H5Tpad.c:127:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Tprecis.lo
H5Tprecis.c: In function 'H5Tget_precision':
H5Tprecis.c:90:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tprecis.c: In function 'H5Tset_precision':
H5Tprecis.c:179:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tprecis.c: In function 'H5T_set_precision':
H5Tprecis.c:268:6: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
      switch (dt->shared->type) {
      ^
H5Tprecis.c:268:6: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_COMPOUND' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
  CC       H5Tstrpad.lo
H5Tstrpad.c: In function 'H5Tget_strpad':
H5Tstrpad.c:86:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tstrpad.c: In function 'H5Tset_strpad':
H5Tstrpad.c:143:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Tvisit.lo
H5Tvisit.c: In function 'H5T__visit':
H5Tvisit.c:119:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dt->shared->type) {
     ^
H5Tvisit.c:119:5: warning: enumeration value 'H5T_INTEGER' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_FLOAT' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
  CC       H5Tvlen.lo
H5Tvlen.c: In function 'H5Tvlen_create':
H5Tvlen.c:116:22: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if(NULL == (base = H5I_object_verify(base_id, H5I_DATATYPE)))
                      ^
H5Tvlen.c: In function 'H5T__vlen_create':
H5Tvlen.c:168:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (dt->shared->parent = H5T_copy(base, H5T_COPY_ALL)))
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Tvlen.c:28:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tvlen.c: In function 'H5T__vlen_set_loc':
H5Tvlen.c:270:59: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                 dt->shared->size = 4 + H5F_SIZEOF_ADDR(f) + 4;
                                                           ^
H5Tvlen.c:222:9: warning: enumeration value 'H5T_LOC_MAXLOC' not handled in switch [-Wswitch-enum]
         switch(loc) {
         ^
H5Tvlen.c: In function 'H5T_vlen_str_mem_write':
H5Tvlen.c:719:20: warning: request for implicit conversion from 'void *' to 'char *' not permitted in C++ [-Wc++-compat]
         if(NULL==(t=(vl_alloc_info->alloc_func)((seq_len+1)*base_size,vl_alloc_info->alloc_info)))
                    ^
H5Tvlen.c:723:20: warning: request for implicit conversion from 'void *' to 'char *' not permitted in C++ [-Wc++-compat]
         if(NULL==(t=H5MM_malloc((seq_len+1)*base_size)))
                    ^
H5Tvlen.c: In function 'H5T_vlen_disk_isnull':
H5Tvlen.c:847:23: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
     H5F_addr_decode(f,(const uint8_t **)&vl,&addr);
                       ^
H5Tvlen.c: In function 'H5T_vlen_disk_read':
H5Tvlen.c:884:23: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
     H5F_addr_decode(f,(const uint8_t **)&vl,&(hobjid.addr));
                       ^
H5Tvlen.c: In function 'H5T_vlen_disk_write':
H5Tvlen.c:937:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&bg, &(bg_hobjid.addr));
                            ^
H5Tvlen.c: In function 'H5T_vlen_disk_setnull':
H5Tvlen.c:999:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&bg, &(bg_hobjid.addr));
                            ^
H5Tvlen.c: In function 'H5T_vlen_reclaim_recurse':
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dt->shared->type) {
     ^
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_INTEGER' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_FLOAT' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Tvlen.c: In function 'H5T_vlen_reclaim':
H5Tvlen.c:1170:20: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if(NULL == (dt = H5I_object_verify(type_id, H5I_DATATYPE)))
                    ^
  CC       H5TS.lo
  CC       H5VM.lo
H5VM.c: In function 'H5VM_hyper_eq':
H5VM.c:359:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5VM_hyper_eq(unsigned n,
 ^
H5VM.c: In function 'H5VM_hyper_disjointp':
H5VM.c:407:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5VM_hyper_disjointp(unsigned n,
 ^
H5VM.c: In function 'H5VM_array_offset_pre':
H5VM.c:1080:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5VM_array_offset_pre(unsigned n, const hsize_t *acc, const hsize_t *offset)
 ^
  CC       H5WB.lo
  CC       H5Z.lo
H5Z.c: In function 'H5Z_find_idx':
H5Z.c:1203:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5Z_find_idx(H5Z_filter_t id)
 ^
  CC       H5Zdeflate.lo
  CC       H5Zfletcher32.lo
  CC       H5Znbit.lo
H5Znbit.c: In function 'H5Z_calc_parms_array':
H5Znbit.c:253:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_base_class) {
     ^
H5Znbit.c:253:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_calc_parms_compound':
H5Znbit.c:338:9: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
         switch(dtype_member_class) {
         ^
H5Znbit.c:338:9: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_set_parms_nooptype':
H5Znbit.c:408:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_size;
     ^
H5Znbit.c: In function 'H5Z_set_parms_atomic':
H5Znbit.c:450:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_size;
     ^
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_ERROR' not handled in switch [-Wswitch-enum]
     switch(dtype_order) {
     ^
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_VAX' not handled in switch [-Wswitch-enum]
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_NONE' not handled in switch [-Wswitch-enum]
H5Znbit.c:479:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     if(dtype_precision > dtype_size * 8 || (dtype_precision + dtype_offset) > dtype_size * 8
     ^
H5Znbit.c:484:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_precision;
     ^
H5Znbit.c:487:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     cd_values[cd_values_index++] = dtype_offset;
     ^
H5Znbit.c: In function 'H5Z_set_parms_array':
H5Znbit.c:536:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++]=dtype_size;
     ^
H5Znbit.c:547:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_base_class) {
     ^
H5Znbit.c:547:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_set_parms_compound':
H5Znbit.c:626:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_size;
     ^
H5Znbit.c:633:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     cd_values[cd_values_index++] = nmembers;
     ^
H5Znbit.c:649:9: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         cd_values[cd_values_index++] = dtype_member_offset;
         ^
H5Znbit.c:690:77: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
                     cd_values[cd_values_index++] = dtype_next_member_offset - dtype_member_offset;
                                                                             ^
H5Znbit.c:652:9: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
         switch(dtype_member_class) {
         ^
H5Znbit.c:652:9: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_set_local_nbit':
H5Znbit.c:757:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_class) {
     ^
H5Znbit.c:757:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_class) {
     ^
H5Znbit.c:812:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c:837:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[0] = cd_values_actual_nparms;
     ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_byte':
H5Znbit.c:971:7: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + k] =
       ^
H5Znbit.c:972:58: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       ((val >> (*buf_len - dat_len)) & ~(~0 << dat_len)) << uchar_offset;
                                                          ^
H5Znbit.c:975:7: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + k] =
       ^
H5Znbit.c:976:59: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       ((val & ~(~0 << *buf_len)) << (dat_len - *buf_len)) << uchar_offset;
                                                           ^
H5Znbit.c:982:7: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + k] |=
       ^
H5Znbit.c:982:29: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       data[data_offset + k] |=
                             ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_nooptype':
H5Znbit.c:1001:72: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + i] = ((val & ~(~0 << *buf_len)) << (dat_len - *buf_len));
                                                                        ^
H5Znbit.c:1001:58: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       data[data_offset + i] = ((val & ~(~0 << *buf_len)) << (dat_len - *buf_len));
                                                          ^
H5Znbit.c:1002:18: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       dat_len -= *buf_len;
                  ^
H5Znbit.c:1007:42: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + i] |= ((val >> (*buf_len - dat_len)) & ~(~0 << dat_len));
                                          ^
H5Znbit.c:1007:29: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       data[data_offset + i] |= ((val >> (*buf_len - dat_len)) & ~(~0 << dat_len));
                             ^
H5Znbit.c:1008:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
       ^
H5Znbit.c:1008:16: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
                ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_atomic':
H5Znbit.c:1020:26: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
    datatype_len = p.size * 8;
                          ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_array':
H5Znbit.c:1062:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[parms_index++];
                           ^
H5Znbit.c:1063:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[parms_index++];
                               ^
H5Znbit.c:1064:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[parms_index++];
                            ^
H5Znbit.c:1065:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
            n = total_size/p.size;
                          ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_compound':
H5Znbit.c:1115:30: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.order = parms[parms_index++];
                              ^
H5Znbit.c:1116:34: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.precision = parms[parms_index++];
                                  ^
H5Znbit.c:1117:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.offset = parms[parms_index++];
                               ^
H5Znbit.c: In function 'H5Z_nbit_decompress':
H5Znbit.c:1161:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[5];
                           ^
H5Znbit.c:1162:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[6];
                               ^
H5Znbit.c:1163:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[7];
                            ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_byte':
H5Znbit.c:1196:4: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
    val = data[data_offset + k];
    ^
H5Znbit.c:1202:14: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
          val >>= 8 - dat_len;
              ^
H5Znbit.c:1207:11: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       val >>= p.offset % 8;
           ^
H5Znbit.c:1212:18: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] |= (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                  ^
H5Znbit.c:1215:18: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] |= (val >> (dat_len - *buf_len)) & ~(~0 << *buf_len);
                  ^
H5Znbit.c:1220:45: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] = (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                                             ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_nooptype':
H5Znbit.c:1237:40: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       buffer[*j] |= (val >> (dat_len - *buf_len)) & ~(~0 << *buf_len);
                                        ^
H5Znbit.c:1237:18: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] |= (val >> (dat_len - *buf_len)) & ~(~0 << *buf_len);
                  ^
H5Znbit.c:1238:18: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       dat_len -= *buf_len;
                  ^
H5Znbit.c:1242:49: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       buffer[*j] = (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                                                 ^
H5Znbit.c:1242:45: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] = (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                                             ^
H5Znbit.c:1243:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
       ^
H5Znbit.c:1243:16: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
                ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_atomic':
H5Znbit.c:1254:26: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
    datatype_len = p.size * 8;
                          ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_array':
H5Znbit.c:1295:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[parms_index++];
                           ^
H5Znbit.c:1296:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[parms_index++];
                               ^
H5Znbit.c:1297:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[parms_index++];
                            ^
H5Znbit.c:1298:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
            n = total_size/p.size;
                          ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_compound':
H5Znbit.c:1348:30: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.order = parms[parms_index++];
                              ^
H5Znbit.c:1349:34: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.precision = parms[parms_index++];
                                  ^
H5Znbit.c:1350:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.offset = parms[parms_index++];
                               ^
H5Znbit.c: In function 'H5Z_nbit_compress':
H5Znbit.c:1393:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[5];
                           ^
H5Znbit.c:1394:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[6];
                               ^
H5Znbit.c:1395:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[7];
                            ^
  CC       H5Zshuffle.lo
  CC       H5Zszip.lo
  CC       H5Zscaleoffset.lo
H5Zscaleoffset.c: In function 'H5Z_set_local_scaleoffset':
H5Zscaleoffset.c:940:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[H5Z_SCALEOFFSET_PARM_SIZE] = dtype_size;
     ^
H5Zscaleoffset.c:969:5: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
     switch(dtype_order) {
     ^
H5Zscaleoffset.c: In function 'H5Z_filter_scaleoffset':
H5Zscaleoffset.c:1065:5: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
     switch(H5T_native_order_g) {
     ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_convert':
H5Zscaleoffset.c:1328:48: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
        for(i = 0; i < d_nelmts * dtype_size; i += dtype_size)
                                                ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_precompress_fd':
H5Zscaleoffset.c:395:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:395:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:38: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                      ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                  ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:488:37: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                               buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));  \
                                     ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:488:63: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                               buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));  \
                                                               ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:487:50: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
             *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                    \
                                                  ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:496:38: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                      ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:496:64: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                                                ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:495:51: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
             *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                   \
                                                   ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:504:43: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                     buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                           ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:504:69: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                     buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                                                     ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:503:56: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
             *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                              \
                                                        ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:395:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:395:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:38: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                      ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                  ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:516:34: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                            buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));     \
                                  ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:516:60: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                            buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));     \
                                                            ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:515:47: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
          *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                       \
                                               ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:520:35: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                             buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));    \
                                   ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:520:61: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                             buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));    \
                                                             ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:519:48: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
          *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                      \
                                                ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:524:40: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                  buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                        ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:524:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                  buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                                                  ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:523:53: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
          *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                                 \
                                                     ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:487:50: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
             *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                    \
                                                  ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:495:51: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
             *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                   \
                                                   ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:503:56: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
             *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                              \
                                                        ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:515:47: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
          *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                       \
                                               ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:519:48: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
          *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                      \
                                                ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:523:53: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
          *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                                 \
                                                     ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_postdecompress_fd':
H5Zscaleoffset.c:629:76: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                   filval : (double)(*(int *)&buf[i]) / HDpow(10.0f, D_val) + min);        \
                                                                            ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:629:26: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
                   filval : (double)(*(int *)&buf[i]) / HDpow(10.0f, D_val) + min);        \
                          ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:633:77: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                   filval : (double)(*(long *)&buf[i]) / HDpow(10.0f, D_val) + min);       \
                                                                             ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:633:26: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
                   filval : (double)(*(long *)&buf[i]) / HDpow(10.0f, D_val) + min);       \
                          ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:637:82: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                   filval : (double)(*(long long *)&buf[i]) / HDpow(10.0f, D_val) + min);  \
                                                                                  ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:637:26: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
                   filval : (double)(*(long long *)&buf[i]) / HDpow(10.0f, D_val) + min);  \
                          ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:647:74: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
          buf[i] = (type)((double)(*(int *)&buf[i]) / HDpow(10.0f, D_val) + min);       \
                                                                          ^
H5Zscaleoffset.c:671:7: note: in expansion of macro 'H5Z_scaleoffset_modify_4'
       H5Z_scaleoffset_modify_4(i, type, buf, d_nelmts, min, D_val)                     \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:650:75: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
          buf[i] = (type)((double)(*(long *)&buf[i]) / HDpow(10.0f, D_val) + min);      \
                                                                           ^
H5Zscaleoffset.c:671:7: note: in expansion of macro 'H5Z_scaleoffset_modify_4'
       H5Z_scaleoffset_modify_4(i, type, buf, d_nelmts, min, D_val)                     \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:653:80: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
          buf[i] = (type)((double)(*(long long *)&buf[i]) / HDpow(10.0f, D_val) + min); \
                                                                                ^
H5Zscaleoffset.c:671:7: note: in expansion of macro 'H5Z_scaleoffset_modify_4'
       H5Z_scaleoffset_modify_4(i, type, buf, d_nelmts, min, D_val)                     \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_decompress_one_atomic':
H5Zscaleoffset.c:1600:23: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
    dtype_len = p.size * 8;
                       ^
H5Zscaleoffset.c:1603:28: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
       begin_i = p.size - 1 - (dtype_len - p.minbits) / 8;
                            ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_compress_one_atomic':
H5Zscaleoffset.c:1683:23: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
    dtype_len = p.size * 8;
                       ^
H5Zscaleoffset.c:1686:28: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
       begin_i = p.size - 1 - (dtype_len - p.minbits) / 8;
                            ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_log2':
H5Zscaleoffset.c:1368:1: warning: function might be candidate for attribute 'const' if it is known to return normally [-Wsuggest-attribute=const]
 H5Z_scaleoffset_log2(unsigned long long num)
 ^
  CC       H5Ztrans.lo
H5Ztrans.c: In function 'H5Z_parse_term':
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_ERROR' not handled in switch [-Wswitch-enum]
         switch (current->tok_type) {
         ^
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_INTEGER' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_FLOAT' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_SYMBOL' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_PLUS' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_MINUS' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_LPAREN' not handled in switch [-Wswitch-enum]
H5Ztrans.c: In function 'H5Z_parse_factor':
H5Ztrans.c:775:5: warning: enumeration value 'H5Z_XFORM_ERROR' not handled in switch [-Wswitch-enum]
     switch (current->tok_type) {
     ^
H5Ztrans.c:775:5: warning: enumeration value 'H5Z_XFORM_MULT' not handled in switch [-Wswitch-enum]
H5Ztrans.c:775:5: warning: enumeration value 'H5Z_XFORM_DIVIDE' not handled in switch [-Wswitch-enum]
H5Ztrans.c: In function 'H5Z_xform_eval_full':
H5Ztrans.c:1094:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short unsigned int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short unsigned int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1102:45: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short unsigned int' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1106:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_ERROR' not handled in switch [-Wswitch-enum]
  switch (tree->type) {
  ^
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_INTEGER' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_FLOAT' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_SYMBOL' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_LPAREN' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_RPAREN' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_END' not handled in switch [-Wswitch-enum]
H5Ztrans.c: In function 'H5Z_xform_noop':
H5Ztrans.c:1678:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5Z_xform_noop(const H5Z_data_xform_t *data_xform_prop)
 ^
H5Ztrans.c: In function 'H5Z_xform_extract_xform_str':
H5Ztrans.c:1707:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5Z_xform_extract_xform_str(const H5Z_data_xform_t *data_xform_prop)
 ^
  CCLD     libhdf5.la
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
Making all in test
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
  CC       dynlib1.lo
dynlib1.c: In function 'H5PLget_plugin_type':
dynlib1.c:41:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib1.c: In function 'H5PLget_plugin_info':
dynlib1.c:42:16: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void    *H5PLget_plugin_info(void) {return H5Z_DYNLIB1;}
                ^
dynlib1.c: In function 'H5Z_filter_dynlib1':
dynlib1.c:82:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
dynlib1.c:89:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
  CCLD     libdynlib1.la
  CC       dynlib2.lo
dynlib2.c: In function 'H5PLget_plugin_type':
dynlib2.c:42:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib2.c: In function 'H5PLget_plugin_info':
dynlib2.c:43:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void   *H5PLget_plugin_info(void) {return H5Z_DYNLIB2;}
               ^
dynlib2.c: In function 'H5Z_filter_dynlib2':
dynlib2.c:79:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
dynlib2.c:86:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
  CCLD     libdynlib2.la
  CC       dynlib3.lo
dynlib3.c: In function 'H5Z_filter_dynlib3':
dynlib3.c:91:21: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         memcpy(dst, (void*)GROUP_SUFFIX, SUFFIX_LEN);
                     ^
dynlib3.c: In function 'H5PLget_plugin_type':
dynlib3.c:44:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib3.c: In function 'H5PLget_plugin_info':
dynlib3.c:45:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void   *H5PLget_plugin_info(void) {return H5Z_DYNLIB3;}
               ^
  CCLD     libdynlib3.la
  CC       h5test.lo
h5test.c: In function 'h5_cleanup':
h5test.c:160:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                     HDsnprintf(temp, sizeof temp, filename, j);
                     ^
h5test.c:160:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
h5test.c: In function 'h5_fileaccess':
h5test.c:605:14: warning: size of 'sv' is 7168 bytes [-Wlarger-than=]
         char sv[H5FD_MEM_NTYPES][1024];
              ^
h5test.c:619:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             memb_addr[mt] = (haddr_t)MAX(mt - 1, 0) * (HADDR_MAX / 10);
             ^
h5test.c: In function 'h5_get_file_size':
h5test.c:986:17: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                 HDsnprintf(temp, sizeof temp, filename, j);
                 ^
h5test.c:986:17: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
h5test.c: In function 'print_func':
h5test.c:1023:3: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
   ret_value = vprintf(format, arglist);
   ^
h5test.c: In function 'h5_make_local_copy':
h5test.c:1192:11: warning: size of 'buf' is 4096 bytes [-Wlarger-than=]
     char  buf[READ_BUF_SIZE];           /* Buffer for copying data */
           ^
In file included from h5test.c:28:0:
h5test.c: At top level:
H5srcdir.h:53:20: warning: 'H5_get_srcdir' defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
h5test.c: In function 'h5_rmprefix':
h5test.c:526:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 h5_rmprefix(const char *filename)
 ^
h5test.c: In function 'h5_fileaccess':
h5test.c:558:1: warning: stack usage is 8464 bytes [-Wstack-usage=]
 h5_fileaccess(void)
 ^
  CC       testframe.lo
testframe.c:54:19: warning: size of 'Test' is 6720 bytes [-Wlarger-than=]
 static TestStruct Test[MAXNUMOFTESTS];
                   ^
testframe.c: In function 'PrintErrorStackOn':
testframe.c:618:5: warning: passing argument 2 of 'H5Eset_auto2' from incompatible pointer type [enabled by default]
     H5Eset_auto2(H5E_DEFAULT, PrintErrorStackFunc, PrintErrorStackData);
     ^
In file included from ../src/H5Eprivate.h:22:0,
                 from testhdf5.h:28,
                 from testframe.c:24:
../src/H5Epublic.h:174:15: note: expected 'H5E_auto2_t' but argument is of type 'herr_t (**)(hid_t,  void *)'
 H5_DLL herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data);
               ^
testframe.c: In function 'GetTestVerbosity':
testframe.c:365:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestVerbosity(void)
     ^
testframe.c: In function 'GetTestSummary':
testframe.c:452:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestSummary(void)
     ^
testframe.c: In function 'GetTestCleanup':
testframe.c:461:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestCleanup(void)
     ^
testframe.c: In function 'GetTestNumErrs':
testframe.c:498:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestNumErrs(void)
     ^
testframe.c: In function 'GetTestParameters':
testframe.c:516:13: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 const void *GetTestParameters(void)
             ^
  CC       cache_common.lo
cache_common.c:67:21: warning: size of 'pico_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t pico_entries[NUM_PICO_ENTRIES], orig_pico_entries[NUM_PICO_ENTRIES];
                     ^
cache_common.c:67:53: warning: size of 'orig_pico_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t pico_entries[NUM_PICO_ENTRIES], orig_pico_entries[NUM_PICO_ENTRIES];
                                                     ^
cache_common.c:68:21: warning: size of 'nano_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t nano_entries[NUM_NANO_ENTRIES], orig_nano_entries[NUM_NANO_ENTRIES];
                     ^
cache_common.c:68:53: warning: size of 'orig_nano_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t nano_entries[NUM_NANO_ENTRIES], orig_nano_entries[NUM_NANO_ENTRIES];
                                                     ^
cache_common.c:69:21: warning: size of 'micro_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t micro_entries[NUM_MICRO_ENTRIES], orig_micro_entries[NUM_MICRO_ENTRIES];
                     ^
cache_common.c:69:55: warning: size of 'orig_micro_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t micro_entries[NUM_MICRO_ENTRIES], orig_micro_entries[NUM_MICRO_ENTRIES];
                                                       ^
cache_common.c:70:21: warning: size of 'tiny_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t tiny_entries[NUM_TINY_ENTRIES], orig_tiny_entries[NUM_TINY_ENTRIES];
                     ^
cache_common.c:70:53: warning: size of 'orig_tiny_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t tiny_entries[NUM_TINY_ENTRIES], orig_tiny_entries[NUM_TINY_ENTRIES];
                                                     ^
cache_common.c:71:21: warning: size of 'small_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t small_entries[NUM_SMALL_ENTRIES], orig_small_entries[NUM_SMALL_ENTRIES];
                     ^
cache_common.c:71:55: warning: size of 'orig_small_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t small_entries[NUM_SMALL_ENTRIES], orig_small_entries[NUM_SMALL_ENTRIES];
                                                       ^
cache_common.c:72:21: warning: size of 'medium_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t medium_entries[NUM_MEDIUM_ENTRIES], orig_medium_entries[NUM_MEDIUM_ENTRIES];
                     ^
cache_common.c:72:57: warning: size of 'orig_medium_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t medium_entries[NUM_MEDIUM_ENTRIES], orig_medium_entries[NUM_MEDIUM_ENTRIES];
                                                         ^
cache_common.c:73:21: warning: size of 'large_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t large_entries[NUM_LARGE_ENTRIES], orig_large_entries[NUM_LARGE_ENTRIES];
                     ^
cache_common.c:73:55: warning: size of 'orig_large_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t large_entries[NUM_LARGE_ENTRIES], orig_large_entries[NUM_LARGE_ENTRIES];
                                                       ^
cache_common.c:74:21: warning: size of 'huge_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t huge_entries[NUM_HUGE_ENTRIES], orig_huge_entries[NUM_HUGE_ENTRIES];
                     ^
cache_common.c:74:53: warning: size of 'orig_huge_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t huge_entries[NUM_HUGE_ENTRIES], orig_huge_entries[NUM_HUGE_ENTRIES];
                                                     ^
cache_common.c:75:21: warning: size of 'monster_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t monster_entries[NUM_MONSTER_ENTRIES], orig_monster_entries[NUM_MONSTER_ENTRIES];
                     ^
cache_common.c:75:59: warning: size of 'orig_monster_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t monster_entries[NUM_MONSTER_ENTRIES], orig_monster_entries[NUM_MONSTER_ENTRIES];
                                                           ^
cache_common.c:76:21: warning: size of 'variable_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t variable_entries[NUM_VARIABLE_ENTRIES], orig_variable_entries[NUM_VARIABLE_ENTRIES];
                     ^
cache_common.c:76:61: warning: size of 'orig_variable_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t variable_entries[NUM_VARIABLE_ENTRIES], orig_variable_entries[NUM_VARIABLE_ENTRIES];
                                                             ^
cache_common.c: In function 'clear':
cache_common.c:523:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'destroy':
cache_common.c:647:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'flush':
cache_common.c:811:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'size':
cache_common.c:1098:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'row_major_scan_forward':
cache_common.c:3353:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 1) >= 0 ) &&
             ^
cache_common.c:3355:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 1) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3363:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 2) >= 0 ) &&
             ^
cache_common.c:3365:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3374:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( (idx + lag - 2) >= 0 ) &&
             ^
cache_common.c:3376:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3383:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 3) >= 0 ) &&
             ^
cache_common.c:3385:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 3) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3393:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 5) >= 0 ) &&
             ^
cache_common.c:3395:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 5) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3405:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 5) >= 0 ) &&
   ^
cache_common.c:3407:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 5) % 9 == 0 ) ) {
        ^
cache_common.c:3407:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3416:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 6) >= 0 ) &&
   ^
cache_common.c:3418:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 6) % 11 == 0 ) ) {
        ^
cache_common.c:3418:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3427:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 7) >= 0 ) &&
   ^
cache_common.c:3429:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 7) % 13 == 0 ) ) {
        ^
cache_common.c:3429:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3438:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 7) >= 0 ) &&
   ^
cache_common.c:3440:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 7) % 9 == 0 ) ) {
        ^
cache_common.c:3440:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3449:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 8) >= 0 ) &&
   ^
cache_common.c:3451:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 8) % 11 == 0 ) ) {
        ^
cache_common.c:3451:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3460:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 9) >= 0 ) &&
   ^
cache_common.c:3462:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 9) % 13 == 0 ) ) {
        ^
cache_common.c:3462:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3480:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 2) >= 0 ) &&
             ^
cache_common.c:3482:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 2) % 7 ) == 0 ) ) {
                  ^
cache_common.c:3482:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3490:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 1) >= 0 ) &&
             ^
cache_common.c:3492:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 1) % 7 ) == 0 ) ) {
                  ^
cache_common.c:3492:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c: In function 'row_major_scan_backward':
cache_common.c:3751:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 1) >= 0 ) &&
             ^
cache_common.c:3753:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 1) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3753:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3761:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 2) >= 0 ) &&
             ^
cache_common.c:3763:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3763:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3772:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( (idx - lag + 2) >= 0 ) &&
             ^
cache_common.c:3774:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3774:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3781:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 3) >= 0 ) &&
             ^
cache_common.c:3783:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 3) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3783:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3791:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 5) >= 0 ) &&
             ^
cache_common.c:3793:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 5) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3793:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3803:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 5) >= 0 ) &&
   ^
cache_common.c:3805:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 5) % 9 == 0 ) ) {
        ^
cache_common.c:3814:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 6) >= 0 ) &&
   ^
cache_common.c:3816:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 6) % 11 == 0 ) ) {
        ^
cache_common.c:3825:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 7) >= 0 ) &&
   ^
cache_common.c:3827:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 7) % 13 == 0 ) ) {
        ^
cache_common.c:3836:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 7) >= 0 ) &&
   ^
cache_common.c:3838:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 7) % 9 == 0 ) ) {
        ^
cache_common.c:3847:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 8) >= 0 ) &&
   ^
cache_common.c:3849:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 8) % 11 == 0 ) ) {
        ^
cache_common.c:3858:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 9) >= 0 ) &&
   ^
cache_common.c:3860:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 9) % 13 == 0 ) ) {
        ^
cache_common.c:3879:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 2) >= 0 ) &&
             ^
cache_common.c:3881:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 2) % 7 ) == 0 ) ) {
                  ^
cache_common.c:3889:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 1) >= 0 ) &&
             ^
cache_common.c:3891:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 1) % 7 ) == 0 ) ) {
                  ^
In file included from cache_common.c:23:0:
cache_common.c: In function 'check_and_validate_cache_hit_rate':
h5test.h:135:47: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
cache_common.c:4622:23: note: in expansion of macro 'DBL_REL_EQUAL'
         } else if ( ! DBL_REL_EQUAL(hit_rate, expected_hit_rate, 0.00001F) ) {
                       ^
cache_common.c: At top level:
cache_common.c:4804:1: warning: no previous prototype for 'resize_configs_are_equal' [-Wmissing-prototypes]
 resize_configs_are_equal(const H5C_auto_size_ctl_t *a,
 ^
cache_common.c: In function 'resize_configs_are_equal':
cache_common.c:4816:67: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->min_clean_fraction - b->min_clean_fraction) > FP_EPSILON)
                                                                   ^
cache_common.c:4826:67: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->lower_hr_threshold - b->lower_hr_threshold) > FP_EPSILON)
                                                                   ^
cache_common.c:4828:49: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->increment - b->increment) > FP_EPSILON)
                                                 ^
cache_common.c:4836:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->flash_multiple - b->flash_multiple) > FP_EPSILON)
                                                           ^
cache_common.c:4838:61: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->flash_threshold - b->flash_threshold) > FP_EPSILON)
                                                             ^
cache_common.c:4842:67: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->upper_hr_threshold - b->upper_hr_threshold) > FP_EPSILON)
                                                                   ^
cache_common.c:4844:49: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->decrement - b->decrement) > FP_EPSILON)
                                                 ^
cache_common.c:4854:57: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->empty_reserve - b->empty_reserve) > FP_EPSILON)
                                                         ^
In file included from cache_common.c:27:0:
cache_common.c: In function 'validate_mdc_config':
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.c: In function 'hl_row_major_scan_forward':
cache_common.c:3634:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_inserts ) && ( (idx + lag) >= 0 ) &&
                                             ^
cache_common.c: In function 'hl_row_major_scan_backward':
cache_common.c:4032:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_inserts ) && ( (idx + lag) >= 0 ) &&
                                             ^
cache_common.c: In function 'resize_configs_are_equal':
cache_common.c:4804:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 resize_configs_are_equal(const H5C_auto_size_ctl_t *a,
 ^
cache_common.c: In function 'col_major_scan_backward':
cache_common.c:4361:36: warning: 'cache_ptr' may be used uninitialized in this function [-Wmaybe-uninitialized]
                  ( ! entry_in_cache(cache_ptr, type, (idx - lag)) ) ) {
                                    ^
  CCLD     libh5test.la
  CC       testhdf5.o
  CC       tarray.o
tarray.c: In function ‘test_array_funcs’:
tarray.c:192:26: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_precision(type);
                          ^
tarray.c:195:21: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_size(type);
                     ^
tarray.c:198:22: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_ebias(type);
                      ^
tarray.c: In function ‘test_array_compound_atomic’:
tarray.c:544:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             wdata[i][j].f = (float)(i * 2.5F + j);
             ^
tarray.c:544:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
tarray.c:689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Array data information doesn't match!, wdata[%d][%d].f=%f, rdata[%d][%d].f=%f\n", (int)i, (int)j, wdata[i][j].f, (int)i, (int)j, rdata[i][j].f);
                 ^
tarray.c:689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c: In function ‘test_array_compound_array’:
tarray.c:748:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 wdata[i][j].f[k]=(float)(i * 10.0F + j * 2.5F + k);
                 ^
tarray.c:748:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
tarray.c:748:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
tarray.c:932:21: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                     TestErrPrintf("Array data information doesn't match!, wdata[%d][%d].f[%d]=%f, rdata[%d][%d].f[%d]=%f\n",(int)i,(int)j,(int)k,wdata[i][j].f[k],(int)i,(int)j,(int)k,rdata[i][j].f[k]);
                     ^
tarray.c:932:21: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c: In function ‘test_array_alloc_custom’:
tarray.c:977:9: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *mem_used+=size;
         ^
tarray.c:977:18: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
         *mem_used+=size;
                  ^
tarray.c: In function ‘test_array_free_custom’:
tarray.c:1005:9: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *mem_used-=*(size_t *)mem;
         ^
tarray.c:1005:18: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
         *mem_used-=*(size_t *)mem;
                  ^
In file included from testhdf5.h:27:0,
                 from tarray.c:24:
tarray.c: In function ‘test_array_vlen_atomic’:
tarray.c:1044:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].p=HDmalloc((i+j+1)*sizeof(unsigned int));
                                        ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
tarray.c:1045:32: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].len=i+j+1;
                                ^
tarray.c:1046:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
tarray.c:1047:62: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 ((unsigned int *)wdata[i][j].p)[k]=i*100+j*10+k;
                                                              ^
In file included from testhdf5.h:27:0,
                 from tarray.c:24:
tarray.c: In function ‘test_array_vlen_array’:
tarray.c:1255:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].p=HDmalloc((i+j+1)*(sizeof(unsigned int)*ARRAY1_DIM1));
                                        ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
tarray.c:1256:32: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].len=i+j+1;
                                ^
tarray.c:1257:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
tarray.c:1259:87: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     ((unsigned int *)wdata[i][j].p)[k*ARRAY1_DIM1+l]=i*1000+j*100+k*10+l;
                                                                                       ^
tarray.c: In function ‘test_array_bkg’:
tarray.c:1537:34: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].b[j] = (float)(100.0F*(i+1) + 0.01F*j);
                                  ^
tarray.c:1537:4: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].b[j] = (float)(100.0F*(i+1) + 0.01F*j);
    ^
tarray.c:1538:35: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].c[j] = (double)(100.0F*(i+1) + 0.02F*j);
                                   ^
tarray.c:1538:4: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].c[j] = (double)(100.0F*(i+1) + 0.02F*j);
    ^
tarray.c:1622:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field b data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].b[j],(int)i,(int)j,(float)cfr[i].b[j]);
                 ^
tarray.c:1622:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1626:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field c data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].c[j],(int)i,(int)j,(float)cfr[i].c[j]);
                 ^
tarray.c:1626:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field data doesn't match, fld[%d].b[%d]=%f, fldr[%d].b[%d]=%f\n",(int)i,(int)j,(float)fld[i].b[j],(int)i,(int)j,(float)fldr[i].b[j]);
                 ^
tarray.c:1689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1715:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field b data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].b[j],(int)i,(int)j,(float)cfr[i].b[j]);
                 ^
tarray.c:1715:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1719:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field c data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].c[j],(int)i,(int)j,(float)cfr[i].c[j]);
                 ^
tarray.c:1719:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1764:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field b data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].b[j],(int)i,(int)j,(float)cfr[i].b[j]);
                 ^
tarray.c:1764:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1768:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field c data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].c[j],(int)i,(int)j,(float)cfr[i].c[j]);
                 ^
tarray.c:1768:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
In file included from tarray.c:25:0:
tarray.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CC       tattr.o
In file included from testhdf5.h:31:0,
                 from tattr.c:24:
tattr.c: In function ‘test_attr_flush’:
h5test.h:131:35: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_ABS_EQUAL(X,Y) (fabs(X-Y)<DBL_EPSILON)
                                   ^
tattr.c:524:9: note: in expansion of macro ‘DBL_ABS_EQUAL’
     if(!DBL_ABS_EQUAL(rdata,0.0F))
         ^
tattr.c:525:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
         TestErrPrintf("attribute value wrong: rdata=%f, should be %f\n",rdata,0.0F);
         ^
In file included from testhdf5.h:31:0,
                 from tattr.c:24:
h5test.h:131:35: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_ABS_EQUAL(X,Y) (fabs(X-Y)<DBL_EPSILON)
                                   ^
tattr.c:533:9: note: in expansion of macro ‘DBL_ABS_EQUAL’
     if(!DBL_ABS_EQUAL(rdata,0.0F))
         ^
tattr.c:534:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
         TestErrPrintf("attribute value wrong: rdata=%f, should be %f\n",rdata,0.0F);
         ^
In file included from tattr.c:24:0:
tattr.c: In function ‘test_attr_compound_read’:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:847:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_INT), "H5Tget_order");
     ^
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:856:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_DOUBLE), "H5Tget_order");
     ^
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:865:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_SCHAR), "H5Tget_order");
     ^
tattr.c:884:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c: In function ‘test_attr_scalar_read’:
tattr.c:1016:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
      "H5Aread", attr_data5, rdata, (int)__LINE__, __FILE__);
      ^
tattr.c:1016:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
In file included from tattr.c:24:0:
tattr.c: In function ‘test_attr_mult_read’:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:1228:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_INT), "H5Tget_order");
     ^
tattr.c:1243:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1249:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr,HDstrlen(ATTR1_NAME), attr_name);
                           ^
In file included from tattr.c:24:0:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:1283:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_INT), "H5Tget_order");
     ^
tattr.c:1299:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1305:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, HDstrlen(ATTR2_NAME), attr_name);
                           ^
In file included from tattr.c:24:0:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:1341:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_DOUBLE), "H5Tget_order");
     ^
tattr.c:1358:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1364:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, HDstrlen(ATTR3_NAME), attr_name);
                           ^
tattr.c: In function ‘test_attr_delete’:
tattr.c:1552:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1566:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1589:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c: In function ‘test_attr_dense_verify’:
tattr.c:2086:31: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
         name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, check_name);
                               ^
tattr.c: In function ‘attr_info_by_idx_check’:
tattr.c:5559:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, n, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c:5584:33: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
         ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_NATIVE, n, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                 ^
tattr.c:5605:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_DEC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c:5625:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_NAME, H5_ITER_INC, n, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c:5650:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_NAME, H5_ITER_DEC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c: In function ‘test_attr_info_by_idx’:
tattr.c:5759:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Aget_name_by_idx(my_dataset, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
tattr.c:5796:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Aget_name_by_idx(my_dataset, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
tattr.c:5846:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Aget_name_by_idx(my_dataset, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
tattr.c: In function ‘test_attr_delete_by_idx’:
tattr.c:5918:74: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(idx_type = H5_INDEX_NAME; idx_type <=H5_INDEX_CRT_ORDER; idx_type++) {
                                                                          ^
tattr.c:5920:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(order = H5_ITER_INC; order <=H5_ITER_DEC; order++) {
                                                            ^
tattr.c:6073:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c:6198:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c:6309:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c:6358:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c: In function ‘attr_iterate_check’:
tattr.c:6614:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
                                                                      ^
tattr.c:6614:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
     ^
tattr.c:6646:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
                                                                      ^
tattr.c:6646:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
     ^
tattr.c:6678:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
                                                                      ^
tattr.c:6678:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
     ^
tattr.c: In function ‘test_attr_iterate2’:
tattr.c:6867:74: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(idx_type = H5_INDEX_NAME; idx_type <=H5_INDEX_CRT_ORDER; idx_type++) {
                                                                          ^
tattr.c:6869:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(order = H5_ITER_INC; order <=H5_ITER_DEC; order++) {
                                                            ^
tattr.c: In function ‘test_attr_open_by_idx’:
tattr.c:7221:74: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(idx_type = H5_INDEX_NAME; idx_type <=H5_INDEX_CRT_ORDER; idx_type++) {
                                                                          ^
tattr.c:7223:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(order = H5_ITER_INC; order <=H5_ITER_DEC; order++) {
                                                            ^
tattr.c: In function ‘test_attr_shared_write’:
tattr.c:8026:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_shared_rename’:
tattr.c:8352:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_shared_delete’:
tattr.c:8793:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_shared_unlink’:
tattr.c:9157:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_bug3’:
tattr.c:9861:28: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata2[u][v] = (int)((u * dims2[1]) + v);
                            ^
  CC       tchecksum.o
tchecksum.c:40:9: warning: size of ‘large_buf’ is 3093 bytes [-Wlarger-than=]
 uint8_t large_buf[BUF_LEN];
         ^
tchecksum.c: In function ‘test_chksum_large’:
tchecksum.c:192:26: warning: conversion to ‘uint8_t’ from ‘size_t’ may alter its value [-Wconversion]
         large_buf[u] = u * 3;
                          ^
tchecksum.c: In function ‘cleanup_checksum’:
tchecksum.c:251:1: warning: function might be candidate for attribute ‘const’ [-Wsuggest-attribute=const]
 cleanup_checksum(void)
 ^
  CC       tconfig.o
tconfig.c: In function ‘test_config_ctypes’:
tconfig.c:117:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(char, H5_SIZEOF_CHAR);
     ^
tconfig.c:118:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(signed char, unsigned char, H5_SIZEOF_CHAR);
     ^
tconfig.c:118:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:119:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int, unsigned int, H5_SIZEOF_INT);
     ^
tconfig.c:119:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:120:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(short, unsigned short, H5_SIZEOF_SHORT);
     ^
tconfig.c:120:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:121:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(long, unsigned long, H5_SIZEOF_LONG);
     ^
tconfig.c:121:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:122:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(float, H5_SIZEOF_FLOAT);
     ^
tconfig.c:123:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(double, H5_SIZEOF_DOUBLE);
     ^
tconfig.c:125:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(long double, H5_SIZEOF_LONG_DOUBLE);
     ^
tconfig.c:130:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(long long, unsigned long long, H5_SIZEOF_LONG_LONG);
     ^
tconfig.c:130:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:134:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int8_t, uint8_t, H5_SIZEOF_INT8_T);
     ^
tconfig.c:134:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:138:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int16_t, uint16_t, H5_SIZEOF_INT16_T);
     ^
tconfig.c:138:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:142:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int32_t, uint32_t, H5_SIZEOF_INT32_T);
     ^
tconfig.c:142:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:146:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int64_t, uint64_t, H5_SIZEOF_INT64_T);
     ^
tconfig.c:146:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:152:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(int_fast8_t, H5_SIZEOF_INT_FAST8_T);
     ^
tconfig.c:156:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(uint_fast8_t, H5_SIZEOF_UINT_FAST8_T);
     ^
tconfig.c:160:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_fast16_t, uint_fast16_t, H5_SIZEOF_INT_FAST16_T);
     ^
tconfig.c:160:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:164:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_fast32_t, uint_fast32_t, H5_SIZEOF_INT_FAST32_T);
     ^
tconfig.c:164:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:168:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_fast64_t, uint_fast64_t, H5_SIZEOF_INT_FAST64_T);
     ^
tconfig.c:168:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:172:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_least8_t, uint_least8_t, H5_SIZEOF_INT_LEAST8_T);
     ^
tconfig.c:172:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:176:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_least16_t, uint_least16_t, H5_SIZEOF_INT_LEAST16_T);
     ^
tconfig.c:176:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:180:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_least32_t, uint_least32_t, H5_SIZEOF_INT_LEAST32_T);
     ^
tconfig.c:180:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:184:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_cint_type(int_least64_t, uint_least64_t, H5_SIZEOF_INT_LEAST64_T);
     ^
tconfig.c:184:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
tconfig.c:193:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(off_t, H5_SIZEOF_OFF_T);
     ^
tconfig.c:197:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(size_t, H5_SIZEOF_SIZE_T);
     ^
tconfig.c:201:5: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long unsigned int’ [-Wformat=]
     vrfy_ctype(ssize_t, H5_SIZEOF_SSIZE_T);
     ^
tconfig.c: In function ‘cleanup_configure’:
tconfig.c:90:1: warning: function might be candidate for attribute ‘const’ [-Wsuggest-attribute=const]
 cleanup_configure(void)
 ^
tconfig.c: In function ‘test_config_ctypes’:
tconfig.c:113:1: warning: function might be candidate for attribute ‘const’ [-Wsuggest-attribute=const]
 test_config_ctypes(void)
 ^
tconfig.c: In function ‘test_exit_definitions’:
tconfig.c:222:1: warning: function might be candidate for attribute ‘const’ [-Wsuggest-attribute=const]
 test_exit_definitions(void)
 ^
  CC       tfile.o
tfile.c: In function ‘test_file_close’:
tfile.c:760:5: warning: enumeration value ‘H5F_CLOSE_DEFAULT’ not handled in switch [-Wswitch-enum]
     switch(fc_degree) {
     ^
tfile.c: In function ‘test_obj_count_and_id’:
tfile.c:1271:17: warning: enumeration value ‘H5I_UNINIT’ not handled in switch [-Wswitch-enum]
                 switch(id_type) {
                 ^
tfile.c:1271:17: warning: enumeration value ‘H5I_BADID’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_DATATYPE’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_DATASPACE’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_ATTR’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_REFERENCE’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_VFL’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_GENPROP_CLS’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_GENPROP_LST’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_ERROR_CLASS’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_ERROR_MSG’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_ERROR_STACK’ not handled in switch [-Wswitch-enum]
tfile.c:1271:17: warning: enumeration value ‘H5I_NTYPES’ not handled in switch [-Wswitch-enum]
tfile.c: In function ‘test_file_open_overlap’:
tfile.c:1794:29: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     nobjs = H5Fget_obj_count(fid1, H5F_OBJ_LOCAL|H5F_OBJ_ALL);
                             ^
tfile.c:1815:29: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     nobjs = H5Fget_obj_count(fid2, H5F_OBJ_ALL);
                             ^
tfile.c: In function ‘test_rw_noupdate’:
tfile.c:2328:13: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
     if(diff > 0.0F) {
             ^
tfile.c:2361:21: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         ret = (diff > 0.0F);
                     ^
In file included from tfile.c:26:0:
tfile.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CC       tgenprop.o
tgenprop.c: In function ‘test_genprop_iter1’:
tgenprop.c:292:22: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
     } *iter_struct = iter_data;
                      ^
tgenprop.c: In function ‘test_genprop_cls_crt_cb1’:
tgenprop.c:379:21: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
     } *count_struct=create_data;
                     ^
tgenprop.c: In function ‘test_genprop_cls_cpy_cb1’:
tgenprop.c:393:21: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
     } *count_struct=copy_data;
                     ^
tgenprop.c: In function ‘test_genprop_cls_cls_cb1’:
tgenprop.c:407:21: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
     } *count_struct=create_data;
                     ^
tgenprop.c: In function ‘test_genprop_basic_list’:
tgenprop.c:686:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
      "H5Pget", *PROP2_DEF_VALUE, prop2_value, (int)__LINE__, __FILE__);
      ^
tgenprop.c:686:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tgenprop.c: In function ‘test_genprop_basic_list_prop’:
tgenprop.c:778:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
      "H5Pget", *PROP2_DEF_VALUE, prop2_value, (int)__LINE__, __FILE__);
      ^
tgenprop.c:778:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tgenprop.c: In function ‘test_genprop_iter2’:
tgenprop.c:851:20: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
     } *iter_struct=iter_data;
                    ^
tgenprop.c: In function ‘test_genprop_cls_cpy_cb2’:
tgenprop.c:1001:21: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
     } *count_struct=create_data;
                     ^
tgenprop.c: In function ‘test_genprop_list_callback’:
tgenprop.c:1242:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
      "H5Pget", *PROP2_DEF_VALUE, prop2_value, (int)__LINE__, __FILE__);
      ^
tgenprop.c:1242:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
  CC       th5o.o
In file included from th5o.c:24:0:
th5o.c: In function ‘test_h5o_close’:
testhdf5.h:85:16: warning: cast from function call of type ‘H5I_type_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                ^
th5o.c:167:5: note: in expansion of macro ‘VERIFY’
     VERIFY(H5Iget_type(grp), H5I_GROUP, "H5Iget_type");
     ^
th5o.c: In function ‘test_h5o_link’:
th5o.c:780:9: warning: size of ‘wdata’ is 40000 bytes [-Wlarger-than=]
     int wdata[TEST6_DIM1][TEST6_DIM2];
         ^
th5o.c:781:9: warning: size of ‘rdata’ is 40000 bytes [-Wlarger-than=]
     int rdata[TEST6_DIM1][TEST6_DIM2];
         ^
th5o.c: In function ‘test_h5o_comment’:
th5o.c:1011:25: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment(fid, check_comment, (size_t)comment_len+1);
                         ^
th5o.c:1025:25: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment(grp, check_comment, (size_t)comment_len+1);
                         ^
th5o.c:1039:25: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment(dtype, check_comment, (size_t)comment_len+1);
                         ^
th5o.c:1053:25: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment(dset, check_comment, (size_t)comment_len+1);
                         ^
th5o.c: In function ‘test_h5o_comment_by_name’:
th5o.c:1182:33: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment_by_name(fid, ".", check_comment, (size_t)comment_len+1, H5P_DEFAULT);
                                 ^
th5o.c:1196:33: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment_by_name(fid, "group", check_comment, (size_t)comment_len+1, H5P_DEFAULT);
                                 ^
th5o.c:1206:33: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment_by_name(grp, "datatype", check_comment, (size_t)comment_len+1, H5P_DEFAULT);
                                 ^
th5o.c:1216:33: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment_by_name(fid, "dataset", check_comment, (size_t)comment_len+1, H5P_DEFAULT);
                                 ^
th5o.c: In function ‘test_h5o_link’:
th5o.c:768:1: warning: stack usage is 80112 bytes [-Wstack-usage=]
 test_h5o_link(void)
 ^
th5o.c:900:1: warning: the frame size of 80040 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end test_h5o_link() */
 ^
  CC       th5s.o
th5s.c: In function ‘test_h5s_zero_dim’:
th5s.c:543:25: warning: size of ‘wdata_real’ is 2340 bytes [-Wlarger-than=]
     int                 wdata_real[SPACE1_DIM1][SPACE1_DIM2][SPACE1_DIM3];
                         ^
th5s.c:544:25: warning: size of ‘rdata_real’ is 2340 bytes [-Wlarger-than=]
     int                 rdata_real[SPACE1_DIM1][SPACE1_DIM2][SPACE1_DIM3];
                         ^
th5s.c:562:29: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j] = i + j;
                             ^
th5s.c:564:35: warning: conversion to ‘short int’ from ‘unsigned int’ may alter its value [-Wconversion]
             wdata_short[i][j] = i + j;
                                   ^
th5s.c:571:45: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
                 wdata_real[i][j][k] = i + j + k;
                                             ^
th5s.c:574:89: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(alloc_time = H5D_ALLOC_TIME_EARLY; alloc_time <= H5D_ALLOC_TIME_INCR; alloc_time++) {
                                                                                         ^
th5s.c: In function ‘test_h5s_compound_scalar_read’:
th5s.c:1589:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
         printf("scalar data different: space4_data.f=%f, read_data4.f=%f\n",space4_data.f,rdata.f);
         ^
th5s.c:1589:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
th5s.c: At top level:
th5s.c:1611:9: warning: size of ‘chunk_data_dbl’ is 1200000 bytes [-Wlarger-than=]
 double  chunk_data_dbl[50000][3];
         ^
th5s.c:1612:8: warning: size of ‘chunk_data_flt’ is 600000 bytes [-Wlarger-than=]
 float  chunk_data_flt[50000][3];
        ^
th5s.c: In function ‘test_h5s_chunk’:
th5s.c:1655:47: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             chunk_data_flt[i][j] = (float)((i + 1) * 2.5F - j * 100.3F);
                                               ^
th5s.c:1655:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             chunk_data_flt[i][j] = (float)((i + 1) * 2.5F - j * 100.3F);
             ^
In file included from testhdf5.h:31:0,
                 from th5s.c:24:
h5test.h:135:41: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                         ^
th5s.c:1691:17: note: in expansion of macro ‘DBL_REL_EQUAL’
             if(!DBL_REL_EQUAL(chunk_data_dbl[i][j], chunk_data_flt[i][j], 0.00001F))
                 ^
h5test.h:135:47: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
th5s.c:1691:17: note: in expansion of macro ‘DBL_REL_EQUAL’
             if(!DBL_REL_EQUAL(chunk_data_dbl[i][j], chunk_data_flt[i][j], 0.00001F))
                 ^
th5s.c:1692:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("%u: chunk_data_dbl[%d][%d]=%e, chunk_data_flt[%d][%d]=%e\n", (unsigned)__LINE__, i, j, chunk_data_dbl[i][j], i, j, chunk_data_flt[i][j]);
                 ^
In file included from th5s.c:25:0:
th5s.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CC       tcoords.o
tcoords.c: In function ‘test_multiple_ends’:
tcoords.c:412:9: warning: size of ‘data_buf’ is 69120 bytes [-Wlarger-than=]
     int data_buf[4][5][3][4][2][3][6][2];
         ^
tcoords.c:448:9: warning: size of ‘mem5_buffer’ is 7680 bytes [-Wlarger-than=]
     int mem5_buffer[4][5][1][4][2][1][6][2];
         ^
tcoords.c:404:13: warning: stack usage is 81904 bytes [-Wstack-usage=]
 static void test_multiple_ends(hid_t file, hbool_t is_chunked)
             ^
tcoords.c:663:1: warning: the frame size of 81816 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CC       theap.o
theap.c:50:17: warning: size of ‘rand_num’ is 16000 bytes [-Wlarger-than=]
 static test_obj rand_num[NUM_ELEMS];
                 ^
theap.c:53:17: warning: size of ‘inc_sort_num’ is 16000 bytes [-Wlarger-than=]
 static test_obj inc_sort_num[NUM_ELEMS];
                 ^
theap.c:56:17: warning: size of ‘dec_sort_num’ is 16000 bytes [-Wlarger-than=]
 static test_obj dec_sort_num[NUM_ELEMS];
                 ^
  CC       tid.o
  CC       titerate.o
titerate.c: In function ‘test_iter_group’:
titerate.c:286:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     idx = i = 0;
             ^
titerate.c:311:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     idx = i = 0;
             ^
titerate.c: In function ‘test_iter_attr’:
titerate.c:465:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     idx = i = 0;
             ^
titerate.c:491:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     idx = i = 0;
             ^
titerate.c: In function ‘test_iter_group_large’:
titerate.c:584:15: warning: size of ‘names’ is 13376 bytes [-Wlarger-than=]
     iter_info names[ITER_NGROUPS+2]; /* Names of objects in the root group */
               ^
titerate.c:675:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         hsize_t idx = i;
         ^
titerate.c: In function ‘iter_strcmp’:
titerate.c:75:5: warning: function might be candidate for attribute ‘pure’ [-Wsuggest-attribute=pure]
 int iter_strcmp(const void *s1, const void *s2)
     ^
titerate.c: In function ‘iter_strcmp2’:
titerate.c:530:5: warning: function might be candidate for attribute ‘pure’ [-Wsuggest-attribute=pure]
 int iter_strcmp2(const void *s1, const void *s2)
     ^
titerate.c: In function ‘aiter_cb’:
titerate.c:365:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:369:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c: In function ‘liter_cb’:
titerate.c:104:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:108:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c: In function ‘test_iter_group_large’:
titerate.c:574:1: warning: stack usage is 13504 bytes [-Wstack-usage=]
 test_iter_group_large(hid_t fapl)
 ^
titerate.c: In function ‘aiter_cb’:
titerate.c:365:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:369:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c:365:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:369:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c: In function ‘liter_cb’:
titerate.c:104:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:108:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c:104:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:108:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
  CC       tmeta.o
In file included from tmeta.c:25:0:
tmeta.c: In function ‘test_metadata’:
../src/H5Fprivate.h:132:37: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    (i) |= ((int32_t)(((*(p) & 0xff) << 24) |                                  \
                                     ^
tmeta.c:89:5: note: in expansion of macro ‘INT32DECODE’
     INT32DECODE(p, di32);       /* Decode the int32 value */
     ^
tmeta.c: In function ‘cleanup_metadata’:
tmeta.c:127:1: warning: function might be candidate for attribute ‘const’ [-Wsuggest-attribute=const]
 cleanup_metadata(void)
 ^
  CC       tmisc.o
tmisc.c:191:10: warning: size of ‘m13_data’ is 2400 bytes [-Wlarger-than=]
 unsigned m13_data[MISC13_DIM1][MISC13_DIM2];           /* Data to write to dataset */
          ^
tmisc.c:192:10: warning: size of ‘m13_rdata’ is 2400 bytes [-Wlarger-than=]
 unsigned m13_rdata[MISC13_DIM1][MISC13_DIM2];          /* Data read from dataset */
          ^
tmisc.c: In function ‘create_struct3’:
tmisc.c:716:14: warning: request for implicit conversion from ‘void *’ to ‘struct misc5_struct3_hndl *’ not permitted in C++ [-Wc++-compat]
     str3hndl = HDmalloc(sizeof(misc5_struct3_hndl));
              ^
tmisc.c: In function ‘create_struct2’:
tmisc.c:759:14: warning: request for implicit conversion from ‘void *’ to ‘struct misc5_struct2_hndl *’ not permitted in C++ [-Wc++-compat]
     str2hndl = HDmalloc(sizeof(misc5_struct2_hndl));
              ^
tmisc.c: In function ‘create_struct1’:
tmisc.c:825:14: warning: request for implicit conversion from ‘void *’ to ‘struct misc5_struct1_hndl *’ not permitted in C++ [-Wc++-compat]
     str1hndl = HDmalloc(sizeof(misc5_struct1_hndl));
              ^
tmisc.c: In function ‘test_misc8’:
tmisc.c:1246:10: warning: request for implicit conversion from ‘void *’ to ‘int *’ not permitted in C++ [-Wc++-compat]
     wdata=HDmalloc(sizeof(int)*MISC8_DIM0*MISC8_DIM1);
          ^
tmisc.c:1257:40: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             *tdata++=((u*MISC8_DIM1)+v)%13;
                                        ^
In file included from tmisc.c:32:0:
tmisc.c:1313:50: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0 * MISC8_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1339:50: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0 * MISC8_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1364:50: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0 * MISC8_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1408:50: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0 * MISC8_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1435:50: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0 * MISC8_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1465:50: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0 * MISC8_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1489:66: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, 4 * MISC8_CHUNK_DIM0 * MISC8_CHUNK_DIM1 * H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                                                  ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c:1512:47: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(storage_size, MISC8_DIM0*MISC8_DIM1*H5Tget_size(H5T_NATIVE_INT), "H5Dget_storage_size");
                                               ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tmisc.c: In function ‘test_misc16’:
tmisc.c:2725:25: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]
                         {"1234567", "1234567\0", "12345678", {NULL}};
                         ^
tmisc.c:2725:25: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]
tmisc.c:2725:25: warning: initialization makes integer from pointer without a cast [enabled by default]
tmisc.c:2725:25: warning: (near initialization for ‘wdata[3][0]’) [enabled by default]
tmisc.c: In function ‘test_misc17’:
tmisc.c:2804:25: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]
                         {"1234567", "1234567\0", "12345678", {NULL}};
                         ^
tmisc.c:2804:25: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]
tmisc.c:2804:25: warning: initialization makes integer from pointer without a cast [enabled by default]
tmisc.c:2804:25: warning: (near initialization for ‘wdata[3][0]’) [enabled by default]
tmisc.c: In function ‘test_misc23’:
tmisc.c:3882:25: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     status = H5Iget_name(tmp_id, objname, (size_t)MISC23_NAME_BUF_SIZE);
                         ^
tmisc.c: In function ‘test_misc28’:
tmisc.c:5038:9: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         buf[i] = i;
         ^
tmisc.c:5059:34: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         buf[i] = MISC28_SIZE - 1 - i;
                                  ^
In file included from tmisc.c:33:0:
tmisc.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CC       trefer.o
trefer.c: In function ‘test_reference_params’:
trefer.c:117:18: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *tu32++=i*3;
                  ^
trefer.c:198:28: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_size = H5Rget_name((hid_t)-1, H5R_DATASET_REGION, &rbuf[0], NULL, 0);
                            ^
trefer.c:200:28: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_size = H5Rget_name(fid1, H5R_DATASET_REGION, NULL, NULL, 0);
                            ^
trefer.c:202:28: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_size = H5Rget_name(fid1, H5R_MAXTYPE, &rbuf[0], NULL, 0);
                            ^
trefer.c: In function ‘test_reference_obj’:
trefer.c:287:18: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *tu32++=i*3;
                  ^
trefer.c:418:25: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Oget_comment(group, read_comment, (size_t)10);
                         ^
trefer.c: In function ‘test_reference_region’:
trefer.c:532:20: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         *tu8++ = i * 3;
                    ^
In file included from testhdf5.h:27:0,
                 from trefer.c:24:
trefer.c:719:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     coords = (hsize_t *)HDmalloc(ret * SPACE2_RANK * sizeof(hsize_t) * 2); /* allocate space for the hyperslab blocks */
                                      ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
trefer.c:747:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     coords = (hsize_t *)HDmalloc(ret * SPACE2_RANK * sizeof(hsize_t)); /* allocate space for the element points */
                                      ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
trefer.c: In function ‘test_reference_region_1D’:
trefer.c:868:20: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         *tu8++ = i * 3;
                    ^
In file included from testhdf5.h:27:0,
                 from trefer.c:24:
trefer.c:991:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     coords = (hsize_t *)HDmalloc(ret * SPACE3_RANK * sizeof(hsize_t) * 2); /* allocate space for the hyperslab blocks */
                                      ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
trefer.c:1043:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     coords = (hsize_t *)HDmalloc(ret * SPACE3_RANK * sizeof(hsize_t)); /* allocate space for the element points */
                                      ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
trefer.c: In function ‘test_reference_group’:
trefer.c:1328:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Lget_name_by_idx(gid, ".", H5_INDEX_NAME, H5_ITER_INC, (hsize_t)0, objname, (size_t)NAME_SIZE, H5P_DEFAULT);
                             ^
  CC       trefstr.o
  CC       tselect.o
tselect.c: In function ‘test_select_all’:
tselect.c:717:76: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
                 *tbuf++ = (uint8_t)(((i * SPACE4_DIM2) + j) * SPACE4_DIM3) + k;
                                                                            ^
tselect.c: In function ‘verify_select_hyper_contig_dr__run_test’:
tselect.c:1608:12: warning: unused parameter ‘cube_size’ [-Wunused-parameter]
     size_t cube_size, unsigned edge_size, unsigned cube_rank)
            ^
tselect.c: In function ‘test_select_combine’:
tselect.c:6652:13: warning: size of ‘blocks’ is 4096 bytes [-Wlarger-than=]
     hsize_t blocks[128][2][SPACE7_RANK];    /* List of blocks */
             ^
tselect.c: In function ‘test_select_fill_point’:
tselect.c:7185:60: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         points[u][0] = (hsize_t)(points[u][0] + real_offset[0]);
                                                            ^
tselect.c:7186:60: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         points[u][1] = (hsize_t)(points[u][1] + real_offset[1]);
                                                            ^
tselect.c: In function ‘test_select_fill_hyper_simple’:
tselect.c:7266:55: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
             if((u >= (unsigned)(start[0] + real_offset[0]) && u < (unsigned)(start[0] + count[0] + real_offset[0]))
                                                       ^
tselect.c:7266:111: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
             if((u >= (unsigned)(start[0] + real_offset[0]) && u < (unsigned)(start[0] + count[0] + real_offset[0]))
                                                                                                               ^
tselect.c:7267:59: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
                 && (v >= (unsigned)(start[1] + real_offset[1]) && v < (unsigned)(start[1] + count[1] + real_offset[1]))) {
                                                           ^
tselect.c:7267:115: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
                 && (v >= (unsigned)(start[1] + real_offset[1]) && v < (unsigned)(start[1] + count[1] + real_offset[1]))) {
                                                                                                                   ^
tselect.c:7285:73: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
             points[num_points][0] = (hsize_t)(u + start[0] + real_offset[0]);
                                                                         ^
tselect.c:7286:73: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
             points[num_points][1] = (hsize_t)(v + start[1] + real_offset[1]);
                                                                         ^
tselect.c: In function ‘test_select_fill_hyper_regular’:
tselect.c:7376:62: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
                 if(u == (unsigned)(points[w][0] + real_offset[0]) && v == (unsigned)(points[w][1] + real_offset[1])) {
                                                              ^
tselect.c:7376:112: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
                 if(u == (unsigned)(points[w][0] + real_offset[0]) && v == (unsigned)(points[w][1] + real_offset[1])) {
                                                                                                                ^
tselect.c:7393:60: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         points[u][0] = (hsize_t)(points[u][0] + real_offset[0]);
                                                            ^
tselect.c:7394:60: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         points[u][1] = (hsize_t)(points[u][1] + real_offset[1]);
                                                            ^
tselect.c: In function ‘test_select_fill_hyper_irregular’:
tselect.c:7499:62: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
                 if(u == (unsigned)(points[w][0] + real_offset[0]) && v == (unsigned)(points[w][1] + real_offset[1])) {
                                                              ^
tselect.c:7499:112: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
                 if(u == (unsigned)(points[w][0] + real_offset[0]) && v == (unsigned)(points[w][1] + real_offset[1])) {
                                                                                                                ^
tselect.c:7516:70: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         iter_points[u][0] = (hsize_t)(iter_points[u][0] + real_offset[0]);
                                                                      ^
tselect.c:7517:70: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         iter_points[u][1] = (hsize_t)(iter_points[u][1] + real_offset[1]);
                                                                      ^
tselect.c: In function ‘test_select_hyper_checker_board_dr__verify_data’:
tselect.c:2628:1: warning: function might be candidate for attribute ‘pure’ if it is known to return normally [-Wsuggest-attribute=pure]
 test_select_hyper_checker_board_dr__verify_data(uint16_t * buf_ptr,
 ^
tselect.c: In function ‘test_shape_same_dr__run_full_space_vs_slice_tests’:
tselect.c:10737:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:10740:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:10743:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:10746:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:10749:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c: In function ‘test_shape_same_dr__run_checkerboard_tests’:
tselect.c:11351:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11354:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11357:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11360:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11363:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c: In function ‘test_shape_same_dr__run_irregular_tests’:
tselect.c:11841:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11844:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11847:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11850:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11853:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2 ) && (large_rank >= 5));
                        ^
tselect.c: In function ‘test_select_hyper_contig_dr__run_test.constprop.15’:
tselect.c:2252:21: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
                     for(; s <= stop_index; s++) {
                     ^
tselect.c:2011:21: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
                     for(; s <= stop_index; s++) {
                     ^
tselect.c: In function ‘test_select’:
tselect.c:10737:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:10740:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:10743:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:10746:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:10749:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11351:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11354:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11357:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11360:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11363:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11841:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11844:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11847:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11850:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11853:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2 ) && (large_rank >= 5));
                        ^
tselect.c:10740:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:10743:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:10746:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:10749:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11354:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11357:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11360:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11363:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11844:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11847:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11850:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11853:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2 ) && (large_rank >= 5));
                        ^
tselect.c:11681:9: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
         for(small_rank = 1; small_rank <= large_rank; small_rank++) {
         ^
tselect.c:11133:9: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
         for(small_rank = 1; small_rank <= large_rank; small_rank++) {
         ^
tselect.c:10646:9: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
         for(small_rank = 1; small_rank <= large_rank; small_rank++) {
         ^
  CC       tskiplist.o
tskiplist.c:44:12: warning: size of ‘rand_num’ is 4000 bytes [-Wlarger-than=]
 static int rand_num[NUM_ELEMS];
            ^
tskiplist.c:45:12: warning: size of ‘sort_rand_num’ is 4000 bytes [-Wlarger-than=]
 static int sort_rand_num[NUM_ELEMS];
            ^
tskiplist.c:46:12: warning: size of ‘rev_sort_rand_num’ is 4000 bytes [-Wlarger-than=]
 static int rev_sort_rand_num[NUM_ELEMS];
            ^
  CC       tsohm.o
tsohm.c: In function ‘size2_verify_plist1’:
tsohm.c:1282:5: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘int (*)(const void *, const void *, size_t)’ [-Wformat=]
     VERIFY(ret, 0, memcmp);
     ^
tsohm.c: In function ‘size2_verify_plist2’:
tsohm.c:1353:5: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘int (*)(const void *, const void *, size_t)’ [-Wformat=]
     VERIFY(ret, 0, memcmp);
     ^
tsohm.c: In function ‘size2_helper’:
tsohm.c:1684:51: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         attr_string1[0] = attr_name[0] = (x / 10) + '0';
                                                   ^
tsohm.c:1685:51: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         attr_string1[1] = attr_name[1] = (x % 10) + '0';
                                                   ^
tsohm.c:1724:51: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         attr_string1[0] = attr_name[0] = (x / 10) + '0';
                                                   ^
tsohm.c:1725:51: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         attr_string1[1] = attr_name[1] = (x % 10) + '0';
                                                   ^
tsohm.c: In function ‘size2_verify’:
tsohm.c:1943:58: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         attr_correct_string[0] = attr_name[0] = (x / 10) + '0';
                                                          ^
tsohm.c:1944:58: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         attr_correct_string[1] = attr_name[1] = (x % 10) + '0';
                                                          ^
tsohm.c: In function ‘test_sohm_size2’:
tsohm.c:2200:46: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_med.empty_size > norm_sizes.empty_size * OVERHEAD_ALLOWED)
                                              ^
tsohm.c:2261:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(btree_index.dsets2 > list_index_small.dsets2 * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2270:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_small.dsets2 > btree_index.dsets2 * OVERHEAD_ALLOWED * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2294:50: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(btree_index.interleaved > list_index_small.interleaved * OVERHEAD_ALLOWED)
                                                  ^
tsohm.c:2323:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(btree_index.attrs1 > list_index_small.attrs1 * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2325:43: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(btree_index.attrs1 > list_index_med.attrs1 * OVERHEAD_ALLOWED)
                                           ^
tsohm.c:2327:43: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_med.attrs1 > btree_index.attrs1 * OVERHEAD_ALLOWED)
                                           ^
tsohm.c:2329:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_small.attrs1 > btree_index.attrs1 * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2334:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_small.attrs1 > btree_index.attrs1 * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2336:43: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_med.attrs1 > btree_index.attrs1 * OVERHEAD_ALLOWED)
                                           ^
tsohm.c:2352:34: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
             ((btree_index.attrs1 - btree_index.interleaved) * OVERHEAD_ALLOWED))
                                  ^
tsohm.c:2360:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(btree_index.attrs2 > list_index_small.attrs2 * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2362:45: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_small.attrs2 > btree_index.attrs2 * OVERHEAD_ALLOWED)
                                             ^
tsohm.c:2364:43: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(btree_index.attrs2 > list_index_med.attrs2 * OVERHEAD_ALLOWED)
                                           ^
tsohm.c:2366:43: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(list_index_med.attrs2 > btree_index.attrs2 * OVERHEAD_ALLOWED)
                                           ^
tsohm.c:2454:36: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
             (list_index_med.dsets2 - list_index_med.dsets1) * OVERHEAD_ALLOWED)
                                    ^
tsohm.c:2457:33: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
             (btree_index.dsets2 - btree_index.dsets1) * OVERHEAD_ALLOWED)
                                 ^
tsohm.c:2461:41: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
             (list_index_med.interleaved - list_index_med.dsets2) * OVERHEAD_ALLOWED)
                                         ^
tsohm.c:2464:38: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
             (btree_index.interleaved - btree_index.dsets2) * OVERHEAD_ALLOWED)
                                      ^
tsohm.c:2486:23: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
      if(mult_index_med.attrs2 * OVERHEAD_ALLOWED < btree_index.attrs2)
                       ^
tsohm.c:2488:25: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
      if(mult_index_btree.attrs2 * OVERHEAD_ALLOWED < btree_index.attrs2)
                         ^
tsohm.c:2557:55: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.first_dset >= type_space_index.first_dset * OVERHEAD_ALLOWED)
                                                       ^
tsohm.c:2564:24: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.second_dset * OVERHEAD_ALLOWED < type_space_index.second_dset)
                        ^
tsohm.c:2569:24: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.dsets1 * OVERHEAD_ALLOWED < type_space_index.dsets1)
                        ^
tsohm.c:2574:24: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.dsets2 * OVERHEAD_ALLOWED < type_space_index.dsets2)
                        ^
tsohm.c:2579:24: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.interleaved * OVERHEAD_ALLOWED < type_space_index.interleaved)
                        ^
tsohm.c:2584:24: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.attrs1 * OVERHEAD_ALLOWED < type_space_index.attrs1)
                        ^
tsohm.c:2589:24: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(share_tiny_index.attrs2 * OVERHEAD_ALLOWED < type_space_index.attrs2)
                        ^
tsohm.c: In function ‘delete_helper_write’:
tsohm.c:2619:15: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
     wdata = x + 'a';
               ^
tsohm.c: In function ‘delete_helper’:
tsohm.c:2767:5: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(norm_filesize > deleted_filesize * OVERHEAD_ALLOWED)
     ^
tsohm.c:2769:5: warning: conversion to ‘float’ from ‘h5_stat_size_t’ may alter its value [-Wconversion]
     if(deleted_filesize > norm_filesize * OVERHEAD_ALLOWED)
     ^
tsohm.c: In function ‘test_sohm_external_dtype’:
tsohm.c:3890:24: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         s_ptr->a = i*3 + 1;
                        ^
tsohm.c:3891:24: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         s_ptr->b = i*3 + 2;
                        ^
  CC       ttime.o
  CC       ttst.o
ttst.c: In function ‘test_tst_init’:
ttst.c:98:15: warning: request for implicit conversion from ‘void *’ to ‘char **’ not permitted in C++ [-Wc++-compat]
     uniq_words=HDmalloc(sizeof(char *)*num_uniq_words);
               ^
ttst.c:101:20: warning: request for implicit conversion from ‘void *’ to ‘char **’ not permitted in C++ [-Wc++-compat]
     rand_uniq_words=HDmalloc(sizeof(char *)*num_uniq_words);
                    ^
ttst.c:104:20: warning: request for implicit conversion from ‘void *’ to ‘char **’ not permitted in C++ [-Wc++-compat]
     sort_uniq_words=HDmalloc(sizeof(char *)*num_uniq_words);
                    ^
ttst.c:110:18: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
         tmp_word=(char *)words[u];
                  ^
In file included from testhdf5.h:27:0,
                 from ttst.c:39:
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
ttst.c:129:14: note: in expansion of macro ‘HDrandom’
         v=u+(HDrandom()%(num_uniq_words-u));
              ^
  CC       tunicode.o
tunicode.c: In function ‘test_objnames’:
tunicode.c:402:31: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
   ret = H5Oget_comment_by_name(fid, string, read_buf, (size_t)MAX_STRING_LENGTH, H5P_DEFAULT);
                               ^
tunicode.c: In function ‘test_attrname’:
tunicode.c:535:20: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
   ret = H5Aget_name(attr_id, (size_t)MAX_STRING_LENGTH, read_buf);
                    ^
tunicode.c: In function ‘write_char’:
tunicode.c:747:5: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos] = c;
     ^
tunicode.c:751:34: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos] = (0xC0 | c>>6);
                                  ^
tunicode.c:752:36: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos+1] = (0x80 | (c & 0x3F));
                                    ^
tunicode.c:756:34: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos] = (0xE0 | c>>12);
                                  ^
tunicode.c:757:36: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos+1] = (0x80 | (c>>6 & 0x3F));
                                    ^
tunicode.c:758:36: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos+2] = (0x80 | (c & 0x3F));
                                    ^
tunicode.c:762:34: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos] = (0xF0 | c>>18);
                                  ^
tunicode.c:763:36: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos+1] = (0x80 | (c>>12 & 0x3F));
                                    ^
tunicode.c:764:36: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos+2] = (0x80 | (c>>6 & 0x3F));
                                    ^
tunicode.c:765:36: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
     test_string[cur_pos+3] = (0x80 | (c & 0x3F));
                                    ^
tunicode.c: In function ‘dump_string’:
tunicode.c:784:18: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
   length = strlen(string);
                  ^
tunicode.c: In function ‘test_unicode’:
tunicode.c:817:56: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     unicode_point = (HDrandom() % (MAX_CODE_POINT-32)) + 32;
                                                        ^
  CC       tvlstr.o
  CC       tvltypes.o
tvltypes.c: In function ‘test_vltypes_funcs’:
tvltypes.c:186:26: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_precision(type);
                          ^
tvltypes.c:189:21: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_size(type);
                     ^
tvltypes.c:192:22: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_ebias(type);
                      ^
tvltypes.c: In function ‘rewrite_vltypes_vlen_atomic’:
tvltypes.c:569:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].p = HDmalloc((i + increment) * sizeof(unsigned int));
         ^
tvltypes.c:570:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].len = i + increment;
         ^
tvltypes.c:571:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         for(j = 0; j < (i + increment); j++)
         ^
tvltypes.c: In function ‘test_vltypes_vlen_compound’:
tvltypes.c:733:41: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             ((s1 *)wdata[i].p)[j].i=i*10+j;
                                         ^
tvltypes.c:734:50: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             ((s1 *)wdata[i].p)[j].f=(float)((i*20+j)/3.0F);
                                                  ^
tvltypes.c: In function ‘rewrite_vltypes_vlen_compound’:
tvltypes.c:876:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].p = HDmalloc((i + increment) * sizeof(s1));
         ^
tvltypes.c:877:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].len = i + increment;
         ^
tvltypes.c:878:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         for(j = 0; j < (i + increment); j++) {
         ^
tvltypes.c:879:46: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             ((s1 *)wdata[i].p)[j].i = i * 40 + j;
                                              ^
tvltypes.c:880:55: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             ((s1 *)wdata[i].p)[j].f = (float)((i * 60 + j) / 3.0F);
                                                       ^
tvltypes.c: In function ‘test_vltypes_compound_vlen_vlen’:
tvltypes.c:1004:8: warning: size of ‘wdata’ is 3072 bytes [-Wlarger-than=]
     s1 wdata[SPACE3_DIM1];              /* data to write */
        ^
tvltypes.c:1005:8: warning: size of ‘rdata’ is 3072 bytes [-Wlarger-than=]
     s1 rdata[SPACE3_DIM1];              /* data to read */
        ^
tvltypes.c:1020:21: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].i=i*10;
                     ^
tvltypes.c:1021:30: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         wdata[i].f=(float)((i*20)/3.0F);
                              ^
tvltypes.c:1024:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=(wdata[i].v).p,j=0; j<(i+L1_INCM); j++, t1++) {
               ^
tvltypes.c:1105:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].v.p, t2=rdata[i].v.p, j=0; j<rdata[i].v.len; j++, t1++, t2++) {
               ^
tvltypes.c:1105:32: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].v.p, t2=rdata[i].v.p, j=0; j<rdata[i].v.len; j++, t1++, t2++) {
                                ^
tvltypes.c: In function ‘test_vltypes_compound_vlstr’:
tvltypes.c:1202:15: warning: request for implicit conversion from ‘void *’ to ‘struct s2 *’ not permitted in C++ [-Wc++-compat]
         for(t1=(wdata[i].v).p, j=0; j<(i+L3_INCM); j++, t1++) {
               ^
tvltypes.c:1345:15: warning: request for implicit conversion from ‘void *’ to ‘struct s2 *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].v.p, t2=rdata[i].v.p, j=0; j<rdata[i].v.len; j++, t1++, t2++) {
               ^
tvltypes.c:1345:32: warning: request for implicit conversion from ‘void *’ to ‘struct s2 *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].v.p, t2=rdata[i].v.p, j=0; j<rdata[i].v.len; j++, t1++, t2++) {
                                ^
tvltypes.c:1403:15: warning: request for implicit conversion from ‘void *’ to ‘struct s2 *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata2[i].v.p, t2=rdata2[i].v.p, j=0; j<rdata2[i].v.len; j++, t1++, t2++) {
               ^
tvltypes.c:1403:33: warning: request for implicit conversion from ‘void *’ to ‘struct s2 *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata2[i].v.p, t2=rdata2[i].v.p, j=0; j<rdata2[i].v.len; j++, t1++, t2++) {
                                 ^
tvltypes.c: In function ‘test_vltypes_compound_vlen_atomic’:
tvltypes.c:1481:21: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].i=i*10;
                     ^
tvltypes.c:1482:30: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         wdata[i].f=(float)((i*20)/3.0F);
                              ^
tvltypes.c:1599:13: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
             TestErrPrintf("VL doesn't match!, rdata[%d].i=%d, rdata[%d].f=%f, rdata[%d].v.len=%u, rdata[%d].v.p=%p\n",(int)i,rdata[i].i,(int)i,rdata[i].f,(int)i,(unsigned)rdata[i].v.len,(int)i,rdata[i].v.p);
             ^
tvltypes.c: In function ‘rewrite_vltypes_compound_vlen_atomic’:
tvltypes.c:1699:24: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].i = i * 40;
                        ^
tvltypes.c:1700:33: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         wdata[i].f = (float)((i * 50) / 3.0F);
                                 ^
tvltypes.c:1701:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].v.p = HDmalloc((i + increment) * sizeof(unsigned int));
         ^
tvltypes.c:1702:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].v.len = i + increment;
         ^
tvltypes.c:1703:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         for(j = 0; j < (i + increment); j++)
         ^
tvltypes.c: In function ‘test_vltypes_vlen_vlen_atomic’:
tvltypes.c:1874:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p,j=0; j<(i+1); j++, t1++) {
               ^
In file included from tvltypes.c:24:0:
tvltypes.c:1963:74: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(size, ((SPACE1_DIM1 * (SPACE1_DIM1 + 1)) / 2) * sizeof(hvl_t) + vlen_size_func((unsigned long)SPACE1_DIM1) * sizeof(unsigned int), "H5Dvlen_get_buf_size");
                                                                          ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tvltypes.c:1972:78: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(mem_used, ((SPACE1_DIM1 * (SPACE1_DIM1 + 1)) / 2) * sizeof(hvl_t) + vlen_size_func((unsigned long)SPACE1_DIM1) * sizeof(unsigned int), "H5Dread");
                                                                              ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tvltypes.c:1980:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p, t2=rdata[i].p, j=0; j<rdata[i].len; j++, t1++, t2++) {
               ^
tvltypes.c:1980:30: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p, t2=rdata[i].p, j=0; j<rdata[i].len; j++, t1++, t2++) {
                              ^
tvltypes.c: In function ‘rewrite_longer_vltypes_vlen_vlen_atomic’:
tvltypes.c:2059:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].p = HDmalloc((i + increment) * sizeof(hvl_t));
         ^
tvltypes.c:2064:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].len = i + increment;
         ^
tvltypes.c:2065:16: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1 = wdata[i].p, j = 0; j < (i + increment); j++, t1++) {
                ^
tvltypes.c:2065:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         for(t1 = wdata[i].p, j = 0; j < (i + increment); j++, t1++) {
         ^
tvltypes.c:2160:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p, t2=rdata[i].p, j=0; j<rdata[i].len; j++, t1++, t2++) {
               ^
tvltypes.c:2160:30: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p, t2=rdata[i].p, j=0; j<rdata[i].len; j++, t1++, t2++) {
                              ^
tvltypes.c: In function ‘rewrite_shorter_vltypes_vlen_vlen_atomic’:
tvltypes.c:2235:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].p=HDmalloc((i+increment)*sizeof(hvl_t));
         ^
tvltypes.c:2240:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].len=i+increment;
         ^
tvltypes.c:2241:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p,j=0; j<(i+increment); j++, t1++) {
               ^
tvltypes.c:2241:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         for(t1=wdata[i].p,j=0; j<(i+increment); j++, t1++) {
         ^
In file included from tvltypes.c:24:0:
tvltypes.c:2319:72: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(size, ((SPACE1_DIM1*(SPACE1_DIM1 + 1)) / 2) * sizeof(hvl_t) + vlen_size_func((unsigned long)SPACE1_DIM1) * sizeof(unsigned int), "H5Dvlen_get_buf_size");
                                                                        ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tvltypes.c:2328:68: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     VERIFY(mem_used,((SPACE1_DIM1*(SPACE1_DIM1+1))/2)*sizeof(hvl_t)+vlen_size_func((unsigned long)SPACE1_DIM1)*sizeof(unsigned int),"H5Dread");
                                                                    ^
testhdf5.h:85:40: note: in definition of macro ‘VERIFY’
     long __x = (long)_x, __val = (long)_val;          \
                                        ^
tvltypes.c:2336:15: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p, t2=rdata[i].p, j=0; j<rdata[i].len; j++, t1++, t2++) {
               ^
tvltypes.c:2336:30: warning: request for implicit conversion from ‘void *’ to ‘struct hvl_t *’ not permitted in C++ [-Wc++-compat]
         for(t1=wdata[i].p, t2=rdata[i].p, j=0; j<rdata[i].len; j++, t1++, t2++) {
                              ^
tvltypes.c: In function ‘test_vltypes_fill_value’:
tvltypes.c:2433:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     const dtype1_struct fill1 = {1, 2, "foobar", "", NULL, "\0", "dead", 3, 4.0F, 100.0F, 1.0F, "liquid", "meter"};
     ^
tvltypes.c:2433:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2433:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2433:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2433:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2433:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2434:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     const dtype1_struct wdata = {3, 4, "", NULL, "\0", "foo", "two", 6, 8.0F, 200.0F, 2.0F, "solid", "yard"};
     ^
tvltypes.c:2434:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2434:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2434:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2434:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2434:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
tvltypes.c:2499:10: warning: request for implicit conversion from ‘void *’ to ‘struct dtype1_struct *’ not permitted in C++ [-Wc++-compat]
     rbuf = HDmalloc(SPACE4_DIM_LARGE * sizeof(dtype1_struct));
          ^
tvltypes.c:2541:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(layout = H5D_COMPACT; layout <= H5D_CHUNKED; layout++) {
                                                            ^
tvltypes.c:2561:13: warning: enumeration value ‘H5D_LAYOUT_ERROR’ not handled in switch [-Wswitch-enum]
             switch(layout) {
             ^
tvltypes.c:2561:13: warning: enumeration value ‘H5D_NLAYOUTS’ not handled in switch [-Wswitch-enum]
tvltypes.c:2651:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(layout = H5D_COMPACT; layout <= H5D_CHUNKED; layout++) {
                                                            ^
tvltypes.c:2666:13: warning: enumeration value ‘H5D_LAYOUT_ERROR’ not handled in switch [-Wswitch-enum]
             switch(layout) {
             ^
tvltypes.c:2666:13: warning: enumeration value ‘H5D_NLAYOUTS’ not handled in switch [-Wswitch-enum]
tvltypes.c:2846:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(layout = H5D_COMPACT; layout <= H5D_CHUNKED; layout++) {
                                                            ^
tvltypes.c:2861:13: warning: enumeration value ‘H5D_LAYOUT_ERROR’ not handled in switch [-Wswitch-enum]
             switch(layout) {
             ^
tvltypes.c:2861:13: warning: enumeration value ‘H5D_NLAYOUTS’ not handled in switch [-Wswitch-enum]
  CCLD     testhdf5
  CC       lheap.o
lheap.c: In function ‘main’:
lheap.c:100:26: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[j] = '0' + j % 10;
                          ^
lheap.c:133:26: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             buf[j] = '0' + j % 10;
                          ^
In file included from lheap.c:23:0:
lheap.c: At top level:
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     lheap
  CC       ohdr.o
In file included from ohdr.c:20:0:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     ohdr
  CC       stab.o
  CCLD     stab
  CC       gheap.o
gheap.c: In function ‘test_1’:
gheap.c:80:12: warning: size of ‘obj’ is 16384 bytes [-Wlarger-than=]
     H5HG_t obj[1024];
            ^
gheap.c:107:11: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  size = i + 1;
           ^
gheap.c:126:11: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  size = i + 1;
           ^
gheap.c: In function ‘test_2’:
gheap.c:176:12: warning: size of ‘obj’ is 16384 bytes [-Wlarger-than=]
     H5HG_t obj[1024];
            ^
gheap.c:200:13: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  size = 1024-i;
             ^
gheap.c:214:13: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  size = 1024-i;
             ^
gheap.c: In function ‘test_3’:
gheap.c:263:12: warning: size of ‘obj’ is 16384 bytes [-Wlarger-than=]
     H5HG_t obj[1024];
            ^
gheap.c:285:13: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  size = i%30+100;
             ^
gheap.c: In function ‘test_4’:
gheap.c:342:12: warning: size of ‘obj’ is 16384 bytes [-Wlarger-than=]
     H5HG_t obj[1024];
            ^
gheap.c:364:13: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  size = i%30+100;
             ^
gheap.c: In function ‘test_1’:
gheap.c:76:1: warning: stack usage is 19584 bytes [-Wstack-usage=]
 test_1 (hid_t fapl)
 ^
gheap.c:151:1: warning: the frame size of 19508 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
gheap.c: In function ‘test_2’:
gheap.c:172:1: warning: stack usage is 19568 bytes [-Wstack-usage=]
 test_2 (hid_t fapl)
 ^
gheap.c:238:1: warning: the frame size of 19504 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
gheap.c: In function ‘test_3’:
gheap.c:259:1: warning: stack usage is 18560 bytes [-Wstack-usage=]
 test_3 (hid_t fapl)
 ^
gheap.c:316:1: warning: the frame size of 18484 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
gheap.c: In function ‘test_4’:
gheap.c:338:1: warning: stack usage is 18560 bytes [-Wstack-usage=]
 test_4 (hid_t fapl)
 ^
gheap.c:401:1: warning: the frame size of 18484 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     gheap
  CC       cache.o
cache.c: In function ‘check_flush_cache__flush_ops’:
cache.c:7077:34: warning: size of ‘spec’ is 2160 bytes [-Wlarger-than=]
  struct fo_flush_cache_test_spec spec[6] =
                                  ^
cache.c:7353:34: warning: size of ‘spec’ is 2160 bytes [-Wlarger-than=]
  struct fo_flush_cache_test_spec spec[6] =
                                  ^
cache.c:7969:34: warning: size of ‘spec’ is 3600 bytes [-Wlarger-than=]
  struct fo_flush_cache_test_spec spec[10] =
                                  ^
cache.c:8416:34: warning: size of ‘spec’ is 3600 bytes [-Wlarger-than=]
  struct fo_flush_cache_test_spec spec[10] =
                                  ^
cache.c: In function ‘check_flush_cache__single_entry’:
cache.c:12689:4: warning: size of ‘spec’ is 12288 bytes [-Wlarger-than=]
  } spec[256] =
    ^
cache.c: In function ‘check_auto_cache_resize_input_errs’:
cache.c:25757:9: warning: implicit declaration of function ‘resize_configs_are_equal’ [-Wimplicit-function-declaration]
         } else if ( ! resize_configs_are_equal(&test_auto_size_ctl, \
         ^
cache.c:25757:9: warning: nested extern declaration of ‘resize_configs_are_equal’ [-Wnested-externs]
cache.c: In function ‘check_auto_cache_resize_aux_fcns’:
cache.c:28182:30: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         } else if ( hit_rate > FP_EPSILON ) {   /* i.e. hit_rate != 0.0 */
                              ^
cache.c:28215:30: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         } else if ( hit_rate > FP_EPSILON ) {   /* i.e. hit_rate != 0.0 */
                              ^
In file included from cache.c:23:0:
h5test.h:135:41: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                         ^
cache.c:28260:23: note: in expansion of macro ‘DBL_REL_EQUAL’
         } else if ( ! DBL_REL_EQUAL(hit_rate, 0.5f, FP_EPSILON) ) { /* i.e. hit_rate != 0.5 */
                       ^
h5test.h:135:47: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
cache.c:28260:23: note: in expansion of macro ‘DBL_REL_EQUAL’
         } else if ( ! DBL_REL_EQUAL(hit_rate, 0.5f, FP_EPSILON) ) { /* i.e. hit_rate != 0.5 */
                       ^
h5test.h:135:41: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                         ^
cache.c:28343:23: note: in expansion of macro ‘DBL_REL_EQUAL’
         } else if ( ! DBL_REL_EQUAL(hit_rate, 0.5F, FP_EPSILON) ) { /* i.e. hit_rate != 0.5 */
                       ^
h5test.h:135:47: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
cache.c:28343:23: note: in expansion of macro ‘DBL_REL_EQUAL’
         } else if ( ! DBL_REL_EQUAL(hit_rate, 0.5F, FP_EPSILON) ) { /* i.e. hit_rate != 0.5 */
                       ^
cache.c: In function ‘check_metadata_blizzard_absence’:
cache.c:28626:34: warning: size of ‘expected’ is 4800 bytes [-Wlarger-than=]
     struct expected_entry_status expected[150] =
                                  ^
cache.c: In function ‘check_flush_cache__single_entry’:
cc1: warning: size of ‘*.LC4’ is 12288 bytes [-Wlarger-than=]
cache.c: In function ‘check_metadata_blizzard_absence’:
cc1: warning: size of ‘*.LC27’ is 4800 bytes [-Wlarger-than=]
cache.c: In function ‘check_resize_entry’:
cache.c:15138:44: warning: ‘entry_ptr’ may be used uninitialized in this function [-Wmaybe-uninitialized]
                     ( entry_ptr->cleared ) ||
                                            ^
cache.c: In function ‘check_flush_cache__single_entry’:
cache.c:10889:1: warning: stack usage is 12432 bytes [-Wstack-usage=]
 check_flush_cache__single_entry(H5F_t * file_ptr)
 ^
  CCLD     cache
  CC       cache_api.o
In file included from cache_api.c:26:0:
cache_api.c: In function ‘check_fapl_mdc_api_calls’:
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_api.c:154:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_api.c:188:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_api.c:265:2: warning: implicit declaration of function ‘resize_configs_are_equal’ [-Wimplicit-function-declaration]
  if ( ! resize_configs_are_equal(&default_auto_size_ctl, \
  ^
cache_api.c:265:2: warning: nested extern declaration of ‘resize_configs_are_equal’ [-Wnested-externs]
In file included from cache_api.c:26:0:
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_api.c:300:21: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if (!CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE)) {
                     ^
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_api.c:449:23: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
         } else if ( ! CACHE_CONFIGS_EQUAL(mod_config, scratch, TRUE, TRUE) ) {
                       ^
cache_api.c: In function ‘check_file_mdc_api_calls’:
cache_api.c:776:30: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         } else if ( hit_rate != 0.0f ) {
                              ^
cache_api.c:776:30: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
cache_api.c: In function ‘mdc_api_call_smoke_check’:
cache_api.c:1186:17: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 offset[0] = i; /*offset of hyperslab in file*/
                 ^
cache_api.c:1187:17: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 offset[1] = j;
                 ^
cache_api.c:1257:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         offset[0] = i; /*offset of hyperslab in file*/
         ^
cache_api.c:1258:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         offset[1] = j;
         ^
cache_api.c:1382:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         offset[0] = i; /*offset of hyperslab in file*/
         ^
cache_api.c:1383:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         offset[1] = j;
         ^
cache_api.c: At top level:
cache_api.c:1528:21: warning: size of ‘invalid_configs’ is 51408 bytes [-Wlarger-than=]
 H5AC_cache_config_t invalid_configs[NUM_INVALID_CONFIGS] =
                     ^
In file included from cache_api.c:26:0:
cache_api.c: In function ‘check_fapl_mdc_api_errs’:
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_api.c:3069:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_api.c:3158:15: note: in expansion of macro ‘CACHE_CONFIGS_EQUAL’
            ( !CACHE_CONFIGS_EQUAL(default_config, scratch, TRUE, TRUE) ) ) ) {
               ^
  CCLD     cache_api
  CC       pool.o
In file included from h5test.h:26:0,
                 from pool.c:19:
pool.c: In function ‘test_allocate_random’:
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
pool.c:674:29: note: in expansion of macro ‘HDrandom’
         swap_idx = (size_t)(HDrandom() % (MPOOL_NUM_RANDOM - u)) + u;
                             ^
  CCLD     pool
  CC       accum.o
  CCLD     accum
  CC       hyperslab.o
hyperslab.c: In function ‘test_fill’:
hyperslab.c:226:43: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
                                 ref_value += fill_value * dx * dy * dz;
                                           ^
hyperslab.c: In function ‘test_transpose’:
hyperslab.c:822:21: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     dst_stride[0] = (ssize_t)((1 - nx * ny) * sizeof(*src));
                     ^
hyperslab.c:823:21: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     dst_stride[1] = (ssize_t)(nx * sizeof(*src));
                     ^
hyperslab.c: In function ‘test_sub_super’:
hyperslab.c:926:21: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     src_stride[0] = (ssize_t)(2 * ny);
                     ^
hyperslab.c:975:21: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     dst_stride[0] = (ssize_t)(2 * ny);
                     ^
hyperslab.c:976:21: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     dst_stride[1] = (ssize_t)(2 * sizeof(uint8_t) - 4 * ny);
                     ^
hyperslab.c:977:21: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     dst_stride[2] = (ssize_t)(2 * ny - 2 * sizeof(uint8_t));
                     ^
In file included from h5test.h:26:0,
                 from hyperslab.c:25:
hyperslab.c: In function ‘test_array_offset_n_calc’:
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
hyperslab.c:1147:32: note: in expansion of macro ‘HDrandom’
         coords[0] = (hssize_t)(HDrandom() % z);
                                ^
hyperslab.c:1147:21: warning: conversion to ‘hsize_t’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
         coords[0] = (hssize_t)(HDrandom() % z);
                     ^
In file included from h5test.h:26:0,
                 from hyperslab.c:25:
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
hyperslab.c:1148:32: note: in expansion of macro ‘HDrandom’
         coords[1] = (hssize_t)(HDrandom() % y);
                                ^
hyperslab.c:1148:21: warning: conversion to ‘hsize_t’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
         coords[1] = (hssize_t)(HDrandom() % y);
                     ^
In file included from h5test.h:26:0,
                 from hyperslab.c:25:
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
hyperslab.c:1149:32: note: in expansion of macro ‘HDrandom’
         coords[2] = (hssize_t)(HDrandom() % x);
                                ^
hyperslab.c:1149:21: warning: conversion to ‘hsize_t’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
         coords[2] = (hssize_t)(HDrandom() % x);
                     ^
  CCLD     hyperslab
  CC       istore.o
In file included from h5test.h:26:0,
                 from istore.c:24:
istore.c: In function ‘test_sparse’:
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
istore.c:532:24: note: in expansion of macro ‘HDrandom’
  offset[0] = (hsize_t)(HDrandom() % (TEST_SPARSE_SIZE-nx));
                        ^
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
istore.c:533:24: note: in expansion of macro ‘HDrandom’
  offset[1] = (hsize_t)(HDrandom() % (TEST_SPARSE_SIZE-ny));
                        ^
../src/H5private.h:1097:37: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
istore.c:534:24: note: in expansion of macro ‘HDrandom’
  offset[2] = (hsize_t)(HDrandom() % (TEST_SPARSE_SIZE-nz));
                        ^
  CCLD     istore
  CC       bittests.o
bittests.c: In function ‘test_find’:
bittests.c:91:16: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
  v1[i / 8] = 1 << (i % 8);
                ^
bittests.c:124:10: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
  v1[i/8] &= ~(1<<(i%8));
          ^
bittests.c: In function ‘test_copy’:
bittests.c:178:19: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  s_offset = HDrand() % (8*sizeof v1);
                   ^
bittests.c:179:19: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  d_offset = HDrand() % (8*sizeof v2);
                   ^
bittests.c: In function ‘test_shift’:
bittests.c:300:17: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  offset = HDrand() % (8*sizeof vector);
                 ^
bittests.c:304:28: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         shift_dist = HDrand() % size;
                            ^
bittests.c:304:31: warning: conversion to ‘ssize_t’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         shift_dist = HDrand() % size;
                               ^
bittests.c:314:2: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
  if ((size_t)n!=offset+shift_dist) {
  ^
bittests.c:353:2: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
  if (n!=(ssize_t)(offset+size-shift_dist-1)) {
  ^
bittests.c:365:13: warning: conversion to ‘ssize_t’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
             shift_dist = size;
             ^
bittests.c: In function ‘test_increment’:
bittests.c:433:17: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  offset = HDrand() % (8*sizeof vector);
                 ^
bittests.c: In function ‘test_decrement’:
bittests.c:520:17: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  offset = HDrand() % (8*sizeof vector);
                 ^
bittests.c: In function ‘test_negate’:
bittests.c:592:17: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  offset = HDrand() % (8*sizeof vector);
                 ^
bittests.c: In function ‘test_set’:
bittests.c:692:19: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  d_offset = HDrand() % (8*sizeof v2);
                   ^
bittests.c: In function ‘test_clear’:
bittests.c:809:19: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  d_offset = HDrand() % (8*sizeof v2);
                   ^
  CCLD     bittests
  CC       dt_arith.o
dt_arith.c: In function ‘some_dummy_func’:
dt_arith.c:535:5: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
     HDsnprintf(s, sizeof(s), "%g", x);
     ^
dt_arith.c: In function ‘test_particular_fp_integer’:
dt_arith.c:829:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
         printf(" %29.20e\n", x);
         ^
dt_arith.c: In function ‘test_conv_int_1’:
dt_arith.c:1774:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1774:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1774:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1774:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1774:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:1774:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1774:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1774:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1774:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:1774:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1776:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1776:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1776:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1776:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1776:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:1776:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1776:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1776:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
dt_arith.c:1776:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1776:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:1776:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1778:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1778:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1778:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1778:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1778:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:1778:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1778:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1778:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1778:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:1778:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1780:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1780:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1780:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1780:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1780:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:1780:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:1780:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1780:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
dt_arith.c:1780:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:1780:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:1780:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1784:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         INIT_INTEGER(unsigned int, UINT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1784:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:1784:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:1788:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         INIT_INTEGER(unsigned long, ULONG_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1788:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:1788:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:1792:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         INIT_INTEGER(unsigned long long, ULLONG_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:1792:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:1792:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c: In function ‘test_conv_int_2’:
dt_arith.c:2639:10: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     char buf[32*100];
          ^
dt_arith.c: In function ‘my_isnan’:
dt_arith.c:2693:13: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  retval = (x!=x);
             ^
dt_arith.c:2697:13: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  retval = (x!=x);
             ^
dt_arith.c:2702:13: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  retval = (x!=x);
             ^
dt_arith.c:2717:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
      HDsnprintf(s, sizeof(s), "%g", x);
      ^
dt_arith.c: In function ‘test_conv_flt_1’:
dt_arith.c:3058:57: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                 underflow = HDfabs(*((double*)aligned)) < FLT_MIN;
                                                         ^
dt_arith.c:3059:56: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                 overflow = HDfabs(*((double*)aligned)) > FLT_MAX;
                                                        ^
dt_arith.c:3073:24: warning: conversion to ‘float’ from ‘long double’ may alter its value [-Wconversion]
                 hw_f = *((long double*)aligned);
                        ^
dt_arith.c:3078:24: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wconversion]
                 hw_d = *((long double*)aligned);
                        ^
In file included from h5test.h:26:0,
                 from dt_arith.c:25:
../src/H5private.h:796:40: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wconversion]
         #define HDfrexpl(X,N)    frexpl(X,N)
                                        ^
dt_arith.c:3191:33: note: in expansion of macro ‘HDfrexpl’
                 check_mant[0] = HDfrexpl(x, check_expo+0);
                                 ^
../src/H5private.h:796:40: warning: conversion to ‘double’ from ‘long double’ may alter its value [-Wconversion]
         #define HDfrexpl(X,N)    frexpl(X,N)
                                        ^
dt_arith.c:3192:33: note: in expansion of macro ‘HDfrexpl’
                 check_mant[1] = HDfrexpl(hw_ld, check_expo+1);
                                 ^
In file included from h5test.h:26:0,
                 from dt_arith.c:25:
dt_arith.c:3198:74: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 int valid_bits=(int)((dst_ebias+dst_msize)+MIN(check_expo[0],check_expo[1]))-1;
                                                                          ^
../src/H5private.h:321:35: note: in definition of macro ‘MIN’
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                   ^
dt_arith.c:3198:88: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 int valid_bits=(int)((dst_ebias+dst_msize)+MIN(check_expo[0],check_expo[1]))-1;
                                                                                        ^
../src/H5private.h:321:41: note: in definition of macro ‘MIN’
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                         ^
dt_arith.c:3214:60: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                         HDfabs(check_mant[0]-check_mant[1])<FP_EPSILON)
                                                            ^
dt_arith.c:3235:13: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
             printf(" %29.20e\n", x);
             ^
dt_arith.c:3255:13: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
             printf(" %29.20e\n", x);
             ^
dt_arith.c:3273:13: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
             printf(" %29.20e\n", hw_f);
             ^
dt_arith.c: In function ‘test_conv_int_fp’:
dt_arith.c:3618:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3618:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3618:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3618:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3618:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:3618:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3618:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3618:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3618:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘signed char’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:3618:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(signed char, SCHAR_MAX, SCHAR_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3620:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3620:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3620:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3620:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3620:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:3620:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3620:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3620:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
dt_arith.c:3620:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3620:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:3620:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned char, UCHAR_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3622:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3622:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3622:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3622:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3622:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:3622:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3622:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3622:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3622:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:3622:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(short, SHRT_MAX, SHRT_MIN, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3624:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3624:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3624:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3624:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:144:20: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3624:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:145:35: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value2 = (value1 - 1) | value1;                                                     \
                                   ^
dt_arith.c:3624:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:147:20: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value1 <<= 1;                                                                       \
                    ^
dt_arith.c:3624:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3624:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
dt_arith.c:3624:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:3624:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]
dt_arith.c:162:20: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
             value2 <<= 1;                                                                       \
                    ^
dt_arith.c:3624:9: note: in expansion of macro ‘INIT_INTEGER’
         INIT_INTEGER(unsigned short, USHRT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3628:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         INIT_INTEGER(unsigned int, UINT_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3628:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:3628:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:3632:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         INIT_INTEGER(unsigned long, ULONG_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3632:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:3632:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:3636:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
         INIT_INTEGER(unsigned long long, ULLONG_MAX, 0, src_size, dst_size, src_nbits, buf, saved, nelmts);
         ^
dt_arith.c:3636:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:3636:9: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
dt_arith.c:4175:28: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
             for(q=dst_nbits/8; q<dst_size; q++) {
                            ^
dt_arith.c:4353:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 printf(" %29f\n", *((float*)aligned));
                 ^
dt_arith.c:4418:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 printf(" %29f\n", *((float*)aligned));
                 ^
dt_arith.c:4466:17: warning: format ‘%ld’ expects argument of type ‘long int’, but argument 2 has type ‘long long int’ [-Wformat=]
                 printf(" %29"H5_PRINTF_LL_WIDTH"d\n", *((long long*)hw));
                 ^
dt_arith.c:4469:17: warning: format ‘%lu’ expects argument of type ‘long unsigned int’, but argument 2 has type ‘long long unsigned int’ [-Wformat=]
                 printf(" %29"H5_PRINTF_LL_WIDTH"u\n", *((unsigned long long*)hw));
                 ^
dt_arith.c:4472:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 printf(" %29f\n", *((float*)hw));
                 ^
dt_arith.c:4303:2: warning: label ‘printing’ defined but not used [-Wunused-label]
  printing:
  ^
dt_arith.c: In function ‘main’:
dt_arith.c:5135:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_hard_query();
                               ^
dt_arith.c:5139:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_derived_flt();
                                ^
dt_arith.c:5143:36: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_derived_integer();
                                    ^
dt_arith.c:5149:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_fp_tests("noop");
                            ^
dt_arith.c:5152:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_fp_tests("hard");
                            ^
dt_arith.c:5155:33: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_integer_tests("hard");
                                 ^
dt_arith.c:5158:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_int_fp_conv("hard");
                               ^
dt_arith.c:5161:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_fp_int_conv("hard");
                               ^
dt_arith.c:5164:42: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_particular_fp_integer();
                                          ^
dt_arith.c:5174:28: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_fp_tests("soft");
                            ^
dt_arith.c:5177:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_conv_int_2();
                               ^
dt_arith.c:5178:33: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_integer_tests("soft");
                                 ^
dt_arith.c:5181:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_fp_int_conv("soft");
                               ^
dt_arith.c:5184:31: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += run_int_fp_conv("soft");
                               ^
dt_arith.c: In function ‘test_conv_flt_1’:
dt_arith.c:3181:20: warning: ‘overflow’ may be used uninitialized in this function [-Wmaybe-uninitialized]
                 if (overflow && my_isinf(dendian, buf+j*sizeof(double),
                    ^
dt_arith.c: In function ‘test_conv_int_fp’:
dt_arith.c:4196:13: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
             for (k = 0; k < src_size; k += 2) {
             ^
  CCLD     dt_arith
  CC       dtypes.o
dtypes.c: In function ‘test_compound_9’:
dtypes.c:1648:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     cmpd_struct wdata = {11, "variable-length string", 22};
     ^
dtypes.c: In function ‘test_compound_10’:
dtypes.c:1867:25: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         wdata[i].str[9] += (char)i;
                         ^
dtypes.c:1872:43: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         ((char*)(wdata[i].text.p))[len-2] += (char)i;
                                           ^
dtypes.c: In function ‘test_compound_11’:
dtypes.c:2111:37: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if(((big_t *)buf_orig)[u].d1!=((little_t *)buf)[u].d1) {
                                     ^
dtypes.c:2151:37: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if(((big_t *)buf_orig)[u].d1!=((little_t *)buf)[u].d1) {
                                     ^
dtypes.c:2185:37: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if(((big_t *)buf_orig)[u].d1!=((little_t *)buf)[u].d1) {
                                     ^
dtypes.c: In function ‘test_compound_13’:
dtypes.c:2402:19: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(data_out.y != data_in.y) TEST_ERROR
                   ^
dtypes.c: In function ‘test_compound_14’:
dtypes.c:2456:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     cmpd_struct_1 wdata1 = {'A', 'B', "variable-length string"};
     ^
dtypes.c:2459:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     cmpd_struct_2 wdata2 = {'C', 'D', "another vlen!", 1, 2, -1, 9001};
     ^
dtypes.c: In function ‘test_int_float_except’:
dtypes.c:5965:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if(*floatp != buf_float[u]) TEST_ERROR
                    ^
dtypes.c:5986:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if(*floatp != buf2_float[u]) TEST_ERROR
                    ^
dtypes.c: In function ‘create_del_obj_named_test_file’:
dtypes.c:6675:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status;      /* Generic return value */
            ^
dtypes.c: In function ‘test_utf_ascii_conv’:
dtypes.c:7215:55: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
         status = H5Tconvert(utf8_vtid, ascii_vtid, 1, (void *)utf8_w, NULL, H5P_DEFAULT);
                                                       ^
dtypes.c:7248:55: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
         status = H5Tconvert(ascii_vtid, utf8_vtid, 1, (void *)ascii_w, NULL, H5P_DEFAULT);
                                                       ^
In file included from dtypes.c:26:0:
dtypes.c: At top level:
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     dtypes
  CC       dsets.o
dsets.c:207:5: warning: size of ‘points’ is 80000 bytes [-Wlarger-than=]
 int points[DSET_DIM1][DSET_DIM2], check[DSET_DIM1][DSET_DIM2];
     ^
dsets.c:207:35: warning: size of ‘check’ is 80000 bytes [-Wlarger-than=]
 int points[DSET_DIM1][DSET_DIM2], check[DSET_DIM1][DSET_DIM2];
                                   ^
dsets.c:208:8: warning: size of ‘points_dbl’ is 160000 bytes [-Wlarger-than=]
 double points_dbl[DSET_DIM1][DSET_DIM2], check_dbl[DSET_DIM1][DSET_DIM2];
        ^
dsets.c:208:42: warning: size of ‘check_dbl’ is 160000 bytes [-Wlarger-than=]
 double points_dbl[DSET_DIM1][DSET_DIM2], check_dbl[DSET_DIM1][DSET_DIM2];
                                          ^
dsets.c: In function ‘test_simple_io’:
dsets.c:403:25: warning: size of ‘rdata’ is 80000 bytes [-Wlarger-than=]
     int                 rdata[DSET_DIM1][DSET_DIM2];
                         ^
dsets.c: In function ‘test_userblock_offset’:
dsets.c:522:25: warning: size of ‘rdata’ is 80000 bytes [-Wlarger-than=]
     int                 rdata[DSET_DIM1][DSET_DIM2];
                         ^
dsets.c: In function ‘test_conv_buffer’:
dsets.c:1030:30: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
  cf->b[j] = (float)(100.0f*(j+1) + 0.01f*j);
                              ^
dsets.c:1030:2: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
  cf->b[j] = (float)(100.0f*(j+1) + 0.01f*j);
  ^
dsets.c:1033:22: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
  cf->c[j] = 100.0f*(j+1) + 0.02f*j;
                      ^
dsets.c:1033:2: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
  cf->c[j] = 100.0f*(j+1) + 0.02f*j;
  ^
dsets.c: In function ‘test_nbit_int’:
dsets.c:2742:28: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                            (long long)HDpow(2.0f, (double)(precision - 1))) << offset);
                            ^
dsets.c:2780:28: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             if((new_data[i][j] & mask) != (orig_data[i][j] & mask)) {
                            ^
dsets.c:2780:56: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             if((new_data[i][j] & mask) != (orig_data[i][j] & mask)) {
                                                        ^
dsets.c: In function ‘test_nbit_float’:
dsets.c:2890:33: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(!(orig_data[i][j]==orig_data[i][j])) continue;  /* skip if value is NaN */
                                 ^
dsets.c:2891:31: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(new_data[i][j] != orig_data[i][j]) {
                               ^
dsets.c: In function ‘test_nbit_double’:
dsets.c:3015:33: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(!(orig_data[i][j]==orig_data[i][j])) continue;  /* skip if value is NaN */
                                 ^
dsets.c:3016:31: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(new_data[i][j] != orig_data[i][j]) {
                               ^
dsets.c: In function ‘test_nbit_array’:
dsets.c:3109:38: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                      (long long)HDpow(2.0F, (double)precision)) << offset);
                                      ^
dsets.c: In function ‘test_nbit_compound’:
dsets.c:3268:30: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                              (long long)HDpow(2.0F, (double)(precision[0]-1))) << offset[0]);
                              ^
dsets.c:3270:30: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                              (long long)HDpow(2.0F, (double)(precision[1]-1))) << offset[1]);
                              ^
dsets.c:3272:30: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                              (long long)HDpow(2.0F, (double)(precision[2]-1))) << offset[2]);
                              ^
dsets.c:3315:31: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             if((new_data[i][j].i & i_mask) != (orig_data[i][j].i & i_mask) ||
                               ^
dsets.c:3315:63: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             if((new_data[i][j].i & i_mask) != (orig_data[i][j].i & i_mask) ||
                                                               ^
dsets.c:3316:17: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
                 (new_data[i][j].c & c_mask) != (orig_data[i][j].c & c_mask) ||
                 ^
dsets.c:3316:17: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
dsets.c:3317:17: warning: conversion to ‘unsigned int’ from ‘short int’ may change the sign of the result [-Wsign-conversion]
                 (new_data[i][j].s & s_mask) != (orig_data[i][j].s & s_mask) ||
                 ^
dsets.c:3317:17: warning: conversion to ‘unsigned int’ from ‘short int’ may change the sign of the result [-Wsign-conversion]
dsets.c:3318:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                 (orig_data[i][j].f==orig_data[i][j].f && new_data[i][j].f != orig_data[i][j].f))
                                   ^
dsets.c:3318:75: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                 (orig_data[i][j].f==orig_data[i][j].f && new_data[i][j].f != orig_data[i][j].f))
                                                                           ^
dsets.c: In function ‘test_nbit_compound_2’:
dsets.c:3494:32: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                (long long)HDpow(2.0F, (double)(precision[0]-1))) << offset[0]);
                                ^
dsets.c:3496:32: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                (long long)HDpow(2.0F, (double)(precision[1]-1))) << offset[1]);
                                ^
dsets.c:3498:32: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                (long long)HDpow(2.0F, (double)(precision[2]-1))) << offset[2]);
                                ^
dsets.c:3502:30: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                              (long long)HDpow(2.0F, (double)precision[3])) << offset[3]);
                              ^
dsets.c:3507:40: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                        (long long)HDpow(2.0F, (double)(precision[4]-1))) << offset[4]);
                                        ^
dsets.c:3512:42: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                          (long long)HDpow(2.0F, (double)(precision[0]-1))) << offset[0]);
                                          ^
dsets.c:3514:42: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                          (long long)HDpow(2.0F, (double)(precision[1]-1))) << offset[1]);
                                          ^
dsets.c:3516:42: warning: cast from function call of type ‘double’ to non-matching type ‘long long int’ [-Wbad-function-cast]
                                          (long long)HDpow(2.0F, (double)(precision[2]-1))) << offset[2]);
                                          ^
dsets.c:3571:14: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
              if((new_data[i][j].b[m][n]&b_mask)!=(orig_data[i][j].b[m][n]&b_mask)) {
              ^
dsets.c:3571:14: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
dsets.c:3578:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
              if((new_data[i][j].d[m][n].i & i_mask)!=(orig_data[i][j].d[m][n].i & i_mask)||
                                        ^
dsets.c:3578:78: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
              if((new_data[i][j].d[m][n].i & i_mask)!=(orig_data[i][j].d[m][n].i & i_mask)||
                                                                              ^
dsets.c:3579:17: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
                 (new_data[i][j].d[m][n].c & c_mask)!=(orig_data[i][j].d[m][n].c & c_mask)||
                 ^
dsets.c:3579:17: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
dsets.c:3580:17: warning: conversion to ‘unsigned int’ from ‘short int’ may change the sign of the result [-Wsign-conversion]
                 (new_data[i][j].d[m][n].s & s_mask)!=(orig_data[i][j].d[m][n].s & s_mask)||
                 ^
dsets.c:3580:17: warning: conversion to ‘unsigned int’ from ‘short int’ may change the sign of the result [-Wsign-conversion]
dsets.c:3581:42: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                 (new_data[i][j].d[m][n].f==new_data[i][j].d[m][n].f &&
                                          ^
dsets.c:3582:43: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                  new_data[i][j].d[m][n].f != new_data[i][j].d[m][n].f)) {
                                           ^
dsets.c:3588:29: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         if((new_data[i][j].a.i & i_mask)!=(orig_data[i][j].a.i & i_mask)||
                             ^
dsets.c:3588:61: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         if((new_data[i][j].a.i & i_mask)!=(orig_data[i][j].a.i & i_mask)||
                                                             ^
dsets.c:3589:12: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
            (new_data[i][j].a.c & c_mask)!=(orig_data[i][j].a.c & c_mask)||
            ^
dsets.c:3589:12: warning: conversion to ‘unsigned int’ from ‘char’ may change the sign of the result [-Wsign-conversion]
dsets.c:3590:12: warning: conversion to ‘unsigned int’ from ‘short int’ may change the sign of the result [-Wsign-conversion]
            (new_data[i][j].a.s & s_mask)!=(orig_data[i][j].a.s & s_mask)||
            ^
dsets.c:3590:12: warning: conversion to ‘unsigned int’ from ‘short int’ may change the sign of the result [-Wsign-conversion]
dsets.c:3591:31: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
            (new_data[i][j].a.f==new_data[i][j].a.f &&
                               ^
dsets.c:3592:32: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             new_data[i][j].a.f != new_data[i][j].a.f)||
                                ^
dsets.c: In function ‘test_nbit_compound_3’:
dsets.c:3712:39: warning: cast from function call of type ‘double’ to non-matching type ‘long int’ [-Wbad-function-cast]
         orig_data[i].i = HDrandom() % (long)HDpow(2.0F, 17.0F - 1.0F);
                                       ^
dsets.c:3712:37: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
         orig_data[i].i = HDrandom() % (long)HDpow(2.0F, 17.0F - 1.0F);
                                     ^
dsets.c: In function ‘test_nbit_int_size’:
dsets.c:3830:13: warning: size of ‘orig_data’ is 80000 bytes [-Wlarger-than=]
     int     orig_data[DSET_DIM1][DSET_DIM2];
             ^
dsets.c:3882:39: warning: cast from function call of type ‘double’ to non-matching type ‘int’ [-Wbad-function-cast]
            orig_data[i][j] = rand() % (int)pow((double)2, (double)(precision-1)) << offset;
                                       ^
dsets.c: In function ‘test_nbit_flt_size’:
dsets.c:3995:13: warning: size of ‘orig_data’ is 80000 bytes [-Wlarger-than=]
     float   orig_data[DSET_DIM1][DSET_DIM2];
             ^
dsets.c:4080:49: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
            orig_data[i][j] = (rand() % 1234567) / 2;
                                                 ^
dsets.c: In function ‘test_scaleoffset_float’:
dsets.c:4464:47: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         orig_data[i][j] = (float)((HDrandom() % 100000) / 1000.0F);
                                               ^
dsets.c: In function ‘test_scaleoffset_float_2’:
dsets.c:4595:47: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         orig_data[0][j] = (float)((HDrandom() % 100000) / 1000.0F);
                                               ^
dsets.c: In function ‘test_scaleoffset_double’:
dsets.c:4706:39: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         orig_data[i][j] = (HDrandom() % 10000000) / 10000000.0F;
                                       ^
dsets.c: In function ‘test_scaleoffset_double_2’:
dsets.c:4837:39: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         orig_data[0][j] = (HDrandom() % 10000000) / 10000000.0F;
                                       ^
In file included from dsets.c:26:0:
dsets.c: In function ‘test_set_local’:
h5test.h:135:47: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
dsets.c:5835:17: note: in expansion of macro ‘DBL_REL_EQUAL’
             if(!DBL_REL_EQUAL(points_dbl[i][j],check_dbl[i][j],0.00001F)) {
                 ^
dsets.c: In function ‘test_deprec’:
dsets.c:6816:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status;
            ^
dsets.c: In function ‘test_chunk_cache’:
dsets.c:7158:17: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
     w0_2 = w0_1 / 2.0F;
                 ^
dsets.c: In function ‘test_big_chunks_bypass_cache’:
dsets.c:7339:44: warning: size of ‘rdata1’ is 4000 bytes [-Wlarger-than=]
     static int  wdata[BYPASS_CHUNK_DIM/2], rdata1[BYPASS_DIM],
                                            ^
dsets.c: In function ‘test_chunk_expand’:
dsets.c:7583:93: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(alloc_time = H5D_ALLOC_TIME_EARLY; alloc_time <= H5D_ALLOC_TIME_INCR; alloc_time++) {
                                                                                             ^
In file included from dsets.c:27:0:
dsets.c: At top level:
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
dsets.c: In function ‘test_simple_io’:
dsets.c:394:1: warning: stack usage is 81136 bytes [-Wstack-usage=]
 test_simple_io(const char *env_h5_drvr, hid_t fapl)
 ^
dsets.c:496:1: warning: the frame size of 81052 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
dsets.c: In function ‘test_nbit_int_size’:
dsets.c:3825:1: warning: stack usage is 80112 bytes [-Wstack-usage=]
 test_nbit_int_size(hid_t file)
 ^
dsets.c:3971:1: warning: the frame size of 80040 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
dsets.c: In function ‘test_nbit_flt_size’:
dsets.c:3990:1: warning: stack usage is 80112 bytes [-Wstack-usage=]
 test_nbit_flt_size(hid_t file)
 ^
dsets.c:4168:1: warning: the frame size of 80032 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
dsets.c: In function ‘test_userblock_offset’:
dsets.c:514:1: warning: stack usage is 81088 bytes [-Wstack-usage=]
 test_userblock_offset(const char *env_h5_drvr, hid_t fapl)
 ^
dsets.c:586:1: warning: the frame size of 81040 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
dsets.c: In function ‘filter_bogus2’:
dsets.c:1360:18: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
             while(buf_left>0) {
                  ^
  CCLD     dsets
  CC       cmpd_dset.o
cmpd_dset.c: In function ‘test_compound’:
cmpd_dset.c:154:18: warning: size of ‘s1’ is 6400000 bytes [-Wlarger-than=]
     static s1_t  s1[NX*NY];
                  ^
cmpd_dset.c:158:18: warning: size of ‘s2’ is 6400000 bytes [-Wlarger-than=]
     static s2_t  s2[NX*NY];
                  ^
cmpd_dset.c:162:18: warning: size of ‘s3’ is 6400000 bytes [-Wlarger-than=]
     static s3_t  s3[NX*NY];
                  ^
cmpd_dset.c:166:18: warning: size of ‘s4’ is 1600000 bytes [-Wlarger-than=]
     static s4_t  s4[NX*NY];
                  ^
cmpd_dset.c:170:18: warning: size of ‘s5’ is 9600000 bytes [-Wlarger-than=]
     static s5_t  s5[NX*NY];
                  ^
cmpd_dset.c:173:18: warning: size of ‘s6’ is 9600000 bytes [-Wlarger-than=]
     static s6_t  s6[NX*NY];
                  ^
cmpd_dset.c: In function ‘initialize_stype1’:
cmpd_dset.c:885:26: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         s_ptr->f    = i*2/3;
                          ^
cmpd_dset.c:886:28: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         s_ptr->g    = i*2/3+1;
                            ^
cmpd_dset.c:888:25: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
      s_ptr->h[j] = i*j/5+j;
                         ^
cmpd_dset.c:889:28: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         s_ptr->i    = i*2/3+2;
                            ^
cmpd_dset.c:890:28: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         s_ptr->j    = i*2/3+3;
                            ^
cmpd_dset.c: In function ‘initialize_stype2’:
cmpd_dset.c:921:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->a    = i*8+0;
                   ^
cmpd_dset.c:922:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->b    = i*8+1;
                   ^
cmpd_dset.c:924:23: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
      s_ptr->c[j] = i*8+j;
                       ^
cmpd_dset.c:925:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->d    = i*8+6;
                   ^
cmpd_dset.c:926:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->e    = i*8+7;
                   ^
cmpd_dset.c:928:26: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->f    = i*2/3;
                          ^
cmpd_dset.c:929:28: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->g    = i*2/3+1;
                            ^
cmpd_dset.c:931:25: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
      s_ptr->h[j] = i*j/5+j;
                         ^
cmpd_dset.c:932:28: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->i    = i*2/3+2;
                            ^
cmpd_dset.c:933:28: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->j    = i*2/3+3;
                            ^
cmpd_dset.c:935:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->k    = i/7+1;
                          ^
cmpd_dset.c:936:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->l    = i/7+2;
                          ^
cmpd_dset.c:937:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->m    = i/7+3;
                          ^
cmpd_dset.c:938:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->n    = i/7+4;
                          ^
cmpd_dset.c:940:26: warning: conversion to ‘long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->o    = i*3+0;
                          ^
cmpd_dset.c:941:26: warning: conversion to ‘long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->p    = i*3+1;
                          ^
cmpd_dset.c:942:26: warning: conversion to ‘long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->q    = i*3+2;
                          ^
cmpd_dset.c: In function ‘initialize_stype4’:
cmpd_dset.c:999:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->a    = i*8+0;
                   ^
cmpd_dset.c:1000:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->b    = i*8+1;
                   ^
cmpd_dset.c:1002:23: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
      s_ptr->c[j] = i*8+j;
                       ^
cmpd_dset.c:1003:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->d    = i*8+6;
                   ^
cmpd_dset.c:1004:19: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
  s_ptr->e    = i*8+7;
                   ^
cmpd_dset.c:1006:26: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->f    = i*2/3;
                          ^
cmpd_dset.c:1007:28: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->g    = i*2/3+1;
                            ^
cmpd_dset.c:1009:25: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
      s_ptr->h[j] = i*j/5+j;
                         ^
cmpd_dset.c:1010:28: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->i    = i*2/3+2;
                            ^
cmpd_dset.c:1011:28: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->j    = i*2/3+3;
                            ^
cmpd_dset.c:1013:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->k    = i/7+1;
                          ^
cmpd_dset.c:1014:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->l    = i/7+2;
                          ^
cmpd_dset.c:1015:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->m    = i/7+3;
                          ^
cmpd_dset.c:1016:26: warning: conversion to ‘double’ from ‘size_t’ may alter its value [-Wconversion]
         s_ptr->n    = i/7+4;
                          ^
cmpd_dset.c:1018:26: warning: conversion to ‘long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->o    = i*3+0;
                          ^
cmpd_dset.c:1019:26: warning: conversion to ‘long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->p    = i*3+1;
                          ^
cmpd_dset.c:1020:26: warning: conversion to ‘long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->q    = i*3+2;
                          ^
cmpd_dset.c:1022:26: warning: conversion to ‘long long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->r    = i*5+1;
                          ^
cmpd_dset.c:1023:26: warning: conversion to ‘long long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->s    = i*5+2;
                          ^
cmpd_dset.c:1024:26: warning: conversion to ‘long long int’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         s_ptr->t    = i*5+3;
                          ^
cmpd_dset.c: In function ‘compare_data’:
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                    s_ptr->h[15], s_ptr->i,s_ptr->j,s_ptr->k,s_ptr->l,s_ptr->m,s_ptr->n);
                    ^
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1307:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                    d_ptr->m,d_ptr->n);
                    ^
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c:1315:20: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
cmpd_dset.c: In function ‘test_pack_ooo’:
cmpd_dset.c:1791:19: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         j = HDrand() % num_free;
                   ^
cmpd_dset.c:1803:31: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     sub_cmpd_order = HDrand() % PACK_NMEMBS;
                               ^
cmpd_dset.c: In function ‘main’:
cmpd_dset.c:2195:29: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_compound(fname, fapl_id);
                             ^
cmpd_dset.c:2199:36: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_hdf5_src_subset(fname, fapl_id);
                                    ^
cmpd_dset.c:2203:36: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_hdf5_dst_subset(fname, fapl_id);
                                    ^
cmpd_dset.c:2206:29: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_pack_ooo();
                             ^
cmpd_dset.c:2209:30: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_ooo_order(fname);
                              ^
cmpd_dset.c: In function ‘test_hdf5_src_subset’:
cmpd_dset.c:888:23: warning: assuming signed overflow does not occur when simplifying division [-Wstrict-overflow]
      s_ptr->h[j] = i*j/5+j;
                       ^
cmpd_dset.c:888:23: warning: assuming signed overflow does not occur when simplifying division [-Wstrict-overflow]
cmpd_dset.c:888:23: warning: assuming signed overflow does not occur when simplifying division [-Wstrict-overflow]
  CCLD     cmpd_dset
  CC       filter_fail.o
In file included from filter_fail.c:25:0:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     filter_fail
  CC       extend.o
extend.c:34:14: warning: size of ‘buf1’ is 40000 bytes [-Wlarger-than=]
 static int   buf1[NY][NX], buf2[NX / 2][NY / 2];
              ^
extend.c:34:28: warning: size of ‘buf2’ is 10000 bytes [-Wlarger-than=]
 static int   buf1[NY][NX], buf2[NX / 2][NY / 2];
                            ^
  CCLD     extend
  CC       external.o
external.c: In function ‘test_2’:
external.c:612:14: warning: variable ‘n’ set but not used [-Wunused-but-set-variable]
     hssize_t n;   /*bytes of I/O   */
              ^
external.c: In function ‘test_3’:
external.c:780:9: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         whole[i] = i;
         ^
external.c:801:24: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         whole[i] = 100 + i;
                        ^
In file included from external.c:23:0:
external.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     external
  CC       efc.o
efc.c:36:13: warning: size of ‘filename’ is 6144 bytes [-Wlarger-than=]
 static char filename[6][1024];
             ^
  CCLD     efc
  CC       objcopy.o
objcopy.c: In function ‘compare_data’:
objcopy.c:1067:24: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
             ref_buf1 = (const hdset_reg_ref_t *)buf1;
                        ^
objcopy.c:1068:24: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
             ref_buf2 = (const hdset_reg_ref_t *)buf2;
                        ^
objcopy.c: In function ‘test_copy_dataset_compound’:
objcopy.c:2318:30: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         buf[i].d = 1.0F / (i + 1);
                              ^
objcopy.c: In function ‘test_copy_dataset_chunked’:
objcopy.c:2450:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         buf1d[i] = (float)(i / 2.0F);
         ^
objcopy.c:2452:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             buf2d[i][j] = (float)(i + (j / 100.0F));
             ^
objcopy.c:2452:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
objcopy.c: In function ‘test_copy_dataset_chunked_sparse’:
objcopy.c:2793:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         buf1d[i] = (float)(i / 10.0F);
         ^
objcopy.c:2795:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             buf2d[i][j] = (float)(i + (j / 100.0F));
             ^
objcopy.c:2795:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
objcopy.c: In function ‘test_copy_dataset_compact’:
objcopy.c:3117:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             buf[i][j] = (float)(i+j/100.0F);
             ^
objcopy.c:3117:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
objcopy.c: In function ‘test_copy_dataset_contig_cmpd_vl’:
objcopy.c:7597:22: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         buf[i].a = i * (i - 1);
                      ^
objcopy.c:7602:9: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         buf[i].c = 1.0F / (i + 1.0F);
         ^
objcopy.c: In function ‘test_copy_dataset_chunked_cmpd_vl’:
objcopy.c:7736:22: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         buf[i].a = i * (i - 1);
                      ^
objcopy.c:7741:9: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         buf[i].c = 1.0F / (i + 1.0F);
         ^
objcopy.c: In function ‘test_copy_dataset_compact_cmpd_vl’:
objcopy.c:7881:22: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         buf[i].a = i * (i - 1);
                      ^
objcopy.c:7886:9: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         buf[i].c = 1.0F / (i + 1.0F);
         ^
In file included from objcopy.c:25:0:
objcopy.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
objcopy.c: In function ‘addr_lookup.isra.0’:
objcopy.c:201:1: warning: function might be candidate for attribute ‘pure’ if it is known to return normally [-Wsuggest-attribute=pure]
 addr_lookup(H5O_info_t *oi)
 ^
  CCLD     objcopy
  CC       links.o
links.c: In function ‘external_link_dangling’:
links.c:2698:36: warning: conversion to ‘hid_t’ from ‘ssize_t’ may alter its value [-Wconversion]
         status = H5Lget_name_by_idx(rid, "no_file", H5_INDEX_NAME, H5_ITER_INC, 0, NULL, 0, H5P_DEFAULT);
                                    ^
links.c: In function ‘external_set_elink_fapl1’:
links.c:3500:17: warning: size of ‘sv’ is 3500 bytes [-Wlarger-than=]
     char        sv[H5FD_MEM_NTYPES][500];
                 ^
links.c: In function ‘external_set_elink_fapl2’:
links.c:3699:10: warning: size of ‘points’ is 6400 bytes [-Wlarger-than=]
     int  points[NUM40][NUM40];
          ^
links.c: In function ‘link_filters’:
links.c:9802:48: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                 > ((double)filesize_unfiltered * FILTER_FILESIZE_MAX_FRACTION))
                                                ^
links.c: In function ‘link_info_by_idx’:
links.c:11058:41: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                 ret = H5Lget_name_by_idx(group_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                         ^
links.c:11100:41: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                 ret = H5Lget_name_by_idx(group_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                         ^
links.c:11142:41: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                 ret = H5Lget_name_by_idx(group_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                         ^
links.c: In function ‘link_info_by_idx_old’:
links.c:11310:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Lget_name_by_idx(group_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
links.c: In function ‘link_iterate_check’:
links.c:12070:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_links - 1) - skip);
                                                                      ^
links.c:12070:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_links - 1) - skip);
     ^
links.c:12098:45: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = max_links / 2;
                                             ^
links.c:12098:33: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = max_links / 2;
                                 ^
links.c:12102:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? (unsigned)gskip : ((max_links - 1) - gskip);
     ^
links.c:12143:33: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = 0;
                                 ^
links.c: In function ‘link_iterate_old_check’:
links.c:12500:33: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = 0;
                                 ^
links.c:12520:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_links - 1) - skip);
                                                                      ^
links.c:12520:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_links - 1) - skip);
     ^
links.c:12548:45: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = max_links / 2;
                                             ^
links.c:12548:33: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = max_links / 2;
                                 ^
links.c:12552:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? (unsigned)gskip : ((max_links - 1) - gskip);
     ^
links.c:12593:33: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     iter_info->nskipped = gskip = 0;
                                 ^
In file included from links.c:31:0:
links.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
links.c: In function ‘external_set_elink_fapl2’:
links.c:3689:1: warning: stack usage is 10672 bytes [-Wstack-usage=]
 external_set_elink_fapl2(hid_t fapl, hbool_t new_format)
 ^
links.c: In function ‘external_set_elink_fapl1’:
links.c:3485:1: warning: stack usage is 8944 bytes [-Wstack-usage=]
 external_set_elink_fapl1(hid_t fapl, hbool_t new_format)
 ^
links.c: In function ‘external_symlink’:
links.c:6339:1: warning: stack usage is 11392 bytes [-Wstack-usage=]
 external_symlink(const char *env_h5_drvr, hid_t fapl, hbool_t new_format)
 ^
  CCLD     links
  CC       unlink.o
  CCLD     unlink
  CC       big.o
In file included from h5test.h:26:0,
                 from big.c:56:
big.c: In function ‘randll’:
../src/H5private.h:1097:37: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
big.c:132:15: note: in expansion of macro ‘HDrandom’
         acc = HDrandom();
               ^
../src/H5private.h:1097:37: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         #define HDrandom()    HDrand()
                                     ^
big.c:133:16: note: in expansion of macro ‘HDrandom’
         acc *= HDrandom();
                ^
big.c: In function ‘enough_room’:
big.c:297:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
         HDsnprintf(name, sizeof(name), filename, i);
         ^
big.c:297:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
big.c:312:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
         HDsnprintf(name, sizeof(name), filename, i);
         ^
big.c:312:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
big.c: In function ‘reader’:
big.c:511:33: warning: conversion to ‘hsize_t’ from ‘int64_t’ may change the sign of the result [-Wsign-conversion]
         hs_offset[0] = HDstrtoll(s, NULL, 0);
                                 ^
big.c: In function ‘main’:
big.c:804:5: warning: conversion to ‘unsigned int’ from ‘long unsigned int’ may alter its value [-Wconversion]
     HDsrandom(seed);
     ^
big.c: In function ‘writer.constprop.1’:
big.c:130:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     while(overlap != 0 && tries < MAX_TRIES)
                                 ^
  CCLD     big
  CC       mtime.o
mtime.c: In function ‘main’:
mtime.c:117:50: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
     } else if(HDfabs(HDdifftime(now, oi1.ctime)) > 60.0F) {
                                                  ^
In file included from mtime.c:26:0:
mtime.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     mtime
  CC       fillval.o
fillval.c: In function ‘test_create’:
fillval.c:626:19: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if( rd_c.a!=0 || rd_c.y != fill_ctype.y || rd_c.x != 0 || rd_c.z != '\0') {
                   ^
fillval.c:626:33: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         if( rd_c.a!=0 || rd_c.y != fill_ctype.y || rd_c.x != 0 || rd_c.z != '\0') {
                                 ^
fillval.c:630:19: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                   rd_c.a, rd_c.y, rd_c.x, rd_c.z);
                   ^
fillval.c:699:15: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(rd_c.a != 0 || rd_c.y != fill_ctype.y || rd_c.x != 0 || rd_c.z!='\0') {
               ^
fillval.c:699:30: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(rd_c.a != 0 || rd_c.y != fill_ctype.y || rd_c.x != 0 || rd_c.z!='\0') {
                              ^
fillval.c:703:3: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
   rd_c.a, rd_c.y, rd_c.x, rd_c.z);
   ^
fillval.c: In function ‘test_rdwr_cases’:
fillval.c:792:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % cur_size[j];
                         ^
fillval.c:814:57: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(fill_time!=H5D_FILL_TIME_NEVER && (rd_c.a!=fill_c.a ||
                                                         ^
fillval.c:815:29: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
   rd_c.x!=fill_c.x || rd_c.y!=fill_c.y ||
                             ^
fillval.c:824:4: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
    fill_c.a, fill_c.x, fill_c.y, fill_c.z);
    ^
fillval.c:824:4: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
fillval.c:848:13: warning: request for implicit conversion from ‘void *’ to ‘int *’ not permitted in C++ [-Wc++-compat]
         buf = HDmalloc((size_t)(nelmts * sizeof(int)));
             ^
fillval.c:882:31: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                 if(buf_c[u].a != fill_c.a || buf_c[u].x != fill_c.x ||
                               ^
fillval.c:883:36: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                         buf_c[u].y != fill_c.y || buf_c[u].z != fill_c.z) {
                                    ^
fillval.c:892:29: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                             fill_c.a, fill_c.x, fill_c.y, fill_c.z);
                             ^
fillval.c:892:29: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
fillval.c:941:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % cur_size[j];
                         ^
fillval.c:996:13: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
   if( rd_c.a!=should_be_c.a || rd_c.x!=should_be_c.x ||
             ^
fillval.c:997:13: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
       rd_c.y!=should_be_c.y || rd_c.z!=should_be_c.z)  {
             ^
fillval.c:1006:14: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
              should_be_c.x,should_be_c.y,should_be_c.z);
              ^
fillval.c:1006:14: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
fillval.c:1015:27: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                 if( rd_c.a!=should_be_c.a || rd_c.x!=should_be_c.x ||
                           ^
fillval.c:1016:27: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                     rd_c.y!=should_be_c.y || rd_c.z!=should_be_c.z)  {
                           ^
fillval.c:1025:28: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                            should_be_c.x,should_be_c.y,should_be_c.z);
                            ^
fillval.c:1025:28: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
fillval.c: In function ‘test_extend_cases’:
fillval.c:1443:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     comp_vl_datatype val_rd_c, init_val_c = {87, "baz", "mumble", 129};
     ^
fillval.c:1443:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
fillval.c:1498:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % start_size[j];
                         ^
fillval.c:1551:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % start_size[j];
                         ^
fillval.c:1589:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % extend_size[j];
                         ^
fillval.c:1628:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % max_size[j];
                         ^
fillval.c:1669:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % extend_size[j];
                         ^
fillval.c:1762:25: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
      hs_offset[j] = rand() % extend_size[j];
                         ^
fillval.c: In function ‘test_extend’:
fillval.c:1845:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
     comp_vl_datatype fillval_c = {32, "foo", "bar", 64};         /* Fill value for compound+vl datatype tests */
     ^
fillval.c:1845:5: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
In file included from fillval.c:23:0:
fillval.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
fillval.c: In function ‘test_rdwr_cases’:
fillval.c:886:30: warning: ‘fill_c.a’ may be used uninitialized in this function [-Wmaybe-uninitialized]
                     HDfprintf(stdout,"    Elmt={%Hu, %Hu, %Hu, %Hu, %Hu}, read: %f, %d, %f, %c"
                              ^
fillval.c:886:30: warning: ‘fill_c.x’ may be used uninitialized in this function [-Wmaybe-uninitialized]
fillval.c:886:30: warning: ‘fill_c.y’ may be used uninitialized in this function [-Wmaybe-uninitialized]
fillval.c:886:30: warning: ‘fill_c.z’ may be used uninitialized in this function [-Wmaybe-uninitialized]
  CCLD     fillval
  CC       mount.o
  CCLD     mount
  CC       flush1.o
flush1.c:35:15: warning: size of ‘the_data’ is 80000 bytes [-Wlarger-than=]
 static double the_data[100][100];
               ^
flush1.c: In function ‘create_file’:
flush1.c:77:43: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
      the_data[i][j] = (double)(hssize_t)i/(hssize_t)(j+1);
                                           ^
flush1.c: In function ‘extend_file’:
flush1.c:134:43: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
      the_data[i][j] = (double)(hssize_t)i/(hssize_t)(j+1);
                                           ^
  CCLD     flush1
  CC       flush2.o
flush2.c:34:16: warning: size of ‘the_data’ is 80000 bytes [-Wlarger-than=]
 static double  the_data[100][100];
                ^
flush2.c: In function ‘check_dset’:
flush2.c:75:78: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
             error = fabs(the_data[i][j] - (double)(hssize_t)i / ((hssize_t)j + 1));
                                                                              ^
flush2.c:76:22: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
             if(error > 0.0001F) {
                      ^
flush2.c:81:41: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
                     (double)(hssize_t)i/(hssize_t)(j+1));
                                         ^
  CCLD     flush2
  CC       app_ref.o
app_ref.c: In function ‘main’:
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:115:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_FILE)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:121:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_PLIST)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:128:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_PCLASS)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:134:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_TYPE)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:140:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_SPACE)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:147:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_DSET)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:154:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_ATTR)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:161:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_GROUP)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:167:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_ECLASS)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:173:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_EMSG)
     ^
app_ref.c:37:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:179:5: note: in expansion of macro ‘RAND_INC’
     RAND_INC (T_ESTACK)
     ^
  CCLD     app_ref
  CC       enum.o
  CCLD     enum
  CC       set_extent.o
set_extent.c: In function ‘test_random_rank4’:
set_extent.c:2677:17: warning: size of ‘rbuf’ is 40000 bytes [-Wlarger-than=]
     static int  rbuf[10][10][10][10];           /* Read buffer */
                 ^
set_extent.c:2678:17: warning: size of ‘wbuf’ is 40000 bytes [-Wlarger-than=]
     static int  wbuf[10][10][10][10];           /* Write buffer */
                 ^
set_extent.c:2679:20: warning: size of ‘dim_log’ is 3232 bytes [-Wlarger-than=]
     static hsize_t dim_log[RAND4_NITER+1][4];   /* Log of dataset dimensions */
                    ^
  CCLD     set_extent
  CC       ttsafe.o
ttsafe.c: In function ‘num_digits’:
ttsafe.c:49:1: warning: function might be candidate for attribute ‘const’ if it is known to return normally [-Wsuggest-attribute=const]
 num_digits(int num)
 ^
  CC       ttsafe_dcreate.o
  CC       ttsafe_error.o
  CC       ttsafe_cancel.o
  CC       ttsafe_acreate.o
  CCLD     ttsafe
  CC       getname.o
getname.c: In function ‘test_obj_ref’:
getname.c:2578:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(dataset2, (char*)buf, sizeof(buf));
                    ^
getname.c:2582:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[0], (char*)buf, sizeof(buf));
                    ^
getname.c:2590:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(dataset2, (char*)buf, sizeof(buf));
                    ^
getname.c:2594:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[1], (char*)buf, sizeof(buf));
                    ^
getname.c:2602:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(group, (char*)buf, sizeof(buf));
                    ^
getname.c:2606:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[2], (char*)buf, sizeof(buf));
                    ^
getname.c:2614:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(tid1, (char*)buf, sizeof(buf));
                    ^
getname.c:2618:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[3], (char*)buf, sizeof(buf));
                    ^
getname.c:2626:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(dataset2, (char*)buf, sizeof(buf));
                    ^
getname.c:2630:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[4], (char*)buf, sizeof(buf));
                    ^
getname.c:2638:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(group, (char*)buf, sizeof(buf));
                    ^
getname.c:2642:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[5], (char*)buf, sizeof(buf));
                    ^
getname.c:2650:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(dataset2, (char*)buf, sizeof(buf));
                    ^
getname.c:2654:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[6], (char*)buf, sizeof(buf));
                    ^
getname.c:2662:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(group, (char*)buf, sizeof(buf));
                    ^
getname.c:2666:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[7], (char*)buf, sizeof(buf));
                    ^
getname.c:2677:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(dataset2, (char*)buf, sizeof(buf));
                    ^
getname.c:2681:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[4], (char*)buf, sizeof(buf));
                    ^
getname.c:2693:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Iget_name(dataset2, (char*)buf, sizeof(buf));
                    ^
getname.c:2697:20: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     i = H5Rget_name(dataset, H5R_OBJECT, &wbuf[1], (char*)buf, sizeof(buf));
                    ^
  CCLD     getname
  CC       vfd.o
vfd.c: In function ‘test_family_opens’:
vfd.c:611:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(first_name, sizeof(first_name), fname, 0);
     ^
vfd.c:611:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
vfd.c: In function ‘test_family’:
vfd.c:682:17: warning: size of ‘buf’ is 16384 bytes [-Wlarger-than=]
     int         buf[FAMILY_NUMBER][FAMILY_SIZE];
                 ^
vfd.c: In function ‘test_family_compat’:
vfd.c:865:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(newname_individual, sizeof(newname_individual), newname, counter);
     ^
vfd.c:865:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
vfd.c:866:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(pathname_individual, sizeof(pathname_individual), pathname, counter);
     ^
vfd.c:866:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
vfd.c:870:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
         HDsnprintf(newname_individual, sizeof(newname_individual), newname, counter);
         ^
vfd.c:870:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
vfd.c:871:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
         HDsnprintf(pathname_individual, sizeof(pathname_individual), pathname, counter);
         ^
vfd.c:871:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
vfd.c: In function ‘test_multi_opens’:
vfd.c:940:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(sf_name, sizeof(sf_name), super_name, fname);
     ^
vfd.c:940:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
vfd.c: In function ‘test_multi’:
vfd.c:982:17: warning: size of ‘buf’ is 65536 bytes [-Wlarger-than=]
     int         buf[MULTI_SIZE][MULTI_SIZE];
                 ^
vfd.c: In function ‘test_multi_compat’:
vfd.c:1193:17: warning: size of ‘buf’ is 65536 bytes [-Wlarger-than=]
     int         buf[MULTI_SIZE][MULTI_SIZE];
                 ^
vfd.c: In function ‘test_family’:
vfd.c:674:1: warning: stack usage is 17600 bytes [-Wstack-usage=]
 test_family(void)
 ^
vfd.c:815:1: warning: the frame size of 17540 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
vfd.c: In function ‘test_multi_compat’:
vfd.c:1180:1: warning: stack usage is 71200 bytes [-Wstack-usage=]
 test_multi_compat(void)
 ^
vfd.c:1322:1: warning: the frame size of 71140 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
vfd.c: In function ‘test_multi’:
vfd.c:964:1: warning: stack usage is 68288 bytes [-Wstack-usage=]
 test_multi(void)
 ^
vfd.c:1156:1: warning: the frame size of 68204 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     vfd
  CC       ntypes.o
ntypes.c:35:5: warning: size of ‘ipoints2’ is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
     ^
ntypes.c:35:27: warning: size of ‘icheck2’ is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
                           ^
ntypes.c:36:7: warning: size of ‘spoints2’ is 40000 bytes [-Wlarger-than=]
 short spoints2[DIM0][DIM1], scheck2[DIM0][DIM1];
       ^
ntypes.c:36:29: warning: size of ‘scheck2’ is 40000 bytes [-Wlarger-than=]
 short spoints2[DIM0][DIM1], scheck2[DIM0][DIM1];
                             ^
ntypes.c:37:5: warning: size of ‘ipoints3’ is 400000 bytes [-Wlarger-than=]
 int ipoints3[DIM0][DIM1][5], icheck3[DIM0][DIM1][5];
     ^
ntypes.c:37:30: warning: size of ‘icheck3’ is 400000 bytes [-Wlarger-than=]
 int ipoints3[DIM0][DIM1][5], icheck3[DIM0][DIM1][5];
                              ^
  CCLD     ntypes
  CC       dangle.o
  CCLD     dangle
  CC       dtransform.o
dtransform.c: In function ‘main’:
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_utrans_inv, char, H5T_NATIVE_CHAR, "char", transformData, 0);
     ^
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_utrans_inv, unsigned char, H5T_NATIVE_UCHAR, "uchar", transformData, 0);
     ^
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, signed char, H5T_NATIVE_SCHAR, "schar", windchillFfloat, 1);
     ^
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, short, H5T_NATIVE_SHORT, "short", windchillFfloat, 1);
     ^
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:295:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_utrans_inv, unsigned short, H5T_NATIVE_USHORT, "ushort", transformData, 0);
     ^
dtransform.c:295:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:295:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:295:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, int, H5T_NATIVE_INT, "int", windchillFfloat, 1);
     ^
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, long, H5T_NATIVE_LONG, "long", windchillFfloat, 1);
     ^
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:300:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, long long, H5T_NATIVE_LLONG, "llong", windchillFfloat, 1);
     ^
dtransform.c:300:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:300:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:300:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:119:10: warning: size of ‘array’ is 3456 bytes [-Wlarger-than=]
     TYPE array[ROWS][COLS];       \
          ^
dtransform.c:305:5: note: in expansion of macro ‘TEST_TYPE_CONTIG’
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, long double, H5T_NATIVE_LDOUBLE, "ldouble", windchillFfloat, 1);
     ^
dtransform.c:308:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_utrans_inv, char, H5T_NATIVE_CHAR, "char", transformData, 0);
     ^
dtransform.c:308:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:309:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_utrans_inv, unsigned char, H5T_NATIVE_UCHAR, "uchar", transformData, 0);
     ^
dtransform.c:309:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:310:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, signed char, H5T_NATIVE_SCHAR, "schar", windchillFfloat, 1);
     ^
dtransform.c:310:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:311:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, short, H5T_NATIVE_SHORT, "short", windchillFfloat, 1);
     ^
dtransform.c:311:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:312:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_utrans_inv, unsigned short, H5T_NATIVE_USHORT, "ushort", transformData, 0);
     ^
dtransform.c:312:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:313:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, int, H5T_NATIVE_INT, "int", windchillFfloat, 1);
     ^
dtransform.c:313:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:315:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, long, H5T_NATIVE_LONG, "long", windchillFfloat, 1);
     ^
dtransform.c:315:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:317:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, long long, H5T_NATIVE_LLONG, "llong", windchillFfloat, 1);
     ^
dtransform.c:317:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:185:10: warning: size of ‘array’ is 3456 bytes [-Wlarger-than=]
     TYPE array[ROWS][COLS];       \
          ^
dtransform.c:322:5: note: in expansion of macro ‘TEST_TYPE_CHUNK’
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, long double, H5T_NATIVE_LDOUBLE, "ldouble", windchillFfloat, 1);
     ^
dtransform.c: In function ‘test_poly’:
dtransform.c:470:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             polyflres[row][col] = (float) ((2.0f + windchillC) * ((windchillC - 8.0f) / 2.0f));
             ^
dtransform.c:470:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
  CCLD     dtransform
  CC       reserved.o
  CCLD     reserved
  CC       cross_read.o
In file included from cross_read.c:24:0:
cross_read.c: In function ‘check_data’:
h5test.h:135:47: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
cross_read.c:129:8: note: in expansion of macro ‘DBL_REL_EQUAL’
   if (!DBL_REL_EQUAL(data_out[j][i], data_in[j][i], 0.001F)) {
        ^
cross_read.c: In function ‘open_dataset’:
cross_read.c:210:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME, file, TRUE);
                          ^
cross_read.c:213:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME1, file, TRUE);
                          ^
cross_read.c:216:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME2, file, TRUE);
                          ^
cross_read.c:219:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME3, file, TRUE);
                          ^
cross_read.c:222:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME4, file, TRUE);
                          ^
cross_read.c:225:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME5, file, TRUE);
                          ^
cross_read.c:228:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME6, file, FALSE);
                          ^
cross_read.c:231:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME7, file, FALSE);
                          ^
cross_read.c:234:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME8, file, FALSE);
                          ^
cross_read.c:237:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME9, file, FALSE);
                          ^
cross_read.c:240:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME10, file, FALSE);
                          ^
cross_read.c:243:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME11, file, FALSE);
                          ^
cross_read.c:246:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME12, file, FALSE);
                          ^
cross_read.c:249:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME13, file, FALSE);
                          ^
cross_read.c:252:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME14, file, TRUE);
                          ^
cross_read.c:255:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME15, file, TRUE);
                          ^
cross_read.c:259:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME16, file, TRUE);
                          ^
cross_read.c:267:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME17, file, TRUE);
                          ^
cross_read.c:290:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME20, file, TRUE);
                          ^
cross_read.c:293:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME21, file, TRUE);
                          ^
cross_read.c:296:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME22, file, TRUE);
                          ^
cross_read.c:299:26: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += check_data(DATASETNAME23, file, TRUE);
                          ^
cross_read.c:309:5: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
     return nerrors;
     ^
cross_read.c: In function ‘main’:
cross_read.c:335:28: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += open_dataset(filename);
                            ^
cross_read.c:339:28: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += open_dataset(filename);
                            ^
In file included from cross_read.c:25:0:
cross_read.c: At top level:
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     cross_read
  CC       freespace.o
  CCLD     freespace
  CC       mf.o
  CCLD     mf
  CC       btree2.o
  CCLD     btree2
  CC       fheap.o
fheap.c: In function ‘begin_test’:
fheap.c:546:15: warning: request for implicit conversion from ‘void *’ to ‘char *’ not permitted in C++ [-Wc++-compat]
     test_desc = H5MM_malloc(HDstrlen(del_str) + HDstrlen(base_desc));
               ^
fheap.c:547:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     sprintf(test_desc, base_desc, del_str);
     ^
fheap.c: In function ‘reopen_file’:
fheap.c:597:24: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
         if(NULL == (*f = H5I_object(*file)))
                        ^
fheap.c: In function ‘open_heap’:
fheap.c:644:24: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
         if(NULL == (*f = H5I_object(*file)))
                        ^
fheap.c:682:20: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (*f = H5I_object(*file)))
                    ^
fheap.c: In function ‘fill_heap’:
fheap.c:1067:38: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (shared_ids_g = H5MM_realloc(shared_ids_g, id_len * shared_alloc_ids_g)))
                                      ^
fheap.c:1069:39: warning: request for implicit conversion from ‘void *’ to ‘size_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (shared_lens_g = H5MM_realloc(shared_lens_g, sizeof(size_t) * shared_alloc_ids_g)))
                                       ^
fheap.c:1071:39: warning: request for implicit conversion from ‘void *’ to ‘size_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (shared_offs_g = H5MM_realloc(shared_offs_g, sizeof(size_t) * shared_alloc_ids_g)))
                                       ^
fheap.c:1118:38: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (shared_ids_g = H5MM_realloc(shared_ids_g, id_len * shared_alloc_ids_g)))
                                      ^
fheap.c:1120:39: warning: request for implicit conversion from ‘void *’ to ‘size_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (shared_lens_g = H5MM_realloc(shared_lens_g, sizeof(size_t) * shared_alloc_ids_g)))
                                       ^
fheap.c:1122:39: warning: request for implicit conversion from ‘void *’ to ‘size_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (shared_offs_g = H5MM_realloc(shared_offs_g, sizeof(size_t) * shared_alloc_ids_g)))
                                       ^
fheap.c:1174:39: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (keep_ids->ids = H5MM_realloc(keep_ids->ids, id_len * keep_ids->alloc_ids)))
                                       ^
fheap.c:1176:40: warning: request for implicit conversion from ‘void *’ to ‘size_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (keep_ids->lens = H5MM_realloc(keep_ids->lens, sizeof(size_t) * keep_ids->alloc_ids)))
                                        ^
fheap.c:1178:40: warning: request for implicit conversion from ‘void *’ to ‘size_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (keep_ids->offs = H5MM_realloc(keep_ids->offs, sizeof(size_t) * keep_ids->alloc_ids)))
                                        ^
fheap.c: In function ‘test_create’:
fheap.c:1849:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_reopen’:
fheap.c:1949:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_open_twice’:
fheap.c:2048:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:2056:20: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f2 = H5I_object(file2)))
                    ^
fheap.c: In function ‘test_delete_open’:
fheap.c:2194:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_id_limits’:
fheap.c:2331:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_filtered_create’:
fheap.c:2670:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:2709:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_size’:
fheap.c:2785:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:2835:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_man_insert_weird’:
fheap.c:3051:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_man_start_5th_recursive_indirect’:
fheap.c:6016:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_man_remove_bogus’:
fheap.c:6146:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6187:33: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         heap_id[u] = HDrandom() + 1;
                                 ^
fheap.c:6209:37: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
             heap_id[u] = HDrandom() + 1;
                                     ^
fheap.c: In function ‘test_man_remove_one’:
fheap.c:6295:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6332:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6346:9: warning: conversion to ‘unsigned char’ from ‘unsigned int’ may alter its value [-Wconversion]
         obj[u] = u;
         ^
fheap.c: In function ‘test_man_remove_two’:
fheap.c:6451:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6488:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6502:9: warning: conversion to ‘unsigned char’ from ‘unsigned int’ may alter its value [-Wconversion]
         obj[u] = u;
         ^
fheap.c: In function ‘test_man_remove_one_larger’:
fheap.c:6636:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6673:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_man_remove_two_larger’:
fheap.c:6797:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:6834:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_man_remove_three_larger’:
fheap.c:7033:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:7070:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_man_incr_insert_remove’:
fheap.c:7307:19: warning: size of ‘heap_id’ is 6400 bytes [-Wlarger-than=]
     unsigned char heap_id[100][MAX_HEAP_ID_LEN]; /* Heap ID for object inserted */
                   ^
fheap.c: In function ‘test_huge_insert_one’:
fheap.c:12331:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c: In function ‘test_huge_insert_two’:
fheap.c:12485:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c:12487:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id2 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c: In function ‘test_huge_insert_three’:
fheap.c:12719:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c:12721:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id2 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:12723:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id3 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c: In function ‘test_huge_insert_mix’:
fheap.c:13029:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c:13031:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id2 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:13033:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id3 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:13035:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id4 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:13037:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id5 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c: In function ‘test_filtered_huge’:
fheap.c:13456:35: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
         old_actual_id_len = tparam->actual_id_len;
                                   ^
fheap.c:13470:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c: In function ‘test_tiny_insert_one’:
fheap.c:13663:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c: In function ‘test_tiny_insert_two’:
fheap.c:13817:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c:13819:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id2 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c: In function ‘test_tiny_insert_mix’:
fheap.c:14056:25: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id = H5MM_malloc(tparam->actual_id_len)))
                         ^
fheap.c:14058:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id2 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:14060:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id3 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:14062:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id4 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:14064:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id5 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:14066:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id6 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c:14068:26: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (heap_id7 = H5MM_malloc(tparam->actual_id_len)))
                          ^
fheap.c: In function ‘test_filtered_man_root_direct’:
fheap.c:14699:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘test_filtered_man_root_indirect’:
fheap.c:14881:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:14941:27: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (f = H5I_object(file)))
                           ^
fheap.c:14973:27: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (f = H5I_object(file)))
                           ^
fheap.c:15006:27: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (f = H5I_object(file)))
                           ^
fheap.c:15038:27: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
             if(NULL == (f = H5I_object(file)))
                           ^
fheap.c: In function ‘test_random_pow2’:
fheap.c:15397:68: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
         unsigned size_range = (tmp_cparam.managed.start_block_size / 8);       /* Object size range */
                                                                    ^
fheap.c: In function ‘test_write’:
fheap.c:15683:17: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     rewrite_obj = H5MM_malloc(shared_obj_size_g);
                 ^
fheap.c:15685:43: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         rewrite_obj[u] = shared_wobj_g[u] * 2;
                                           ^
fheap.c:15713:13: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
             obj_size = (size_t)(obj_size * 1.3F);
             ^
fheap.c:15715:13: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
             obj_size = (size_t)(obj_size / 1.3F);
             ^
fheap.c:15738:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:15758:13: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
             obj_size = (size_t)(obj_size * 1.3F);
             ^
fheap.c:15760:13: warning: conversion to ‘float’ from ‘size_t’ may alter its value [-Wconversion]
             obj_size = (size_t)(obj_size / 1.3F);
             ^
fheap.c: In function ‘test_bug1’:
fheap.c:15899:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c:15925:19: warning: request for implicit conversion from ‘void *’ to ‘struct H5F_t *’ not permitted in C++ [-Wc++-compat]
     if(NULL == (f = H5I_object(file)))
                   ^
fheap.c: In function ‘main’:
fheap.c:16011:19: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     shared_wobj_g = H5MM_malloc(shared_obj_size_g);
                   ^
fheap.c:16012:19: warning: request for implicit conversion from ‘void *’ to ‘unsigned char *’ not permitted in C++ [-Wc++-compat]
     shared_robj_g = H5MM_malloc(shared_obj_size_g);
                   ^
fheap.c:16020:80: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(curr_test = FHEAP_TEST_NORMAL; curr_test < FHEAP_TEST_NTESTS; curr_test++) {
                                                                                ^
fheap.c:16051:31: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_create(fapl, &small_cparam, &tparam);
                               ^
fheap.c:16052:31: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_reopen(fapl, &small_cparam, &tparam);
                               ^
fheap.c:16053:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_open_twice(fapl, &small_cparam, &tparam);
                                   ^
fheap.c:16054:36: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_delete_open(fapl, &small_cparam, &tparam);
                                    ^
fheap.c:16055:34: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_id_limits(fapl, &small_cparam);
                                  ^
fheap.c:16056:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_filtered_create(fapl, &small_cparam);
                                        ^
fheap.c:16057:29: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_size(fapl, &small_cparam);
                             ^
fheap.c:16070:73: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(fill = FHEAP_TEST_FILL_LARGE; fill < FHEAP_TEST_FILL_N; fill++) {
                                                                         ^
fheap.c:16102:45: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_insert_weird(fapl, &small_cparam, &tparam);
                                             ^
fheap.c:16145:65: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_man_start_5th_recursive_indirect(fapl, &small_cparam, &tparam);
                                                                 ^
fheap.c:16155:45: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_bogus(fapl, &small_cparam, &tparam);
                                             ^
fheap.c:16156:43: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_one(fapl, &small_cparam, &tparam);
                                           ^
fheap.c:16157:43: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_two(fapl, &small_cparam, &tparam);
                                           ^
fheap.c:16158:50: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_one_larger(fapl, &small_cparam, &tparam);
                                                  ^
fheap.c:16160:50: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_two_larger(fapl, &small_cparam, &tparam);
                                                  ^
fheap.c:16162:50: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_two_larger(fapl, &small_cparam, &tparam);
                                                  ^
fheap.c:16164:52: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_three_larger(fapl, &small_cparam, &tparam);
                                                    ^
fheap.c:16166:52: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_man_remove_three_larger(fapl, &small_cparam, &tparam);
                                                    ^
fheap.c:16182:80: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
             for(del_dir = FHEAP_DEL_FORWARD; del_dir < FHEAP_DEL_NDIRS; del_dir++) {
                                                                                ^
fheap.c:16184:97: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
                 for(drain_half = FHEAP_DEL_DRAIN_ALL; drain_half < FHEAP_DEL_DRAIN_N; drain_half++) {
                                                                                                 ^
fheap.c:16200:59: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_remove_root_direct(fapl, &small_cparam, &tparam);
                                                           ^
fheap.c:16201:58: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_remove_two_direct(fapl, &small_cparam, &tparam);
                                                          ^
fheap.c:16202:57: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_remove_first_row(fapl, &small_cparam, &tparam);
                                                         ^
fheap.c:16203:62: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_remove_first_two_rows(fapl, &small_cparam, &tparam);
                                                              ^
fheap.c:16204:63: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_remove_first_four_rows(fapl, &small_cparam, &tparam);
                                                               ^
fheap.c:16208:67: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_remove_all_root_direct(fapl, &small_cparam, &tparam);
                                                                   ^
fheap.c:16209:64: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_remove_2nd_indirect(fapl, &small_cparam, &tparam);
                                                                ^
fheap.c:16210:64: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_remove_3rd_indirect(fapl, &small_cparam, &tparam);
                                                                ^
fheap.c:16219:57: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_skip_start_block(fapl, &small_cparam, &tparam);
                                                         ^
fheap.c:16220:66: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_skip_start_block_add_back(fapl, &small_cparam, &tparam);
                                                                  ^
fheap.c:16221:69: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_skip_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                     ^
fheap.c:16222:55: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_skip_2nd_block(fapl, &small_cparam, &tparam);
                                                       ^
fheap.c:16223:67: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_skip_2nd_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                   ^
fheap.c:16224:84: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_one_partial_skip_2nd_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                    ^
fheap.c:16225:66: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_row_skip_add_skipped(fapl, &small_cparam, &tparam);
                                                                  ^
fheap.c:16226:87: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_skip_direct_skip_indirect_two_rows_add_skipped(fapl, &small_cparam, &tparam);
                                                                                       ^
fheap.c:16227:90: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_direct_skip_indirect_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                          ^
fheap.c:16228:94: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_direct_skip_2nd_indirect_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                              ^
fheap.c:16229:94: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_2nd_direct_less_one_wrap_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                              ^
fheap.c:16230:97: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_direct_skip_2nd_indirect_skip_2nd_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                 ^
fheap.c:16231:87: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_direct_skip_indirect_two_rows_add_skipped(fapl, &small_cparam, &tparam);
                                                                                       ^
fheap.c:16232:105: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_direct_skip_indirect_two_rows_skip_indirect_row_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                         ^
fheap.c:16233:85: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_2nd_direct_skip_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                     ^
fheap.c:16234:98: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_2nd_direct_skip_2nd_indirect_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                  ^
fheap.c:16235:110: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_2nd_direct_fill_direct_skip_3rd_indirect_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                              ^
fheap.c:16236:111: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_2nd_direct_fill_direct_skip2_3rd_indirect_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                               ^
fheap.c:16237:106: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_3rd_direct_less_one_fill_direct_wrap_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                          ^
fheap.c:16238:118: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_fill_1st_row_3rd_direct_fill_2nd_direct_less_one_wrap_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                                      ^
fheap.c:16242:101: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_fill_3rd_direct_fill_direct_skip_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                     ^
fheap.c:16243:130: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_fill_3rd_direct_fill_2nd_direct_fill_direct_skip_3rd_indirect_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                                                  ^
fheap.c:16244:139: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_fill_3rd_direct_fill_2nd_direct_fill_direct_skip_3rd_indirect_two_rows_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                                                           ^
fheap.c:16245:135: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_fill_3rd_direct_fill_2nd_direct_fill_direct_skip_3rd_indirect_wrap_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                                                       ^
fheap.c:16246:144: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         nerrors += test_man_fill_4th_direct_less_one_fill_2nd_direct_fill_direct_skip_3rd_indirect_wrap_start_block_add_skipped(fapl, &small_cparam, &tparam);
                                                                                                                                                ^
fheap.c:16255:52: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_frag_simple(fapl, &small_cparam, &tparam);
                                                    ^
fheap.c:16256:52: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_frag_direct(fapl, &small_cparam, &tparam);
                                                    ^
fheap.c:16257:56: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_frag_2nd_direct(fapl, &small_cparam, &tparam);
                                                        ^
fheap.c:16258:56: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     nerrors += test_man_frag_3rd_direct(fapl, &small_cparam, &tparam);
                                                        ^
fheap.c:16293:13: warning: conversion to ‘uint16_t’ from ‘unsigned int’ may alter its value [-Wconversion]
             small_cparam.id_len = id_len;
             ^
fheap.c:16323:80: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
             for(del_dir = FHEAP_DEL_FORWARD; del_dir < FHEAP_DEL_NDIRS; del_dir++) {
                                                                                ^
fheap.c:16328:48: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_huge_insert_one(fapl, &small_cparam, &tparam);
                                                ^
fheap.c:16329:48: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_huge_insert_two(fapl, &small_cparam, &tparam);
                                                ^
fheap.c:16330:50: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_huge_insert_three(fapl, &small_cparam, &tparam);
                                                  ^
fheap.c:16331:48: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_huge_insert_mix(fapl, &small_cparam, &tparam);
                                                ^
fheap.c:16332:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_filtered_huge(fapl, &small_cparam, &tparam);
                                              ^
fheap.c:16339:48: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_tiny_insert_one(fapl, &small_cparam, &tparam);
                                                ^
fheap.c:16340:48: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_tiny_insert_two(fapl, &small_cparam, &tparam);
                                                ^
fheap.c:16341:48: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 nerrors += test_tiny_insert_mix(fapl, &small_cparam, &tparam);
                                                ^
fheap.c:16366:76: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(del_dir = FHEAP_DEL_FORWARD; del_dir < FHEAP_DEL_NDIRS; del_dir++) {
                                                                            ^
fheap.c:16371:53: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_filtered_man_root_direct(fapl, &small_cparam, &tparam);
                                                     ^
fheap.c:16372:55: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_filtered_man_root_indirect(fapl, &small_cparam, &tparam);
                                                       ^
fheap.c:16376:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(50*1000*1000) : (hsize_t)(25*1000*1000)), fapl, &small_cparam, &tparam);
                                   ^
fheap.c:16377:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random_pow2((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(50*1000*1000) : (hsize_t)(2*1000*1000)), fapl, &small_cparam, &tparam);
                                        ^
fheap.c:16399:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(50*1000*1000)), fapl, &small_cparam, &tparam);
                                   ^
fheap.c:16400:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random_pow2((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(4*1000*1000)), fapl, &small_cparam, &tparam);
                                        ^
fheap.c:16403:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(50*1000*1000)), fapl, &small_cparam, &tparam);
                                   ^
fheap.c:16404:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random_pow2((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(4*1000*1000)), fapl, &small_cparam, &tparam);
                                        ^
fheap.c:16417:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(50*1000*1000)), fapl, &large_cparam, &tparam);
                                   ^
fheap.c:16418:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random_pow2((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(4*1000*1000)), fapl, &large_cparam, &tparam);
                                        ^
fheap.c:16421:35: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(50*1000*1000)), fapl, &large_cparam, &tparam);
                                   ^
fheap.c:16422:40: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nerrors += test_random_pow2((curr_test == FHEAP_TEST_NORMAL ? (hsize_t)(100*1000*1000) : (hsize_t)(4*1000*1000)), fapl, &large_cparam, &tparam);
                                        ^
fheap.c:16438:30: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_write(fapl, &small_cparam, &tparam);
                              ^
fheap.c:16442:30: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         nerrors += test_write(fapl, &small_cparam, &tparam);
                              ^
fheap.c:16455:25: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     nerrors += test_bug1(fapl, &small_cparam, &tparam);
                         ^
  CCLD     fheap
  CC       file_image.o
file_image.c: In function ‘test_get_file_image’:
file_image.c:768:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
             HDsnprintf(member_file_name, 1024, file_name, i);
             ^
file_image.c:768:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
file_image.c:796:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
             HDsnprintf(member_file_name, 1024, file_name, i);
             ^
file_image.c:796:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
In file included from file_image.c:25:0:
file_image.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     file_image
  CC       unregister.o
unregister.c: In function ‘test_unregister_filters’:
unregister.c:103:17: warning: size of ‘points’ is 80000 bytes [-Wlarger-than=]
     int         points[DSET_DIM1][DSET_DIM2];
                 ^
unregister.c:92:1: warning: stack usage is 81456 bytes [-Wstack-usage=]
 test_unregister_filters(hid_t my_fapl)
 ^
unregister.c:213:1: warning: the frame size of 81372 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     unregister
  CC       error_test.o
error_test.c:43:5: warning: size of ‘ipoints2’ is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
     ^
error_test.c:43:27: warning: size of ‘icheck2’ is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
                           ^
error_test.c: In function ‘error_stack’:
error_test.c:276:29: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     if((err_num = H5Eget_num(H5E_DEFAULT)) < 0)
                             ^
error_test.c:285:29: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     if((err_num = H5Eget_num(ERR_STACK)) == 0) {
                             ^
error_test.c: In function ‘test_long_desc’:
error_test.c:357:28: warning: conversion to ‘char’ from ‘size_t’ may alter its value [-Wconversion]
         long_desc[u] = 'A' + (u % 26);
                            ^
error_test.c:368:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(full_desc, (size_t)(LONG_DESC_SIZE + 128), format, long_desc);
     ^
error_test.c:368:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
error_test.c: In function ‘test_create’:
error_test.c:497:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(estack_id);
                         ^
error_test.c:504:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(estack_id);
                         ^
error_test.c:511:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(estack_id);
                         ^
error_test.c: In function ‘test_copy’:
error_test.c:549:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(H5E_DEFAULT);
                         ^
error_test.c:556:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(estack_id);
                         ^
error_test.c:560:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(H5E_DEFAULT);
                         ^
error_test.c:567:25: warning: conversion to ‘int’ from ‘ssize_t’ may alter its value [-Wconversion]
     err_num = H5Eget_num(H5E_DEFAULT);
                         ^
In file included from error_test.c:23:0:
error_test.c: At top level:
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     error_test
  CC       err_compat.o
err_compat.c:40:5: warning: size of ‘ipoints2’ is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
     ^
err_compat.c:40:27: warning: size of ‘icheck2’ is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
                           ^
  CCLD     err_compat
  CC       tcheck_version.o
tcheck_version.c: In function ‘abort_intercept’:
tcheck_version.c:108:1: warning: function might be candidate for attribute ‘noreturn’ [-Wsuggest-attribute=noreturn]
 abort_intercept (int H5_ATTR_UNUSED sig)
 ^
  CCLD     tcheck_version
  CC       testmeta.o
  CCLD     testmeta
  CC       links_env.o
  CCLD     links_env
  CC       plugin.o
plugin.c:65:5: warning: size of ‘points_deflate’ is 80000 bytes [-Wlarger-than=]
 int points_deflate[DSET_DIM1][DSET_DIM2], 
     ^
plugin.c:66:9: warning: size of ‘points_dynlib1’ is 80000 bytes [-Wlarger-than=]
         points_dynlib1[DSET_DIM1][DSET_DIM2],
         ^
plugin.c:67:9: warning: size of ‘points_dynlib2’ is 80000 bytes [-Wlarger-than=]
         points_dynlib2[DSET_DIM1][DSET_DIM2],
         ^
plugin.c:68:9: warning: size of ‘points_bzip2’ is 80000 bytes [-Wlarger-than=]
         points_bzip2[DSET_DIM1][DSET_DIM2];
         ^
plugin.c: In function ‘test_filter_internal’:
plugin.c:95:25: warning: size of ‘points’ is 80000 bytes [-Wlarger-than=]
     int                 points[DSET_DIM1][DSET_DIM2], check[DSET_DIM1][DSET_DIM2];
                         ^
plugin.c:95:55: warning: size of ‘check’ is 80000 bytes [-Wlarger-than=]
     int                 points[DSET_DIM1][DSET_DIM2], check[DSET_DIM1][DSET_DIM2];
                                                       ^
plugin.c: In function ‘test_read_data’:
plugin.c:427:25: warning: size of ‘check’ is 80000 bytes [-Wlarger-than=]
     int                 check[DSET_DIM1][DSET_DIM2];
                         ^
plugin.c: In function ‘test_noread_data’:
plugin.c:541:16: warning: size of ‘check’ is 80000 bytes [-Wlarger-than=]
     int        check[DSET_DIM1][DSET_DIM2];
                ^
plugin.c: In function ‘test_noread_with_filters’:
plugin.c:577:5: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
     plugin_state = plugin_state & ~H5PL_FILTER_PLUGIN;
     ^
In file included from plugin.c:24:0:
plugin.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
plugin.c: In function ‘test_read_data’:
plugin.c:425:1: warning: stack usage is 80032 bytes [-Wstack-usage=]
 test_read_data(hid_t dataset, int *origin_data)
 ^
plugin.c:456:1: warning: the frame size of 80000 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
plugin.c: In function ‘test_filter_internal’:
plugin.c:85:1: warning: stack usage is 160208 bytes [-Wstack-usage=]
 test_filter_internal(hid_t fid, const char *name, hid_t dcpl)
 ^
plugin.c:325:1: warning: the frame size of 160128 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
plugin.c: In function ‘test_noread_data’:
plugin.c:539:1: warning: stack usage is 80064 bytes [-Wstack-usage=]
 test_noread_data(hid_t dataset)
 ^
plugin.c:556:1: warning: the frame size of 80048 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     plugin
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
Making all in tools
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
Making all in lib
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/lib'
  CC       h5tools.lo
h5tools.c: In function 'init_acc_pos':
h5tools.c:1302:26: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
     for (i = (ctx->ndims - 2); i >= 0; i--) {
                          ^
h5tools.c: In function 'render_bin_output':
h5tools.c:1333:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch (type_class) {
     ^
h5tools.c:1333:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
h5tools.c:1333:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
h5tools.c:1333:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
h5tools.c:1333:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
h5tools.c: At top level:
h5tools.c:1528:1: warning: no previous prototype for 'render_bin_output_region_data_blocks' [-Wmissing-prototypes]
 render_bin_output_region_data_blocks(hid_t region_id, FILE *stream,
 ^
h5tools.c: In function 'render_bin_output_region_data_blocks':
h5tools.c:1549:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((dims1 = (hsize_t *) HDmalloc(sizeof(hsize_t) * ndims)) == NULL)
     ^
h5tools.c:1571:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((start = (hsize_t *) HDmalloc(sizeof(hsize_t) * ndims)) == NULL)
     ^
h5tools.c:1574:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((count = (hsize_t *) HDmalloc(sizeof(hsize_t) * ndims)) == NULL)
     ^
h5tools.c: In function 'render_bin_output_region_blocks':
h5tools.c:1638:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(FALSE, H5E_tools_min_id_g, "H5Sget_select_hyper_nblocks failed");
         ^
h5tools.c:1643:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(FALSE, H5E_tools_min_id_g, "H5Sget_simple_extent_ndims failed");
         ^
h5tools.c:1645:5: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     alloc_size = nblocks * ndims * 2 * sizeof(ptdata[0]);
     ^
h5tools.c:1648:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(FALSE, H5E_tools_min_id_g, "Could not allocate buffer for ptdata");
         ^
h5tools.c:1652:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(FALSE, H5E_tools_min_id_g, "H5Rget_select_hyper_blocklist failed");
         ^
h5tools.c:1655:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(FALSE, H5E_tools_min_id_g, "H5Dget_type failed");
         ^
h5tools.c:1657:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(FALSE, H5E_tools_min_id_g, "H5Tget_native_type failed");
         ^
h5tools.c:1660:13: warning: conversion to 'hssize_t' from 'hsize_t' may change the sign of the result [-Wsign-conversion]
             type_id, nblocks, ptdata);
             ^
h5tools.c:1666:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools.c:1669:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools.c: At top level:
h5tools.c:1696:1: warning: no previous prototype for 'render_bin_output_region_data_points' [-Wmissing-prototypes]
 render_bin_output_region_data_points(hid_t region_space, hid_t region_id,
 ^
h5tools.c: In function 'render_bin_output_region_data_points':
h5tools.c:1706:32: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
     if((type_size = H5Tget_size(type_id)) == 0)
                                ^
h5tools.c:1709:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((region_buf = HDmalloc(type_size * (size_t)npoints)) == NULL)
     ^
h5tools.c:1713:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((dims1 = (hsize_t *) HDmalloc(sizeof(hsize_t) * ndims)) == NULL)
     ^
h5tools.c:1716:5: warning: conversion to 'hsize_t' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
     dims1[0] = npoints;
     ^
h5tools.c:1725:5: warning: conversion to 'hsize_t' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
     if(render_bin_output(stream, container, type_id, (char*)region_buf, npoints) < 0)
     ^
h5tools.c: In function 'render_bin_output_region_points':
h5tools.c:1762:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(FALSE, H5E_tools_min_id_g, "H5Sget_select_elem_npoints failed");
         ^
h5tools.c:1766:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(FALSE, H5E_tools_min_id_g, "H5Sget_simple_extent_ndims failed");
         ^
h5tools.c:1769:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(FALSE, H5E_tools_min_id_g, "H5Dget_type failed");
         ^
h5tools.c:1772:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(FALSE, H5E_tools_min_id_g, "H5Tget_native_type failed");
         ^
h5tools.c:1779:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools.c:1782:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools.c: In function 'h5tools_count_ncols':
h5tools.c:673:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 h5tools_count_ncols(const char *s)
 ^
h5tools.c: In function 'h5tools_is_zero':
h5tools.c:1798:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 h5tools_is_zero(const void *_mem, size_t size)
 ^
In file included from h5tools.c:31:0:
h5tools.c: In function 'h5tools_render_element':
../../src/H5private.h:1294:36: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     #define HDstrtok(X,Y)    strtok(X,Y)
                                    ^
h5tools.c:1083:25: note: in expansion of macro 'HDstrtok'
              (section = HDstrtok(secnum ? NULL : s, OPTIONAL_LINE_BREAK));
                         ^
h5tools.c: In function 'h5tools_render_region_element':
../../src/H5private.h:1294:36: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     #define HDstrtok(X,Y)    strtok(X,Y)
                                    ^
h5tools.c:1236:48: note: in expansion of macro 'HDstrtok'
     for (secnum = 0, multiline = 0; (section = HDstrtok(secnum ? NULL : s,
                                                ^
h5tools.c: In function 'render_bin_output_region_points':
h5tools.c:1778:16: warning: 'type_id' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5Tclose(type_id) < 0)
                ^
h5tools.c: In function 'render_bin_output_region_blocks':
h5tools.c:1665:16: warning: 'type_id' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5Tclose(type_id) < 0)
                ^
h5tools.c:1668:16: warning: 'dtype' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5Tclose(dtype) < 0)
                ^
  CC       h5tools_dump.lo
h5tools_dump.c: In function 'h5tools_dump_region_data_blocks':
h5tools_dump.c:612:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(dimension_break, H5E_tools_min_id_g, "H5Sget_select_hyper_nblocks failed");
         ^
h5tools_dump.c:617:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(dimension_break, H5E_tools_min_id_g, "H5Sget_simple_extent_ndims failed");
         ^
h5tools_dump.c:638:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "Could not allocate buffer for ptdata");
         ^
h5tools_dump.c:643:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "H5Rget_select_hyper_blocklist failed");
         ^
h5tools_dump.c:669:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "H5Dget_type failed");
         ^
h5tools_dump.c:671:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "H5Tget_native_type failed");
         ^
h5tools_dump.c:732:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools_dump.c:735:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools_dump.c: In function 'h5tools_print_region_data_points':
h5tools_dump.c:809:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((dims1 = (hsize_t *) HDmalloc(sizeof(hsize_t) * ndims)) == NULL)
     ^
h5tools_dump.c:812:5: warning: conversion to 'hsize_t' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
     dims1[0] = npoints;
     ^
h5tools_dump.c:818:32: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
     if((type_size = H5Tget_size(type_id)) == 0)
                                ^
h5tools_dump.c:821:5: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     if((region_buf = HDmalloc(type_size * (size_t)npoints)) == NULL)
     ^
h5tools_dump.c:828:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     ctx.ndims = ndims;
     ^
h5tools_dump.c:834:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (jndx = 0; jndx < npoints; jndx++, elmtno++) {
                         ^
h5tools_dump.c:849:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         if (jndx == npoints - 1)
                  ^
h5tools_dump.c:855:9: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         ctx.sm_pos = jndx * ndims;
         ^
h5tools_dump.c:857:33: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
             ctx.size_last_dim = (int) (ctx.p_max_idx[ctx.ndims - 1]);
                                 ^
h5tools_dump.c:870:32: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                                ((char*)region_buf + jndx * type_size), &ctx);
                                ^
h5tools_dump.c:872:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         if (jndx + 1 < npoints || (region_flags & END_OF_DATA) == 0)
                      ^
h5tools_dump.c: In function 'h5tools_dump_region_data_points':
h5tools_dump.c:937:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(dimension_break, H5E_tools_min_id_g, "H5Sget_select_elem_npoints failed");
         ^
h5tools_dump.c:941:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         H5E_THROW(dimension_break, H5E_tools_min_id_g, "H5Sget_simple_extent_ndims failed");
         ^
h5tools_dump.c:957:26: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
     alloc_size = npoints * ndims * sizeof(ptdata[0]);
                          ^
h5tools_dump.c:960:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "Could not allocate buffer for ptdata");
         ^
h5tools_dump.c:964:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "H5Sget_select_elem_pointlist failed");
         ^
h5tools_dump.c:985:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "H5Dget_type failed");
         ^
h5tools_dump.c:988:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HGOTO_ERROR(dimension_break, H5E_tools_min_id_g, "H5Tget_native_type failed");
         ^
h5tools_dump.c:1052:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools_dump.c:1055:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         HERROR(H5E_tools_g, H5E_tools_min_id_g, "H5Tclose failed");
         ^
h5tools_dump.c: In function 'h5tools_display_simple_subset':
h5tools_dump.c:1377:50: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
             current_outer_dim = (ctx->ndims - 2) - 1;
                                                  ^
h5tools_dump.c:1380:40: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
             for (i = current_outer_dim + 1; i < ctx->ndims; i++) {
                                        ^
h5tools_dump.c: In function 'h5tools_dump_simple_dset':
h5tools_dump.c:1535:44: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     ctx->ndims = H5Sget_simple_extent_ndims(f_space);
                                            ^
h5tools_dump.c: In function 'h5tools_dump_simple_mem':
h5tools_dump.c:1684:44: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     ctx->ndims = H5Sget_simple_extent_ndims(space);
                                            ^
h5tools_dump.c:1702:30: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
         ctx->size_last_dim = (int) (ctx->p_max_idx[ctx->ndims - 1]);
                              ^
h5tools_dump.c: In function 'h5tools_print_datatype':
h5tools_dump.c:1913:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch (type_class) {
     ^
h5tools_dump.c:1913:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
In file included from h5tools_dump.c:31:0:
h5tools_dump.c: In function 'h5tools_print_enum':
../../src/H5private.h:1267:34: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
     #define HDstrlen(S)    strlen(S)
                                  ^
h5tools_dump.c:2659:18: note: in expansion of macro 'HDstrlen'
         nchars = HDstrlen(name[i]);
                  ^
h5tools_dump.c: In function 'h5tools_dump_dcpl':
h5tools_dump.c:3350:5: warning: enumeration value 'H5D_FILL_TIME_ERROR' not handled in switch [-Wswitch-enum]
     switch(ft) {
     ^
h5tools_dump.c:3407:5: warning: enumeration value 'H5D_ALLOC_TIME_ERROR' not handled in switch [-Wswitch-enum]
     switch(at) {
     ^
h5tools_dump.c:3407:5: warning: enumeration value 'H5D_ALLOC_TIME_DEFAULT' not handled in switch [-Wswitch-enum]
h5tools_dump.c: In function 'h5tools_dump_comment':
h5tools_dump.c:3472:13: warning: conversion to 'size_t' from 'ssize_t' may change the sign of the result [-Wsign-conversion]
             cmt_bufsize = H5Oget_comment(obj_id, comment, cmt_bufsize);
             ^
h5tools_dump.c: In function 'h5tools_dump_region_data_points':
h5tools_dump.c:1051:16: warning: 'type_id' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5Tclose(type_id) < 0)
                ^
h5tools_dump.c:1054:16: warning: 'dtype' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5Tclose(dtype) < 0)
                ^
  CC       h5tools_str.lo
h5tools_str.c: In function 'h5tools_str_append':
h5tools_str.c:145:9: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
         nchars = HDvsnprintf(str->s + str->len, avail, fmt, ap);
         ^
h5tools_str.c:145:9: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
h5tools_str.c:171:13: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
             size_t newsize = MAX(str->len + nchars + 1, 2 * str->nalloc);
             ^
h5tools_str.c:171:13: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
h5tools_str.c:179:13: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
             str->len += nchars;
             ^
h5tools_str.c: In function 'h5tools_str_dump_region_blocks':
h5tools_str.c:448:38: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
         alloc_size = nblocks * ndims * 2 * sizeof(ptdata[0]);
                                      ^
h5tools_str.c: In function 'h5tools_str_dump_region_points':
h5tools_str.c:509:30: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
         alloc_size = npoints * ndims * sizeof(ptdata[0]);
                              ^
h5tools_str.c: In function 'h5tools_str_sprint':
h5tools_str.c:740:21: warning: implicit conversion from 'float' to 'double' when passing argument to function [-Wdouble-promotion]
                     h5tools_str_append(str, OPT(info->fmt_float, "%g"), tempfloat);
                     ^
h5tools_str.c:791:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                             if (info->str_repeat > 0) while (i + j < size && s[i] == s[i + j])
                             ^
h5tools_str.c:791:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
h5tools_str.c:822:40: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                                 i += j - 1;
                                        ^
h5tools_str.c:846:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(unsigned char))
                                                    ^
h5tools_str.c:849:56: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                                 tempuchar = (tempuchar >> packed_data_offset) & packed_data_mask;
                                                        ^
h5tools_str.c:849:79: warning: conversion to 'unsigned char' from 'long long unsigned int' may alter its value [-Wconversion]
                                 tempuchar = (tempuchar >> packed_data_offset) & packed_data_mask;
                                                                               ^
h5tools_str.c:858:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(char))
                                                    ^
h5tools_str.c:861:54: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                                 tempchar = (tempchar >> packed_data_offset) & packed_data_mask;
                                                      ^
h5tools_str.c:861:77: warning: conversion to 'signed char' from 'long long unsigned int' may alter its value [-Wconversion]
                                 tempchar = (tempchar >> packed_data_offset) & packed_data_mask;
                                                                             ^
h5tools_str.c:871:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(unsigned int))
                                                    ^
h5tools_str.c:874:77: warning: conversion to 'unsigned int' from 'long long unsigned int' may alter its value [-Wconversion]
                                 tempuint = (tempuint >> packed_data_offset) & packed_data_mask;
                                                                             ^
h5tools_str.c:882:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(int))
                                                    ^
h5tools_str.c:885:52: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                                 tempint = (tempint >> packed_data_offset) & packed_data_mask;
                                                    ^
h5tools_str.c:885:75: warning: conversion to 'int' from 'long long unsigned int' may alter its value [-Wconversion]
                                 tempint = (tempint >> packed_data_offset) & packed_data_mask;
                                                                           ^
h5tools_str.c:897:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(unsigned short))
                                                    ^
h5tools_str.c:900:58: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                                 tempushort = (tempushort >> packed_data_offset) & packed_data_mask;
                                                          ^
h5tools_str.c:900:81: warning: conversion to 'short unsigned int' from 'long long unsigned int' may alter its value [-Wconversion]
                                 tempushort = (tempushort >> packed_data_offset) & packed_data_mask;
                                                                                 ^
h5tools_str.c:910:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(short))
                                                    ^
h5tools_str.c:913:56: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                                 tempshort = (tempshort >> packed_data_offset) & packed_data_mask;
                                                        ^
h5tools_str.c:913:79: warning: conversion to 'short int' from 'long long unsigned int' may alter its value [-Wconversion]
                                 tempshort = (tempshort >> packed_data_offset) & packed_data_mask;
                                                                               ^
h5tools_str.c:923:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(unsigned long))
                                                    ^
h5tools_str.c:934:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(long))
                                                    ^
h5tools_str.c:937:54: warning: conversion to 'long long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
                                 templong = (templong >> packed_data_offset) & packed_data_mask;
                                                      ^
h5tools_str.c:937:77: warning: conversion to 'long int' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                                 templong = (templong >> packed_data_offset) & packed_data_mask;
                                                                             ^
h5tools_str.c:947:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(unsigned long long))
                                                    ^
h5tools_str.c:958:52: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                             if (packed_data_offset >= 8 * sizeof(long long))
                                                    ^
h5tools_str.c:961:56: warning: conversion to 'long long unsigned int' from 'long long int' may change the sign of the result [-Wsign-conversion]
                                 templlong = (templlong >> packed_data_offset) & packed_data_mask;
                                                        ^
h5tools_str.c:961:79: warning: conversion to 'long long int' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                                 templlong = (templlong >> packed_data_offset) & packed_data_mask;
                                                                               ^
h5tools_str.c:971:45: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                     nmembs = H5Tget_nmembers(type);
                                             ^
h5tools_str.c:1048:29: warning: enumeration value 'H5O_TYPE_UNKNOWN' not handled in switch [-Wswitch-enum]
                             switch (oi.type) {
                             ^
h5tools_str.c:1048:29: warning: enumeration value 'H5O_TYPE_NTYPES' not handled in switch [-Wswitch-enum]
h5tools_str.c:733:9: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
         switch (type_class) {
         ^
h5tools_str.c:733:9: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
h5tools_str.c:733:9: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
h5tools_str.c:733:9: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
h5tools_str.c:733:9: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
h5tools_str.c: In function 'h5tools_str_replace':
h5tools_str.c:1397:10: warning: request for implicit conversion from 'void *' to 'char *' not permitted in C++ [-Wc++-compat]
   newstr = HDmalloc ( HDstrlen ( oldstr ) - HDstrlen ( substr ) + HDstrlen ( replacement ) + 1 );
          ^
In file included from h5tools_str.c:27:0:
h5tools_str.c:1403:40: warning: conversion to 'size_t' from 'long int' may change the sign of the result [-Wsign-conversion]
         HDmemcpy ( newstr, oldstr, tok - oldstr );
                                        ^
../../src/H5private.h:1033:67: note: in definition of macro 'HDmemcpy'
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                   ^
h5tools_str.c:1405:148: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
         HDmemcpy ( newstr + (tok - oldstr) + HDstrlen( replacement ), tok + HDstrlen ( substr ), HDstrlen ( oldstr ) - HDstrlen ( substr ) - ( tok - oldstr ) );
                                                                                                                                                    ^
../../src/H5private.h:1033:67: note: in definition of macro 'HDmemcpy'
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                   ^
h5tools_str.c: In function 'h5tools_str_len':
h5tools_str.c:95:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 h5tools_str_len(h5tools_str_t *str)
 ^
  CC       h5tools_utils.lo
h5tools_utils.c: In function 'parallel_print':
h5tools_utils.c:89:9: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
         HDvprintf(format, ap);
         ^
In file included from h5tools_utils.c:33:0:
h5tools_utils.c:92:76: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bytes_written = HDvsnprintf(outBuff+outBuffOffset, OUTBUFF_SIZE-outBuffOffset, format, ap);
                                                                            ^
../../src/H5private.h:1411:48: note: in definition of macro 'HDvsnprintf'
     #define HDvsnprintf(S,N,FMT,A) vsnprintf(S,N,FMT,A)
                                                ^
h5tools_utils.c:92:13: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
             bytes_written = HDvsnprintf(outBuff+outBuffOffset, OUTBUFF_SIZE-outBuffOffset, format, ap);
             ^
h5tools_utils.c:92:13: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
h5tools_utils.c:104:21: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
                     bytes_written = HDvfprintf(overflow_file, format, ap);
                     ^
h5tools_utils.c:110:13: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
             bytes_written = HDvfprintf(overflow_file, format, ap);
             ^
h5tools_utils.c: In function 'error_msg':
h5tools_utils.c:142:5: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
     HDvfprintf(rawerrorstream, fmt, ap);
     ^
h5tools_utils.c: In function 'warn_msg':
h5tools_utils.c:173:5: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
     HDvfprintf(rawerrorstream, fmt, ap);
     ^
In file included from h5tools_utils.c:31:0:
h5tools_utils.c: In function 'print_version':
h5tools_utils.c:406:13: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
            ((char *)H5_VERS_SUBRELEASE)[0] ? "-" : "", H5_VERS_SUBRELEASE);
             ^
h5tools.h:41:65: note: in definition of macro 'PRINTSTREAM'
 #define PRINTSTREAM(S, F, ...)   {if(S != NULL) HDfprintf(S, F, __VA_ARGS__);}
                                                                 ^
h5tools_utils.c: In function 'find_objs_cb':
h5tools_utils.c:566:5: warning: enumeration value 'H5O_TYPE_UNKNOWN' not handled in switch [-Wswitch-enum]
     switch(oinfo->type) {
     ^
h5tools_utils.c:566:5: warning: enumeration value 'H5O_TYPE_NTYPES' not handled in switch [-Wswitch-enum]
h5tools_utils.c: In function 'add_obj':
h5tools_utils.c:685:21: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     u = table->nobjs++;
                     ^
h5tools_utils.c: In function 'h5tools_getenv_update_hyperslab_bufsize':
h5tools_utils.c:918:55: warning: conversion to 'hsize_t' from 'long int' may change the sign of the result [-Wsign-conversion]
         H5TOOLS_BUFSIZE = hyperslab_bufsize_mb * 1024 * 1024;
                                                       ^
h5tools_utils.c: In function 'search_obj':
h5tools_utils.c:532:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 search_obj(table_t *table, haddr_t objno)
 ^
h5tools_utils.c: In function 'h5tools_getprogname':
h5tools_utils.c:879:12: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 const char*h5tools_getprogname(void)
            ^
h5tools_utils.c: In function 'h5tools_getstatus':
h5tools_utils.c:884:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int h5tools_getstatus(void)
     ^
  CC       h5diff.lo
h5diff.c: In function 'print_objname':
h5diff.c:33:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int print_objname (diff_opt_t * options, hsize_t nfound)
     ^
h5diff.c: In function 'h5diff':
h5diff.c:912:38: warning: 'info2_lp' may be used uninitialized in this function [-Wmaybe-uninitialized]
                 size_t idx = info2_lp->nused - 1;
                                      ^
h5diff.c:867:38: warning: 'info1_lp' may be used uninitialized in this function [-Wmaybe-uninitialized]
                 size_t idx = info1_lp->nused - 1;
                                      ^
  CC       h5diff_array.lo
h5diff_array.c: In function 'diff_datum':
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:1986:17: note: in expansion of macro 'PER'
                 PER(f1,f2);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:1986:17: note: in expansion of macro 'PER'
                 PER(f1,f2);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:1986:17: note: in expansion of macro 'PER'
                 PER(f1,f2);
                 ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2018:17: note: in expansion of macro 'PER'
                 PER(f1,f2);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2018:17: note: in expansion of macro 'PER'
                 PER(f1,f2);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2018:17: note: in expansion of macro 'PER'
                 PER(f1,f2);
                 ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2158:21: note: in expansion of macro 'PER'
                     PER(temp1_float,temp2_float);
                     ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2158:21: note: in expansion of macro 'PER'
                     PER(temp1_float,temp2_float);
                     ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2158:21: note: in expansion of macro 'PER'
                     PER(temp1_float,temp2_float);
                     ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2223:21: note: in expansion of macro 'PER'
                     PER(temp1_float,temp2_float);
                     ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2223:21: note: in expansion of macro 'PER'
                     PER(temp1_float,temp2_float);
                     ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2223:21: note: in expansion of macro 'PER'
                     PER(temp1_float,temp2_float);
                     ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2370:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2370:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2370:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2435:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2435:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2435:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2584:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2584:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2584:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:2648:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:2648:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:2648:21: note: in expansion of macro 'PER'
                     PER(temp1_double,temp2_double);
                     ^
h5diff_array.c: In function 'character_compare_opt':
h5diff_array.c:3047:24: warning: variable 'both_zero' set but not used [-Wunused-but-set-variable]
     hbool_t            both_zero;
                        ^
h5diff_array.c: In function 'diff_float':
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:3225:17: note: in expansion of macro 'PER'
                 PER(temp1_float,temp2_float);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:3225:17: note: in expansion of macro 'PER'
                 PER(temp1_float,temp2_float);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:3225:17: note: in expansion of macro 'PER'
                 PER(temp1_float,temp2_float);
                 ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:3299:17: note: in expansion of macro 'PER'
                 PER(temp1_float,temp2_float);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:3299:17: note: in expansion of macro 'PER'
                 PER(temp1_float,temp2_float);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:3299:17: note: in expansion of macro 'PER'
                 PER(temp1_float,temp2_float);
                 ^
h5diff_array.c: In function 'diff_double':
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:3498:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:3498:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:3498:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:3572:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:3572:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:3572:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c: In function 'diff_ldouble':
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:3781:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:3781:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:3781:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:3855:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:3855:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:3855:17: note: in expansion of macro 'PER'
                 PER(temp1_double,temp2_double);
                 ^
h5diff_array.c: In function 'diff_ullong':
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:5626:10: note: in expansion of macro 'PER'
          PER(f1,f2);
          ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:5626:10: note: in expansion of macro 'PER'
          PER(f1,f2);
          ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:5626:10: note: in expansion of macro 'PER'
          PER(f1,f2);
          ^
h5diff_array.c:109:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
          ^
h5diff_array.c:5671:10: note: in expansion of macro 'PER'
          PER(f1,f2);
          ^
h5diff_array.c:109:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 == (A) && 0 == (B))                         \
                      ^
h5diff_array.c:5671:10: note: in expansion of macro 'PER'
          PER(f1,f2);
          ^
h5diff_array.c:111:10: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(0 != (A))                                     \
          ^
h5diff_array.c:5671:10: note: in expansion of macro 'PER'
          PER(f1,f2);
          ^
h5diff_array.c: In function 'equal_double':
h5diff_array.c:5831:15: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if (value == expected)
               ^
h5diff_array.c: In function 'equal_ldouble':
h5diff_array.c:5884:15: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if (value == expected)
               ^
h5diff_array.c: In function 'equal_float':
h5diff_array.c:5941:15: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if (value == expected)
               ^
h5diff_array.c: In function 'my_isnan':
h5diff_array.c:5982:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         retval = (x!=x);
                    ^
h5diff_array.c:5989:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         retval = (x!=x);
                    ^
h5diff_array.c:5997:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
         retval = (x!=x);
                    ^
  CC       h5diff_attr.lo
  CC       h5diff_dset.lo
h5diff_dset.c: In function 'diff_can_type':
h5diff_dset.c:677:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch (tclass1)
     ^
h5diff_dset.c:677:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
h5diff_dset.c:677:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
  CC       h5diff_util.lo
h5diff_util.c: In function 'print_type':
h5diff_util.c:79:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch (H5Tget_class(type))
     ^
h5diff_util.c:79:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_COMPOUND' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
h5diff_util.c:79:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
h5diff_util.c: In function 'get_type':
h5diff_util.c:211:5: warning: enumeration value 'H5TRAV_TYPE_UNKNOWN' not handled in switch [-Wswitch-enum]
     switch(type) {
     ^
h5diff_util.c: In function 'get_sign':
h5diff_util.c:243:5: warning: enumeration value 'H5T_SGN_ERROR' not handled in switch [-Wswitch-enum]
     switch (sign)
     ^
h5diff_util.c:243:5: warning: enumeration value 'H5T_NSGN' not handled in switch [-Wswitch-enum]
h5diff_util.c: In function 'get_class':
h5diff_util.c:269:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch (tclass)
     ^
h5diff_util.c:269:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
h5diff_util.c: In function 'diff_basename':
h5diff_util.c:178:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 diff_basename(const char *name)
 ^
h5diff_util.c: In function 'get_type':
h5diff_util.c:209:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 get_type(h5trav_type_t type)
 ^
h5diff_util.c: In function 'get_sign':
h5diff_util.c:241:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 get_sign(H5T_sign_t sign)
 ^
h5diff_util.c: In function 'get_class':
h5diff_util.c:267:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 get_class(H5T_class_t tclass)
 ^
  CC       h5trav.lo
h5trav.c: In function 'h5trav_getindex':
h5trav.c:494:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 h5trav_getindex(const trav_info_t *info, const char *obj)
 ^
h5trav.c: In function 'h5trav_getindext':
h5trav.c:685:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 h5trav_getindext(const char *name, const trav_table_t *table)
 ^
h5trav.c: In function 'symlink_is_visited':
h5trav.c:1239:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 symlink_is_visited(symlink_trav_t *visited, H5L_type_t type, const char *file, const char *path)
 ^
  CC       h5tools_filters.lo
h5tools_filters.c: In function 'h5tools_can_encode':
h5tools_filters.c:150:5: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 int h5tools_can_encode(H5Z_filter_t filtn) {
     ^
  CC       h5tools_ref.lo
In file included from h5tools_ref.c:19:0:
h5tools_ref.c: In function 'free_ref_path_info':
h5tools_ref.c:68:12: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     HDfree((void *)node->path);
            ^
../../src/H5private.h:778:31: note: in definition of macro 'HDfree'
     #define HDfree(M)    free(M)
                               ^
h5tools_ref.c: In function 'ref_path_table_put':
h5tools_ref.c:221:18: warning: request for implicit conversion from 'void *' to 'struct ref_path_node_t *' not permitted in C++ [-Wc++-compat]
     if((new_node = HDmalloc(sizeof(ref_path_node_t))) == NULL)
                  ^
h5tools_ref.c: In function 'lookup_ref_path':
h5tools_ref.c:303:10: warning: request for implicit conversion from 'void *' to 'struct ref_path_node_t *' not permitted in C++ [-Wc++-compat]
     node = H5SL_search(ref_path_table, &ref);
          ^
  CC       h5tools_type.lo
h5tools_type.c: In function 'h5tools_get_little_endian_type':
h5tools_type.c:78:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch( type_class )
     ^
h5tools_type.c:78:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
h5tools_type.c: In function 'h5tools_get_big_endian_type':
h5tools_type.c:155:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch( type_class )
     ^
h5tools_type.c:155:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
  CC       io_timer.lo
io_timer.c: In function 'sub_time':
io_timer.c:58:27: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
      ((double)a->tv_usec) / MICROSECOND) -
                           ^
io_timer.c:60:25: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    ((double)b->tv_usec) / MICROSECOND));
                         ^
io_timer.c: In function 'set_time':
io_timer.c:147:5: warning: enumeration value 'MPI_CLOCK' not handled in switch [-Wswitch-enum]
     switch(pt->type){
     ^
io_timer.c: In function 'get_time':
io_timer.c:222:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 get_time(io_time_t *pt, timer_type t)
 ^
  CCLD     libh5tools.la
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/lib'
Making all in h5diff
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5diff'
  CC       h5diff_main.o
h5diff_main.c: In function ‘h5diff_exit’:
h5diff_main.c:139:6: warning: function might be candidate for attribute ‘noreturn’ [-Wsuggest-attribute=noreturn]
 void h5diff_exit(int status)
      ^
  CC       h5diff_common.o
h5diff_common.c: In function ‘parse_command_line’:
h5diff_common.c:191:38: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
             exclude_node->obj_path = (char*)opt_arg;
                                      ^
h5diff_common.c:221:32: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if (options->delta == 0)
                                ^
h5diff_common.c:238:34: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if (options->percent == 0)
                                  ^
h5diff_common.c:252:34: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
             options->count = atol( opt_arg );
                                  ^
h5diff_common.c: In function ‘check_n_input’:
h5diff_common.c:362:1: warning: function might be candidate for attribute ‘pure’ if it is known to return normally [-Wsuggest-attribute=pure]
 check_n_input( const char *str )
 ^
  CCLD     h5diff
  CC       h5diffgentest.o
h5diffgentest.c: In function ‘test_comp_vlen_strings’:
h5diffgentest.c:3702:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp1_buf.str_vlen = comp1_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3703:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp2_buf.str_vlen = comp2_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3704:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp3_buf.str_vlen = comp3_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3705:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp4_buf.str_vlen = comp4_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3706:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp5_buf.str_vlen = comp5_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3707:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp6_buf.str_vlen = comp6_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3708:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp7_buf.str_vlen = comp7_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3709:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp8_buf.str_vlen = comp8_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3710:52: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
     comp9_buf.str_vlen = comp9_buf.str_vlen_repeat = vlen_str_buf;
                                                    ^
h5diffgentest.c:3746:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp1_buf.str_array_vlen[i] = comp1_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3747:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp2_buf.str_array_vlen[i] = comp2_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3748:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp3_buf.str_array_vlen[i] = comp3_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3749:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp4_buf.str_array_vlen[i] = comp4_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3750:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp5_buf.str_array_vlen[i] = comp5_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3751:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp6_buf.str_array_vlen[i] = comp6_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3752:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp7_buf.str_array_vlen[i] = comp7_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3753:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp8_buf.str_array_vlen[i] = comp8_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c:3754:73: warning: assignment discards ‘const’ qualifier from pointer target type [enabled by default]
         comp9_buf.str_array_vlen[i] = comp9_buf.str_vlen_array_again[i] = vlen_str_array_buf[i];
                                                                         ^
h5diffgentest.c: In function ‘test_comps_array’:
h5diffgentest.c:4372:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             wdata[i].cmpd2[j].f2 = (float)(i*10.5F) + diff;
             ^
h5diffgentest.c:4372:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5diffgentest.c:4363:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5diffgentest.c: In function ‘test_comps_vlen’:
h5diffgentest.c:4483:9: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].i1 = i;
         ^
h5diffgentest.c:4488:13: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             ((cmpd2_t *)wdata[i].vl.p)[j].i2 = i*10 + diff;
             ^
h5diffgentest.c:4488:53: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             ((cmpd2_t *)wdata[i].vl.p)[j].i2 = i*10 + diff;
                                                     ^
h5diffgentest.c:4489:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             ((cmpd2_t *)wdata[i].vl.p)[j].f2 = (float)(i*10.5F) + diff;
             ^
h5diffgentest.c:4489:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5diffgentest.c:4478:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
In file included from h5diffgentest.c:19:0:
h5diffgentest.c: In function ‘test_comps_array_vlen’:
h5diffgentest.c:4609:49: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i].cmpd2[j].vl.p = HDmalloc((j+1)*sizeof(cmpd3_t));
                                                 ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5diffgentest.c:4610:41: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i].cmpd2[j].vl.len = j+1;
                                         ^
h5diffgentest.c:4611:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(j+1); k++) 
             ^
h5diffgentest.c:4615:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 ((cmpd3_t *)wdata[i].cmpd2[j].vl.p)[k].f3 = (float)(j*10.5F) + diff;
                 ^
h5diffgentest.c:4615:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5diffgentest.c:4597:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5diffgentest.c: In function ‘test_comps_vlen_arry’:
h5diffgentest.c:4752:9: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].i1 = i;
         ^
h5diffgentest.c:4758:13: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             ((cmpd2_t *)wdata[i].vl.p)[j].i2 = i*10 + diff;
             ^
h5diffgentest.c:4758:53: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             ((cmpd2_t *)wdata[i].vl.p)[j].i2 = i*10 + diff;
                                                     ^
h5diffgentest.c:4762:17: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
                 ((cmpd2_t *)(wdata[i].vl.p))[j].cmpd3[k].i3 = k*10.5F + diff;
                 ^
h5diffgentest.c:4762:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5diffgentest.c:4762:71: warning: conversion to ‘int’ from ‘float’ may alter its value [-Wconversion]
                 ((cmpd2_t *)(wdata[i].vl.p))[j].cmpd3[k].i3 = k*10.5F + diff;
                                                                       ^
h5diffgentest.c:4763:17: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
                 ((cmpd2_t *)(wdata[i].vl.p))[j].cmpd3[k].f3 = (float)(k*10.5F) + diff;
                 ^
h5diffgentest.c:4763:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5diffgentest.c:4746:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5diffgentest.c: In function ‘test_data_nocomparables’:
h5diffgentest.c:5026:5: warning: request for implicit conversion from ‘void *’ to ‘hsize_t *’ not permitted in C++ [-Wc++-compat]
     write_attr(did2,1, attr2_dim_ptr,"attr2", H5T_NATIVE_INT, data3);
     ^
h5diffgentest.c:5029:5: warning: request for implicit conversion from ‘void *’ to ‘hsize_t *’ not permitted in C++ [-Wc++-compat]
     write_attr(did2, rank_attr,attr3_dim_ptr,"attr3", H5T_NATIVE_INT, attr_data_ptr3);
     ^
In file included from h5diffgentest.c:19:0:
h5diffgentest.c: In function ‘write_attr_in’:
h5diffgentest.c:5752:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].p = HDmalloc((i + 1) * sizeof(int));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5diffgentest.c:5753:33: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].len = i + 1;
                                 ^
h5diffgentest.c:5754:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for (l = 0; l < i + 1; l++)
             ^
h5diffgentest.c:5968:38: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 else buf23[i][j][k]=n++;
                                      ^
h5diffgentest.c:6029:39: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                     buf33[i][j][k].a=n++;
                                       ^
In file included from h5diffgentest.c:19:0:
h5diffgentest.c:6168:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].p = HDmalloc((i + 1) * sizeof(int));
                                                ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5diffgentest.c:6169:40: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].len = i + 1;
                                        ^
h5diffgentest.c:6170:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for (l = 0; l < i + 1; l++)
                 ^
h5diffgentest.c:5246:13: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t  status;
             ^
h5diffgentest.c: In function ‘write_dset_in’:
h5diffgentest.c:6544:17: warning: declaration of ‘did’ shadows a previous local [-Wshadow]
         hid_t   did;                             /* dataset ID   */
                 ^
h5diffgentest.c:6297:13: warning: shadowed declaration is here [-Wshadow]
     hid_t   did;
             ^
h5diffgentest.c:6545:17: warning: declaration of ‘sid’ shadows a previous local [-Wshadow]
         hid_t   sid;                             /* dataspace ID   */
                 ^
h5diffgentest.c:6298:13: warning: shadowed declaration is here [-Wshadow]
     hid_t   sid;
             ^
h5diffgentest.c:6546:17: warning: declaration of ‘tid’ shadows a previous local [-Wshadow]
         hid_t   tid;                             /* datatype ID   */
                 ^
h5diffgentest.c:6299:13: warning: shadowed declaration is here [-Wshadow]
     hid_t   tid;
             ^
h5diffgentest.c:6550:17: warning: declaration of ‘j’ shadows a previous local [-Wshadow]
         int     j;
                 ^
h5diffgentest.c:6302:21: warning: shadowed declaration is here [-Wshadow]
     int     val, i, j, k, l, n;
                     ^
h5diffgentest.c:6554:14: warning: request for implicit conversion from ‘void *’ to ‘double *’ not permitted in C++ [-Wc++-compat]
         dbuf = HDmalloc( size );
              ^
h5diffgentest.c:6556:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for( j = 0; j < H5TOOLS_MALLOCSIZE / sizeof(double) + 1; j++)
                       ^
In file included from h5diffgentest.c:19:0:
h5diffgentest.c:6712:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].p = HDmalloc((i + 1) * sizeof(int));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5diffgentest.c:6713:33: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].len = i + 1;
                                 ^
h5diffgentest.c:6714:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(l = 0; l < i + 1; l++)
             ^
h5diffgentest.c:6834:38: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 else buf23[i][j][k]=n++;
                                      ^
h5diffgentest.c:6871:39: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                     buf33[i][j][k].a=n++;
                                       ^
In file included from h5diffgentest.c:19:0:
h5diffgentest.c:6925:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].p = HDmalloc((i + 1) * sizeof(int));
                                                ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5diffgentest.c:6926:40: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].len = i + 1;
                                        ^
h5diffgentest.c:6927:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for(l = 0; l < i + 1; l++)
                 ^
h5diffgentest.c:6301:13: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t  status;
             ^
h5diffgentest.c: In function ‘gen_datareg’:
h5diffgentest.c:7021:10: warning: request for implicit conversion from ‘void *’ to ‘unsigned char (*)[12]’ not permitted in C++ [-Wc++-compat]
     rbuf = HDcalloc((size_t)2, sizeof(hdset_reg_ref_t));
          ^
h5diffgentest.c:7024:9: warning: request for implicit conversion from ‘void *’ to ‘int *’ not permitted in C++ [-Wc++-compat]
     buf = HDmalloc(10 * 10 * sizeof(int));
         ^
h5diffgentest.c:7017:21: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t          status;
                     ^
h5diffgentest.c: In function ‘test_hyperslab’:
h5diffgentest.c:7158:9: warning: conversion to ‘long long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         hs_start[0] = i * GBLL/(1024*1024);
         ^
h5diffgentest.c: In function ‘test_group_recurse2’:
h5diffgentest.c:3106:13: warning: ‘fileid4’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Fclose(fileid4);
             ^
h5diffgentest.c:3105:13: warning: ‘fileid3’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Fclose(fileid3);
             ^
h5diffgentest.c:3104:13: warning: ‘fileid2’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Fclose(fileid2);
             ^
h5diffgentest.c:3101:13: warning: ‘dataspace’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose(dataspace);
             ^
h5diffgentest.c:3102:13: warning: ‘datatype’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Tclose(datatype);
             ^
h5diffgentest.c: In function ‘test_attributes_verbose_level.constprop.3’:
h5diffgentest.c:1286:17: warning: ‘f2_tid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Tclose(f2_tid);
                 ^
h5diffgentest.c:1284:17: warning: ‘f1_tid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Tclose(f1_tid);
                 ^
h5diffgentest.c:1282:17: warning: ‘f2_sid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Sclose(f2_sid);
                 ^
h5diffgentest.c:1280:17: warning: ‘f1_sid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Sclose(f1_sid);
                 ^
h5diffgentest.c:1278:17: warning: ‘f2_did’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Dclose(f2_did);
                 ^
h5diffgentest.c:1276:17: warning: ‘f1_did’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Dclose(f1_did);
                 ^
h5diffgentest.c:1274:17: warning: ‘f2_gid4’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f2_gid4);
                 ^
h5diffgentest.c:1272:17: warning: ‘f1_gid4’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f1_gid4);
                 ^
h5diffgentest.c:1270:17: warning: ‘f2_gid3’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f2_gid3);
                 ^
h5diffgentest.c:1268:17: warning: ‘f1_gid3’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f1_gid3);
                 ^
h5diffgentest.c:1266:17: warning: ‘f2_gid2’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f2_gid2);
                 ^
h5diffgentest.c:1264:17: warning: ‘f1_gid2’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f1_gid2);
                 ^
h5diffgentest.c:1262:17: warning: ‘f2_gid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f2_gid);
                 ^
h5diffgentest.c:1260:17: warning: ‘f1_gid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(f1_gid);
                 ^
h5diffgentest.c:1258:17: warning: ‘fid2’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Fclose(fid2);
                 ^
h5diffgentest.c: In function ‘test_comp_vlen_strings.constprop.15’:
h5diffgentest.c:4159:17: warning: ‘gid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(gid);
                 ^
  CCLD     h5diffgentest
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5diff'
Making all in h5ls
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5ls'
  CC       h5ls.o
h5ls.c: In function ‘dataset_list2’:
h5ls.c:1789:9: warning: enumeration value ‘H5D_LAYOUT_ERROR’ not handled in switch [-Wswitch-enum]
         switch (stl) {
         ^
h5ls.c:1789:9: warning: enumeration value ‘H5D_NLAYOUTS’ not handled in switch [-Wswitch-enum]
h5ls.c:1762:17: warning: unused variable ‘dset_name’ [-Wunused-variable]
     char        dset_name[256];    /* filter/file name */
                 ^
h5ls.c: In function ‘usage’:
cc1: warning: size of ‘*.LC0’ is 3173 bytes [-Wlarger-than=]
  CCLD     h5ls
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5ls'
Making all in h5dump
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5dump'
  CC       h5dump.o
h5dump.c: In function ‘table_list_add’:
h5dump.c:397:27: warning: request for implicit conversion from ‘void *’ to ‘struct <anonymous> *’ not permitted in C++ [-Wc++-compat]
         table_list.tables = tmp_ptr;
                           ^
h5dump.c: In function ‘parse_hsize_list’:
h5dump.c:638:27: warning: cast from function call of type ‘double’ to non-matching type ‘long long unsigned int’ [-Wbad-function-cast]
             p_list[i++] = (hsize_t)HDatof(ptr);
                           ^
h5dump.c: In function ‘parse_mask_list’:
h5dump.c:740:46: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         if (offset_value < 0 || offset_value >= PACKED_BITS_SIZE_MAX) {
                                              ^
h5dump.c:765:43: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         if ((offset_value + length_value) > PACKED_BITS_SIZE_MAX){
                                           ^
h5dump.c:786:9: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
         temp_mask = ~0L;
         ^
h5dump.c:787:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         if(length_value<8*sizeof(unsigned long long)) {
                        ^
h5dump.c: In function ‘h5_fileaccess’:
h5dump.c:1682:25: warning: size of ‘sv’ is 7168 bytes [-Wlarger-than=]
         char            sv[H5FD_MEM_NTYPES][1024];
                         ^
In file included from h5dump.h:19:0,
                 from h5dump.c:18:
h5dump.c:1697:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             memb_addr[mt] = MAX(mt-1,0)*(HADDR_MAX/10);
                                   ^
../../src/H5private.h:328:35: note: in definition of macro ‘MAX’
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                   ^
h5dump.c:1697:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             memb_addr[mt] = MAX(mt-1,0)*(HADDR_MAX/10);
             ^
h5dump.c: In function ‘table_list_visited’:
h5dump.c:438:1: warning: function might be candidate for attribute ‘pure’ if it is known to return normally [-Wsuggest-attribute=pure]
 table_list_visited(unsigned long file_no)
 ^
h5dump.c: In function ‘h5_fileaccess’:
h5dump.c:1639:1: warning: stack usage is 8448 bytes [-Wstack-usage=]
 h5_fileaccess(void)
 ^
  CC       h5dump_ddl.o
h5dump_ddl.c: In function ‘dump_datatype’:
h5dump_ddl.c:63:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c: In function ‘dump_dataspace’:
h5dump_ddl.c:92:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c: In function ‘dump_attr_cb’:
h5dump_ddl.c:126:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c:145:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c: In function ‘dump_all_cb’:
h5dump_ddl.c:201:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c:215:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c:242:9: warning: enumeration value ‘H5O_TYPE_UNKNOWN’ not handled in switch [-Wswitch-enum]
         switch(oinfo.type) {
         ^
h5dump_ddl.c:242:9: warning: enumeration value ‘H5O_TYPE_NTYPES’ not handled in switch [-Wswitch-enum]
h5dump_ddl.c:389:9: warning: enumeration value ‘H5L_TYPE_ERROR’ not handled in switch [-Wswitch-enum]
         switch(linfo->type) {
         ^
h5dump_ddl.c:389:9: warning: enumeration value ‘H5L_TYPE_HARD’ not handled in switch [-Wswitch-enum]
h5dump_ddl.c:389:9: warning: enumeration value ‘H5L_TYPE_MAX’ not handled in switch [-Wswitch-enum]
h5dump_ddl.c: At top level:
h5dump_ddl.c:570:1: warning: no previous prototype for ‘attr_iteration’ [-Wmissing-prototypes]
 attr_iteration(hid_t gid, unsigned attr_crt_order_flags)
 ^
h5dump_ddl.c:600:1: warning: no previous prototype for ‘link_iteration’ [-Wmissing-prototypes]
 link_iteration(hid_t gid, unsigned crt_order_flags)
 ^
h5dump_ddl.c: In function ‘dump_named_datatype’:
h5dump_ddl.c:645:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c:659:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c: In function ‘dump_group’:
h5dump_ddl.c:808:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c:822:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c: In function ‘dump_dataset’:
h5dump_ddl.c:943:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c:957:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c:1028:13: warning: enumeration value ‘H5T_NO_CLASS’ not handled in switch [-Wswitch-enum]
             switch(H5Tget_class(type)) {
             ^
h5dump_ddl.c:1028:13: warning: enumeration value ‘H5T_NCLASSES’ not handled in switch [-Wswitch-enum]
h5dump_ddl.c: In function ‘dump_data’:
h5dump_ddl.c:1122:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c:1129:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c: In function ‘attr_search’:
h5dump_ddl.c:1316:44: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
          k = (size_t)i + 1 + (size_t)j + 1 + 2;
                                            ^
h5dump_ddl.c: In function ‘obj_search’:
h5dump_ddl.c:1347:22: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
     attr_data.path = (char*)path;
                      ^
In file included from h5dump_ddl.c:18:0:
h5dump_ddl.c: In function ‘lnk_search’:
../../src/H5private.h:1267:34: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     #define HDstrlen(S)    strlen(S)
                                  ^
h5dump_ddl.c:1382:18: note: in expansion of macro ‘HDstrlen’
     search_len = HDstrlen(op_name);
                  ^
h5dump_ddl.c: In function ‘handle_paths’:
h5dump_ddl.c:1470:26: warning: cast discards ‘__attribute__((const))’ qualifier from pointer target type [-Wcast-qual]
   handle_udata.op_name = (char*)path_name;
                          ^
h5dump_ddl.c: In function ‘handle_attributes’:
h5dump_ddl.c:1532:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_ddl.c:1546:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_ddl.c: In function ‘handle_datasets’:
h5dump_ddl.c:1675:13: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             ndims = ndims_res;
             ^
h5dump_ddl.c: In function ‘handle_links’:
h5dump_ddl.c:1873:9: warning: enumeration value ‘H5L_TYPE_ERROR’ not handled in switch [-Wswitch-enum]
         switch(linfo.type) {
         ^
h5dump_ddl.c:1873:9: warning: enumeration value ‘H5L_TYPE_HARD’ not handled in switch [-Wswitch-enum]
h5dump_ddl.c:1873:9: warning: enumeration value ‘H5L_TYPE_MAX’ not handled in switch [-Wswitch-enum]
h5dump_ddl.c: In function ‘dump_extlink’:
h5dump_ddl.c:2075:9: warning: enumeration value ‘H5O_TYPE_UNKNOWN’ not handled in switch [-Wswitch-enum]
         switch (oi.type) {
         ^
h5dump_ddl.c:2075:9: warning: enumeration value ‘H5O_TYPE_NTYPES’ not handled in switch [-Wswitch-enum]
In file included from h5dump_ddl.c:18:0:
h5dump_ddl.c: In function ‘handle_attributes’:
../../src/H5private.h:778:30: warning: ‘attr_name’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     #define HDfree(M)    free(M)
                              ^
h5dump_ddl.c:1501:11: note: ‘attr_name’ was declared here
     char *attr_name;
           ^
  CC       h5dump_xml.o
h5dump_xml.c: In function ‘xml_dump_all_cb’:
h5dump_xml.c:160:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:174:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:201:9: warning: enumeration value ‘H5O_TYPE_UNKNOWN’ not handled in switch [-Wswitch-enum]
         switch(oinfo.type) {
         ^
h5dump_xml.c:201:9: warning: enumeration value ‘H5O_TYPE_NTYPES’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:371:9: warning: enumeration value ‘H5L_TYPE_ERROR’ not handled in switch [-Wswitch-enum]
         switch(linfo->type) {
         ^
h5dump_xml.c:371:9: warning: enumeration value ‘H5L_TYPE_HARD’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:371:9: warning: enumeration value ‘H5L_TYPE_MAX’ not handled in switch [-Wswitch-enum]
h5dump_xml.c: In function ‘xml_escape_the_string’:
h5dump_xml.c:751:9: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         len = slen;
         ^
h5dump_xml.c: In function ‘xml_print_datatype’:
h5dump_xml.c:874:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:888:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:971:13: warning: enumeration value ‘H5T_ORDER_ERROR’ not handled in switch [-Wswitch-enum]
             switch (ord) {
             ^
h5dump_xml.c:971:13: warning: enumeration value ‘H5T_ORDER_MIXED’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:971:13: warning: enumeration value ‘H5T_ORDER_NONE’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:985:13: warning: enumeration value ‘H5T_SGN_ERROR’ not handled in switch [-Wswitch-enum]
             switch (sgn) {
             ^
h5dump_xml.c:985:13: warning: enumeration value ‘H5T_NSGN’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:1035:13: warning: enumeration value ‘H5T_ORDER_ERROR’ not handled in switch [-Wswitch-enum]
             switch (ord) {
             ^
h5dump_xml.c:1035:13: warning: enumeration value ‘H5T_ORDER_MIXED’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:1035:13: warning: enumeration value ‘H5T_ORDER_NONE’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:1174:13: warning: enumeration value ‘H5T_ORDER_ERROR’ not handled in switch [-Wswitch-enum]
             switch (ord) {
             ^
h5dump_xml.c:1174:13: warning: enumeration value ‘H5T_ORDER_MIXED’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:1174:13: warning: enumeration value ‘H5T_ORDER_NONE’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:1238:39: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             nmembers = H5Tget_nmembers(type);
                                       ^
h5dump_xml.c:1462:39: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             ndims = H5Tget_array_ndims(type);
                                       ^
h5dump_xml.c:950:9: warning: enumeration value ‘H5T_NO_CLASS’ not handled in switch [-Wswitch-enum]
         switch (H5Tget_class(type)) {
         ^
h5dump_xml.c:950:9: warning: enumeration value ‘H5T_NCLASSES’ not handled in switch [-Wswitch-enum]
h5dump_xml.c: In function ‘xml_dump_datatype’:
h5dump_xml.c:1562:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:1576:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_dump_dataspace’:
h5dump_xml.c:1701:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:1715:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:1731:5: warning: enumeration value ‘H5S_NULL’ not handled in switch [-Wswitch-enum]
     switch (space_type) {
     ^
h5dump_xml.c: In function ‘xml_dump_data’:
h5dump_xml.c:1876:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:1894:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_dump_attr’:
h5dump_xml.c:2074:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:2088:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:2114:13: warning: enumeration value ‘H5T_NO_CLASS’ not handled in switch [-Wswitch-enum]
             switch (H5Tget_class(type)) {
             ^
h5dump_xml.c:2114:13: warning: enumeration value ‘H5T_NCLASSES’ not handled in switch [-Wswitch-enum]
h5dump_xml.c: In function ‘xml_dump_named_datatype’:
h5dump_xml.c:2400:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:2414:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_dump_group’:
h5dump_xml.c:2625:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:2639:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_print_refs’:
h5dump_xml.c:2980:9: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         buf = (char *) HDcalloc((size_t)(ssiz * tsiz), sizeof(char));
         ^
h5dump_xml.c:2996:9: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         buf = (char *) HDcalloc((size_t)(ssiz * tsiz), sizeof(char));
         ^
h5dump_xml.c:3014:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:3028:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_print_strs’:
h5dump_xml.c:3138:9: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         buf = HDmalloc((size_t)(ssiz * tsiz));
         ^
h5dump_xml.c:3154:9: warning: conversion to ‘long long unsigned int’ from ‘hssize_t’ may change the sign of the result [-Wsign-conversion]
         buf = HDmalloc((size_t)(ssiz * tsiz));
         ^
h5dump_xml.c:3173:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:3187:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:3192:19: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (i = 0; i < ssiz; i++) {
                   ^
h5dump_xml.c: In function ‘check_filters’:
h5dump_xml.c:3289:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:3303:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_dump_fill_value’:
h5dump_xml.c:3429:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:3443:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:3566:13: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
             h5tools_str_append(&buffer, "\"%f\"", *(float *) buf);
             ^
h5dump_xml.c:3526:9: warning: enumeration value ‘H5T_NO_CLASS’ not handled in switch [-Wswitch-enum]
         switch (H5Tget_class(type)) {
         ^
h5dump_xml.c:3526:9: warning: enumeration value ‘H5T_STRING’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:3526:9: warning: enumeration value ‘H5T_REFERENCE’ not handled in switch [-Wswitch-enum]
h5dump_xml.c:3526:9: warning: enumeration value ‘H5T_NCLASSES’ not handled in switch [-Wswitch-enum]
h5dump_xml.c: In function ‘xml_dump_dataset’:
h5dump_xml.c:3793:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:3811:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c:4006:5: warning: enumeration value ‘H5D_FILL_TIME_ERROR’ not handled in switch [-Wswitch-enum]
     switch (ft) {
     ^
h5dump_xml.c:4023:5: warning: enumeration value ‘H5D_ALLOC_TIME_ERROR’ not handled in switch [-Wswitch-enum]
     switch (at) {
     ^
h5dump_xml.c:4116:9: warning: enumeration value ‘H5T_NO_CLASS’ not handled in switch [-Wswitch-enum]
         switch (H5Tget_class(type)) {
         ^
h5dump_xml.c:4116:9: warning: enumeration value ‘H5T_NCLASSES’ not handled in switch [-Wswitch-enum]
h5dump_xml.c: In function ‘xml_print_enum’:
h5dump_xml.c:4376:5: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     ctx.cur_column = dump_indent;
     ^
h5dump_xml.c:4390:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         string_dataformat.line_ncols = h5tools_nCols;
         ^
h5dump_xml.c: In function ‘xml_print_refs’:
h5dump_xml.c:2943:17: warning: ‘ssiz’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     hssize_t    ssiz;
                 ^
h5dump_xml.c:3076:17: warning: ‘space’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Sclose(space);
                 ^
h5dump_xml.c: In function ‘xml_print_strs’:
h5dump_xml.c:3100:17: warning: ‘ssiz’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     hssize_t    ssiz;
                 ^
h5dump_xml.c:3249:17: warning: ‘space’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Sclose(space);
                 ^
h5dump_xml.c:3225:12: warning: ‘tsiz’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         bp += tsiz;
            ^
  CCLD     h5dump
  CC       h5dumpgentest.o
h5dumpgentest.c: In function ‘gent_dataset’:
h5dumpgentest.c:398:12: warning: size of ‘dset2’ is 4800 bytes [-Wlarger-than=]
     double dset2[30][20];
            ^
h5dumpgentest.c:423:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             dset2[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:423:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_dataset2’:
h5dumpgentest.c:439:12: warning: size of ‘dset2’ is 2400 bytes [-Wlarger-than=]
     double dset2[30][10];
            ^
h5dumpgentest.c: In function ‘gent_attribute’:
h5dumpgentest.c:518:5: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
     for(i = 0; i < 10; i++) d[i] = 0.1F * i;
     ^
h5dumpgentest.c: In function ‘gent_compound_dt’:
h5dumpgentest.c:921:13: warning: size of ‘dset3’ is 2448 bytes [-Wlarger-than=]
     dset3_t dset3[3][6];
             ^
h5dumpgentest.c:946:37: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset1[i].c = (float)(1.0F/(i+1));
                                     ^
h5dumpgentest.c:949:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset2[i].b = (float)(i+ i*0.1F);
         ^
h5dumpgentest.c:949:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c:955:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset5[i].b = (float)(i*0.1F);
         ^
h5dumpgentest.c: In function ‘gent_compound_dt2’:
h5dumpgentest.c:1131:37: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset1[i].c = (float)(1.0F/(i+1));
                                     ^
h5dumpgentest.c:1134:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset2[i].b = (float)(i+ i*0.1F);
         ^
h5dumpgentest.c:1134:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c:1137:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset4[i].b = (float)(i*1.0F);
         ^
h5dumpgentest.c:1140:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset5[i].b = (float)(i*1.0F);
         ^
h5dumpgentest.c: In function ‘gent_all’:
h5dumpgentest.c:1380:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset2_1[i] = (float)(i * 0.1F + 1);
         ^
h5dumpgentest.c:1391:45: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             dset2_2[i][j] = (float)((i + 1) * j * 0.1F);
                                             ^
h5dumpgentest.c: In function ‘gent_many’:
h5dumpgentest.c:1559:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         d[i] = 0.1F * i;
         ^
h5dumpgentest.c:1571:65: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         dset1[j].c[i3][i2][i1][i0] = (double)(i0+j+sdim);
                                                                 ^
h5dumpgentest.c:1488:12: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t ret;
            ^
h5dumpgentest.c: In function ‘gent_str’:
h5dumpgentest.c:1707:16: warning: size of ‘comp1’ is 12888 bytes [-Wlarger-than=]
     compound_t comp1[3][6];
                ^
h5dumpgentest.c: In function ‘gent_str2’:
h5dumpgentest.c:1874:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         start[0] = i;
         ^
h5dumpgentest.c:1887:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         start[0] = i;
         ^
h5dumpgentest.c:1907:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         start[0] = i;
         ^
h5dumpgentest.c:1921:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         start[0] = i;
         ^
h5dumpgentest.c:1940:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         start[0] = i;
         ^
h5dumpgentest.c:1954:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         start[0] = i;
         ^
h5dumpgentest.c: In function ‘gent_objref’:
h5dumpgentest.c:2040:21: warning: conversion to ‘uint32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *tu32++ = i * 3;
                     ^
h5dumpgentest.c: In function ‘gent_datareg’:
h5dumpgentest.c:2145:17: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         *tu8++=i*3;
                 ^
h5dumpgentest.c: In function ‘gent_attrreg’:
h5dumpgentest.c:2254:17: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         *tu8++=i*3;
                 ^
h5dumpgentest.c: In function ‘gent_nestcomp’:
h5dumpgentest.c:2372:26: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         s1[i].c = 1.0F/(i+1);
                          ^
h5dumpgentest.c:2373:24: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         s1[i].d.a = 65 + i;
                        ^
h5dumpgentest.c: In function ‘gent_opaque’:
h5dumpgentest.c:2444:9: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         test[x][0] = x;
         ^
h5dumpgentest.c:2445:25: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         test[x][1] = 99 - x;
                         ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c: In function ‘gent_vldatatypes’:
h5dumpgentest.c:2545:34: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].p = HDmalloc((i + 1) * sizeof(int));
                                  ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:2546:26: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].len = i + 1;
                          ^
h5dumpgentest.c:2548:9: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         for(j = 0; j < i + 1; j++)
         ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c:2572:34: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].p = HDmalloc((i + 1) * sizeof(float));
                                  ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:2573:26: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].len = i + 1;
                          ^
h5dumpgentest.c:2575:9: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         for(j = 0; j < i + 1; j++)
         ^
h5dumpgentest.c:2576:50: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             ((float *)wdata[i].p)[j] = (float)(i * 10 + ((float)j) / 10.0F);
                                                  ^
h5dumpgentest.c:2537:12: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t ret=0;
            ^
h5dumpgentest.c: In function ‘gent_vldatatypes2’:
h5dumpgentest.c:2632:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_vldatatypes3’:
h5dumpgentest.c:2709:21: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i].i=i*10;
                     ^
h5dumpgentest.c:2710:30: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
         wdata[i].f=(float)((i*20)/3.0F);
                              ^
h5dumpgentest.c:2705:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_vldatatypes4’:
h5dumpgentest.c:2781:41: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             ((s1 *)wdata[i].p)[j].i=i*10+j;
                                         ^
h5dumpgentest.c:2782:50: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             ((s1 *)wdata[i].p)[j].f=(float)((i*20+j)/3.0F);
                                                  ^
h5dumpgentest.c:2774:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_vldatatypes5’:
h5dumpgentest.c:2847:27: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i].len=i+5;
                           ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c:2848:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i].p=HDmalloc(sizeof(unsigned)*(i+5));
                                                    ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(j=0; j<i+5; j++)
             ^
h5dumpgentest.c:2850:46: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 ((unsigned *)wdata[i].p)[j]=j*2;
                                              ^
h5dumpgentest.c:2838:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array1_big’:
h5dumpgentest.c:2908:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array1’:
h5dumpgentest.c:2999:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array2’:
h5dumpgentest.c:3043:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array3’:
h5dumpgentest.c:3091:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array4’:
h5dumpgentest.c:3153:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             wdata[i][j].f=(float)(i*2.5F+j);
             ^
h5dumpgentest.c:3153:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c:3147:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array5’:
h5dumpgentest.c:3221:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 wdata[i][j].f[k]=(float)(i*10+j*2.5F+k);
                 ^
h5dumpgentest.c:3221:43: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 wdata[i][j].f[k]=(float)(i*10+j*2.5F+k);
                                           ^
h5dumpgentest.c:3221:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 wdata[i][j].f[k]=(float)(i*10+j*2.5F+k);
                 ^
h5dumpgentest.c:3214:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c: In function ‘gent_array6’:
h5dumpgentest.c:3289:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].p=HDmalloc((i+j+1)*sizeof(unsigned int));
                                        ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:3290:32: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].len=i+j+1;
                                ^
h5dumpgentest.c:3291:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
h5dumpgentest.c:3292:62: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 ((unsigned int *)wdata[i][j].p)[k]=i*100+j*10+k;
                                                              ^
h5dumpgentest.c:3284:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c: In function ‘gent_array7’:
h5dumpgentest.c:3350:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].p=HDmalloc((i+j+1)*(sizeof(unsigned int)*ARRAY1_DIM1));
                                        ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:3351:32: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].len=i+j+1;
                                ^
h5dumpgentest.c:3352:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
h5dumpgentest.c:3354:87: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     ((unsigned int *)wdata[i][j].p)[k*ARRAY1_DIM1+l]=i*1000+j*100+k*10+l;
                                                                                       ^
h5dumpgentest.c:3345:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t  ret;  /* Generic return value  */
             ^
h5dumpgentest.c: In function ‘gent_array8’:
h5dumpgentest.c:3412:17: warning: size of ‘wdata’ is 16400 bytes [-Wlarger-than=]
     int         wdata[(F64_DIM1) * sizeof(int)];      /* Write buffer */
                 ^
h5dumpgentest.c:3420:9: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
         wdata[i] = i;
         ^
h5dumpgentest.c:3409:17: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t      status = -1;
                 ^
h5dumpgentest.c: In function ‘gent_empty’:
h5dumpgentest.c:3470:12: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t ret=0;
            ^
h5dumpgentest.c: In function ‘gent_multi’:
h5dumpgentest.c:3676:10: warning: size of ‘sv’ is 7168 bytes [-Wlarger-than=]
     char sv[H5FD_MEM_NTYPES][1024];
          ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c:3694:32: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         memb_addr[mt] = MAX(mt - 1,0) * (HADDR_MAX / 10);
                                ^
../../src/H5private.h:328:35: note: in definition of macro ‘MAX’
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                   ^
h5dumpgentest.c:3694:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         memb_addr[mt] = MAX(mt - 1,0) * (HADDR_MAX / 10);
         ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c: In function ‘write_attr_in’:
h5dumpgentest.c:4081:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].p = HDmalloc((i + 1) * sizeof(int));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:4082:33: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].len = i + 1;
                                 ^
h5dumpgentest.c:4083:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(l = 0; l < i + 1; l++)
             ^
h5dumpgentest.c:4138:33: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 buf23[i][j][k]=n++;
                                 ^
h5dumpgentest.c:4164:35: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 buf33[i][j][k].a=n++;
                                   ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c:4213:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].p = HDmalloc((i + 1) * sizeof(int));
                                                ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:4214:40: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].len = i + 1;
                                        ^
h5dumpgentest.c:4215:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for(l = 0; l < i + 1; l++)
                 ^
h5dumpgentest.c:3858:13: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t  status;
             ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c: In function ‘write_dset_in’:
h5dumpgentest.c:4523:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].p = HDmalloc((i + 1) * sizeof(int));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:4524:33: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].len = i + 1;
                                 ^
h5dumpgentest.c:4525:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(l = 0; l < i + 1; l++)
             ^
h5dumpgentest.c:4592:33: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 buf23[i][j][k]=n++;
                                 ^
h5dumpgentest.c:4618:35: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 buf33[i][j][k].a=n++;
                                   ^
In file included from h5dumpgentest.c:28:0:
h5dumpgentest.c:4667:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].p = HDmalloc((i + 1) * sizeof(int));
                                                ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5dumpgentest.c:4668:40: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].len = i + 1;
                                        ^
h5dumpgentest.c:4669:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for(l = 0; l < i + 1; l++)
                 ^
h5dumpgentest.c:4299:13: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t  status;
             ^
h5dumpgentest.c: In function ‘gent_attr_all’:
h5dumpgentest.c:4742:13: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t  status;
             ^
h5dumpgentest.c: In function ‘gent_compound_complex’:
h5dumpgentest.c:4923:43: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].d[n][o] = m + n + o;
                                           ^
h5dumpgentest.c:4927:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         Array1[m].e = (float)( m * 0.96F );
         ^
h5dumpgentest.c:4930:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             Array1[m].f[n] = ( m * 1024.9637F );
             ^
h5dumpgentest.c:4900:16: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t     status;                    /* Error checking variable */
                ^
h5dumpgentest.c: In function ‘gent_named_dtype_attr’:
h5dumpgentest.c:5054:12: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t ret;
            ^
h5dumpgentest.c: In function ‘make_external’:
h5dumpgentest.c:5276:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int     ret;
             ^
h5dumpgentest.c: In function ‘gent_filters’:
h5dumpgentest.c:5324:23: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int      i, j, n, ret;
                       ^
h5dumpgentest.c: In function ‘gent_fcontents’:
h5dumpgentest.c:5670:14: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int      ret;
              ^
h5dumpgentest.c: In function ‘gent_fvalues’:
h5dumpgentest.c:5804:16: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int        ret;
                ^
h5dumpgentest.c: In function ‘gent_string’:
h5dumpgentest.c:5964:14: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int      ret;
              ^
h5dumpgentest.c: In function ‘gent_aindices’:
h5dumpgentest.c:6059:29: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int      i, j, k, l, n, ret;
                             ^
h5dumpgentest.c: In function ‘gent_longlinks’:
h5dumpgentest.c:6128:17: warning: variable ‘gid2’ set but not used [-Wunused-but-set-variable]
     hid_t       gid2 = (-1);    /* Datatype ID */
                 ^
h5dumpgentest.c: In function ‘gent_bigdims’:
h5dumpgentest.c:6307:13: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int     ret;
             ^
h5dumpgentest.c: In function ‘gent_hyperslab’:
h5dumpgentest.c:6403:17: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     int      i, ret;
                 ^
h5dumpgentest.c: In function ‘gent_packedbits’:
h5dumpgentest.c:6999:14: warning: size of ‘dsetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F66_XDIM][F66_YDIM64], valu64bits;
              ^
h5dumpgentest.c:7003:13: warning: size of ‘dset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F66_XDIM][F66_YDIM64], val64bits;
             ^
h5dumpgentest.c:7018:43: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu8[i][j] = dsetu8[i][j-1] << 1;
                                           ^
h5dumpgentest.c:7020:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:7036:45: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu16[i][j] = dsetu16[i][j-1] << 1;
                                             ^
h5dumpgentest.c:7038:20: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         valu16bits <<= 1;
                    ^
h5dumpgentest.c:7090:41: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             dset8[i][j] = dset8[i][j-1] << 1;
                                         ^
h5dumpgentest.c:7092:18: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
         val8bits <<= 1;
                  ^
h5dumpgentest.c:7108:43: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             dset16[i][j] = dset16[i][j-1] << 1;
                                           ^
h5dumpgentest.c:7110:19: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         val16bits <<= 1;
                   ^
h5dumpgentest.c:7160:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             dsetdbl[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:7160:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_attr_intsize’:
h5dumpgentest.c:7188:14: warning: size of ‘dsetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F66_XDIM][F66_YDIM64], valu64bits;
              ^
h5dumpgentest.c:7192:13: warning: size of ‘dset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F66_XDIM][F66_YDIM64], val64bits;
             ^
h5dumpgentest.c:7208:43: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu8[i][j] = dsetu8[i][j-1] << 1;
                                           ^
h5dumpgentest.c:7210:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:7226:45: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu16[i][j] = dsetu16[i][j-1] << 1;
                                             ^
h5dumpgentest.c:7228:20: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         valu16bits <<= 1;
                    ^
h5dumpgentest.c:7280:41: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             dset8[i][j] = dset8[i][j-1] << 1;
                                         ^
h5dumpgentest.c:7282:18: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
         val8bits <<= 1;
                  ^
h5dumpgentest.c:7298:43: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             dset16[i][j] = dset16[i][j-1] << 1;
                                           ^
h5dumpgentest.c:7300:19: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         val16bits <<= 1;
                   ^
h5dumpgentest.c:7350:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             dsetdbl[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:7350:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_charsets’:
h5dumpgentest.c:7375:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status;
            ^
h5dumpgentest.c: In function ‘gent_compound_intsizes’:
h5dumpgentest.c:7446:18: warning: size of ‘Array1’ is 45568 bytes [-Wlarger-than=]
     Array1Struct Array1[F70_LENGTH];
                  ^
h5dumpgentest.c:7461:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7463:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7464:67: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dsetu8[n][o] = Array1[m].dsetu8[n][o-1] << 1;
                                                                   ^
h5dumpgentest.c:7466:23: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             valu8bits <<= 1;
                       ^
h5dumpgentest.c:7473:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7475:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7476:69: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dsetu16[n][o] = Array1[m].dsetu16[n][o-1] << 1;
                                                                     ^
h5dumpgentest.c:7478:24: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             valu16bits <<= 1;
                        ^
h5dumpgentest.c:7485:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7487:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7497:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7499:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7509:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7511:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7512:65: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dset8[n][o] = Array1[m].dset8[n][o-1] << 1;
                                                                 ^
h5dumpgentest.c:7514:22: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             val8bits <<= 1;
                      ^
h5dumpgentest.c:7521:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7523:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7524:67: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dset16[n][o] = Array1[m].dset16[n][o-1] << 1;
                                                                   ^
h5dumpgentest.c:7526:23: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             val16bits <<= 1;
                       ^
h5dumpgentest.c:7533:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7535:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7545:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7547:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7556:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++)
                      ^
h5dumpgentest.c:7557:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 0; o < dims[1]; o++)
                          ^
h5dumpgentest.c:7558:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dsetdbl[n][o] = 0.0001F * o + n;
                 ^
h5dumpgentest.c:7558:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c:7449:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status; /* Error checking variable */
            ^
h5dumpgentest.c: In function ‘gent_compound_attr_intsizes’:
h5dumpgentest.c:7721:18: warning: size of ‘Array1’ is 45568 bytes [-Wlarger-than=]
     Array1Struct Array1[F70_LENGTH];
                  ^
h5dumpgentest.c:7736:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7738:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7739:67: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dsetu8[n][o] = Array1[m].dsetu8[n][o-1] << 1;
                                                                   ^
h5dumpgentest.c:7741:23: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             valu8bits <<= 1;
                       ^
h5dumpgentest.c:7748:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7750:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7751:69: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dsetu16[n][o] = Array1[m].dsetu16[n][o-1] << 1;
                                                                     ^
h5dumpgentest.c:7753:24: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             valu16bits <<= 1;
                        ^
h5dumpgentest.c:7760:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7762:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7772:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7774:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7784:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7786:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7787:65: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dset8[n][o] = Array1[m].dset8[n][o-1] << 1;
                                                                 ^
h5dumpgentest.c:7789:22: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             val8bits <<= 1;
                      ^
h5dumpgentest.c:7796:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7798:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7799:67: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dset16[n][o] = Array1[m].dset16[n][o-1] << 1;
                                                                   ^
h5dumpgentest.c:7801:23: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             val16bits <<= 1;
                       ^
h5dumpgentest.c:7808:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7810:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7820:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:7822:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 1; o < dims[1]; o++) {
                          ^
h5dumpgentest.c:7831:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++)
                      ^
h5dumpgentest.c:7832:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             for(o = 0; o < dims[1]; o++)
                          ^
h5dumpgentest.c:7833:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 Array1[m].dsetdbl[n][o] = 0.0001F * o + n;
                 ^
h5dumpgentest.c:7833:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c:7724:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status; /* Error checking variable */
            ^
h5dumpgentest.c: In function ‘gent_nested_compound_dt’:
h5dumpgentest.c:8001:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset2[i].b = (float)(i+i*0.1F);
         ^
h5dumpgentest.c:8001:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
h5dumpgentest.c:8007:47: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 dset3[i].b[j][k] = (float)(i*j*k*1.0F);
                                               ^
h5dumpgentest.c:8011:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         dset3[i].c.b = (float)(i*1.0F);
         ^
h5dumpgentest.c: In function ‘gent_intscalars’:
h5dumpgentest.c:8129:14: warning: size of ‘dsetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F73_XDIM][F73_YDIM64], valu64bits;
              ^
h5dumpgentest.c:8133:13: warning: size of ‘dset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F73_XDIM][F73_YDIM64], val64bits;
             ^
h5dumpgentest.c:8149:43: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu8[i][j] = dsetu8[i][j-1] << 1;
                                           ^
h5dumpgentest.c:8151:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:8168:45: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu16[i][j] = dsetu16[i][j-1] << 1;
                                             ^
h5dumpgentest.c:8170:20: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         valu16bits <<= 1;
                    ^
h5dumpgentest.c:8225:41: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             dset8[i][j] = dset8[i][j-1] << 1;
                                         ^
h5dumpgentest.c:8227:18: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
         val8bits <<= 1;
                  ^
h5dumpgentest.c:8244:43: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             dset16[i][j] = dset16[i][j-1] << 1;
                                           ^
h5dumpgentest.c:8246:19: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         val16bits <<= 1;
                   ^
h5dumpgentest.c:8299:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             dsetdbl[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:8299:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_attr_intscalars’:
h5dumpgentest.c:8327:14: warning: size of ‘dsetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F73_XDIM][F73_YDIM64], valu64bits;
              ^
h5dumpgentest.c:8331:13: warning: size of ‘dset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F73_XDIM][F73_YDIM64], val64bits;
             ^
h5dumpgentest.c:8348:43: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu8[i][j] = dsetu8[i][j-1] << 1;
                                           ^
h5dumpgentest.c:8350:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:8367:45: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu16[i][j] = dsetu16[i][j-1] << 1;
                                             ^
h5dumpgentest.c:8369:20: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         valu16bits <<= 1;
                    ^
h5dumpgentest.c:8424:41: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             dset8[i][j] = dset8[i][j-1] << 1;
                                         ^
h5dumpgentest.c:8426:18: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
         val8bits <<= 1;
                  ^
h5dumpgentest.c:8443:43: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             dset16[i][j] = dset16[i][j-1] << 1;
                                           ^
h5dumpgentest.c:8445:19: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         val16bits <<= 1;
                   ^
h5dumpgentest.c:8498:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             dsetdbl[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:8498:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_string_scalars’:
h5dumpgentest.c:8537:28: warning: conversion to ‘char’ from ‘unsigned int’ may alter its value [-Wconversion]
         string[i][0] = 'A' + i;
                            ^
h5dumpgentest.c:8539:43: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
             string[i][j] = string[i][j-1] + 1;
                                           ^
h5dumpgentest.c: In function ‘gent_compound_int_array’:
h5dumpgentest.c:8597:17: warning: size of ‘Cmpd1’ is 5696 bytes [-Wlarger-than=]
     Cmpd1Struct Cmpd1[F76_LENGTH];
                 ^
h5dumpgentest.c:8612:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8614:23: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             valu8bits <<= 1;
                       ^
h5dumpgentest.c:8621:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8623:24: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             valu16bits <<= 1;
                        ^
h5dumpgentest.c:8630:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8639:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8648:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8650:22: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             val8bits <<= 1;
                      ^
h5dumpgentest.c:8657:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8659:23: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             val16bits <<= 1;
                       ^
h5dumpgentest.c:8666:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8675:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++){
                      ^
h5dumpgentest.c:8683:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(n = 0; n < dims[0]; n++)
                      ^
h5dumpgentest.c:8684:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             Cmpd1[m].dsetdbl[n] = 0.0001F + n;
             ^
h5dumpgentest.c:8600:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status; /* Error checking variable */
            ^
h5dumpgentest.c: In function ‘gent_compound_ints’:
h5dumpgentest.c:8833:17: warning: size of ‘Cmpd1’ is 2560 bytes [-Wlarger-than=]
     Cmpd1Struct Cmpd1[F77_LENGTH];
                 ^
h5dumpgentest.c:8846:17: warning: size of ‘Cmpd2’ is 2560 bytes [-Wlarger-than=]
     Cmpd2Struct Cmpd2[F77_LENGTH];
                 ^
h5dumpgentest.c:8863:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:8870:14: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
   valu16bits <<= 1;
              ^
h5dumpgentest.c:8891:12: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
   val8bits <<= 1;
            ^
h5dumpgentest.c:8898:13: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
   val16bits <<= 1;
             ^
h5dumpgentest.c:8915:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         Cmpd1[m].dsetdbl = 0.0001F + m;
         ^
h5dumpgentest.c:8916:9: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         Cmpd2[m].dsetdbl = 0.0001F + m;
         ^
h5dumpgentest.c:8850:12: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t status; /* Error checking variable */
            ^
h5dumpgentest.c: In function ‘gent_intattrscalars’:
h5dumpgentest.c:9051:14: warning: size of ‘dsetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F73_XDIM][F73_YDIM64], valu64bits;
              ^
h5dumpgentest.c:9055:13: warning: size of ‘dset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F73_XDIM][F73_YDIM64], val64bits;
             ^
h5dumpgentest.c:9071:43: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu8[i][j] = dsetu8[i][j-1] << 1;
                                           ^
h5dumpgentest.c:9073:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:9094:45: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu16[i][j] = dsetu16[i][j-1] << 1;
                                             ^
h5dumpgentest.c:9096:20: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         valu16bits <<= 1;
                    ^
h5dumpgentest.c:9163:41: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             dset8[i][j] = dset8[i][j-1] << 1;
                                         ^
h5dumpgentest.c:9165:18: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
         val8bits <<= 1;
                  ^
h5dumpgentest.c:9186:43: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             dset16[i][j] = dset16[i][j-1] << 1;
                                           ^
h5dumpgentest.c:9188:19: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         val16bits <<= 1;
                   ^
h5dumpgentest.c:9253:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             dsetdbl[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:9253:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_intsattrs’:
h5dumpgentest.c:9285:14: warning: size of ‘dsetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F66_XDIM][F66_YDIM64], asetu64[F66_XDIM*F66_YDIM64], valu64bits;
              ^
h5dumpgentest.c:9285:45: warning: size of ‘asetu64’ is 4096 bytes [-Wlarger-than=]
     uint64_t dsetu64[F66_XDIM][F66_YDIM64], asetu64[F66_XDIM*F66_YDIM64], valu64bits;
                                             ^
h5dumpgentest.c:9289:13: warning: size of ‘dset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F66_XDIM][F66_YDIM64], aset64[F66_XDIM*F66_YDIM64], val64bits;
             ^
h5dumpgentest.c:9289:43: warning: size of ‘aset64’ is 4096 bytes [-Wlarger-than=]
     int64_t dset64[F66_XDIM][F66_YDIM64], aset64[F66_XDIM*F66_YDIM64], val64bits;
                                           ^
h5dumpgentest.c:9305:43: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu8[i][j] = dsetu8[i][j-1] << 1;
                                           ^
h5dumpgentest.c:9308:19: warning: conversion to ‘uint8_t’ from ‘int’ may alter its value [-Wconversion]
         valu8bits <<= 1;
                   ^
h5dumpgentest.c:9332:45: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
             dsetu16[i][j] = dsetu16[i][j-1] << 1;
                                             ^
h5dumpgentest.c:9335:20: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         valu16bits <<= 1;
                    ^
h5dumpgentest.c:9413:41: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
             dset8[i][j] = dset8[i][j-1] << 1;
                                         ^
h5dumpgentest.c:9416:18: warning: conversion to ‘int8_t’ from ‘int’ may alter its value [-Wconversion]
         val8bits <<= 1;
                  ^
h5dumpgentest.c:9440:43: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
             dset16[i][j] = dset16[i][j-1] << 1;
                                           ^
h5dumpgentest.c:9443:19: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         val16bits <<= 1;
                   ^
h5dumpgentest.c:9518:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
             dsetdbl[i][j] = 0.0001F * j + i;
             ^
h5dumpgentest.c:9518:13: warning: conversion to ‘float’ from ‘unsigned int’ may alter its value [-Wconversion]
h5dumpgentest.c: In function ‘gent_attr_intsize’:
h5dumpgentest.c:7181:1: warning: stack usage is 11456 bytes [-Wstack-usage=]
 gent_attr_intsize(void)
 ^
h5dumpgentest.c: In function ‘gent_packedbits’:
h5dumpgentest.c:6992:1: warning: stack usage is 11472 bytes [-Wstack-usage=]
 gent_packedbits(void)
 ^
h5dumpgentest.c: In function ‘gent_intsattrs’:
h5dumpgentest.c:9278:1: warning: stack usage is 22896 bytes [-Wstack-usage=]
 gent_intsattrs(void)
 ^
h5dumpgentest.c:9533:1: warning: the frame size of 22816 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
h5dumpgentest.c: In function ‘gent_array8’:
h5dumpgentest.c:3403:13: warning: stack usage is 16496 bytes [-Wstack-usage=]
 static void gent_array8(void)
             ^
h5dumpgentest.c:3459:1: warning: the frame size of 16432 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
h5dumpgentest.c: In function ‘gent_compound_intsizes’:
h5dumpgentest.c:7410:13: warning: stack usage is 45888 bytes [-Wstack-usage=]
 static void gent_compound_intsizes(void) {
             ^
h5dumpgentest.c:7683:1: warning: the frame size of 45808 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
h5dumpgentest.c: In function ‘gent_compound_attr_intsizes’:
h5dumpgentest.c:7685:13: warning: stack usage is 45872 bytes [-Wstack-usage=]
 static void gent_compound_attr_intsizes(void) {
             ^
h5dumpgentest.c:7960:1: warning: the frame size of 45808 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
h5dumpgentest.c: In function ‘gent_intscalars’:
h5dumpgentest.c:8122:1: warning: stack usage is 11472 bytes [-Wstack-usage=]
 gent_intscalars(void)
 ^
h5dumpgentest.c: In function ‘gent_attr_intscalars’:
h5dumpgentest.c:8320:1: warning: stack usage is 11456 bytes [-Wstack-usage=]
 gent_attr_intscalars(void)
 ^
h5dumpgentest.c: In function ‘gent_intattrscalars’:
h5dumpgentest.c:9044:1: warning: stack usage is 11488 bytes [-Wstack-usage=]
 gent_intattrscalars(void)
 ^
h5dumpgentest.c: In function ‘gent_str’:
h5dumpgentest.c:1672:13: warning: stack usage is 13568 bytes [-Wstack-usage=]
 static void gent_str(void) {
             ^
h5dumpgentest.c: In function ‘main’:
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             for(j=0; j<i+5; j++)
             ^
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2849:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c: At top level:
h5dumpgentest.c:97:0: warning: macro "FILE65" is not used [-Wunused-macros]
 #define FILE65  "tattrreg.h5"
 ^
  CCLD     h5dumpgentest
  CC       binread.o
  CCLD     binread
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5dump'
Making all in misc
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/misc'
  CC       h5debug.o
h5debug.c: In function ‘get_H5B2_class’:
h5debug.c:78:5: warning: enumeration value ‘H5B2_NUM_BTREE_ID’ not handled in switch [-Wswitch-enum]
     switch(subtype) {
     ^
h5debug.c: In function ‘main’:
h5debug.c:252:9: warning: enumeration value ‘H5B_NUM_BTREE_ID’ not handled in switch [-Wswitch-enum]
         switch(subtype) {
         ^
h5debug.c: At top level:
h5debug.c:53:0: warning: macro "INDENT" is not used [-Wunused-macros]
 #define INDENT  3
 ^
  CCLD     h5debug
  CC       h5repart.o
h5repart.c: In function ‘main’:
h5repart.c:204:10: warning: size of ‘src_name’ is 4096 bytes [-Wlarger-than=]
     char src_name[NAMELEN]; /*source member name  */
          ^
h5repart.c:210:10: warning: size of ‘dst_name’ is 4096 bytes [-Wlarger-than=]
     char dst_name[NAMELEN]; /*destination member name */
          ^
h5repart.c:246:26: warning: conversion to ‘size_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
      blk_size = get_size (prog_name, &argno, argc, argv);
                          ^
h5repart.c:260:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     sprintf (src_name, src_gen_name, src_membno);
     ^
h5repart.c:280:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     sprintf (dst_name, dst_gen_name, dst_membno);
     ^
h5repart.c:293:9: warning: request for implicit conversion from ‘void *’ to ‘char *’ not permitted in C++ [-Wc++-compat]
     buf = HDmalloc (blk_size);
         ^
h5repart.c:305:6: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
      left_overs -= n;
      ^
h5repart.c:305:17: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
      left_overs -= n;
                 ^
h5repart.c:356:2: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
  src_offset += n;
  ^
h5repart.c:356:13: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
  src_offset += n;
             ^
h5repart.c:360:3: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
   dst_offset += n;
   ^
h5repart.c:360:14: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   dst_offset += n;
              ^
h5repart.c:363:6: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
      sprintf (src_name, src_gen_name, ++src_membno);
      ^
h5repart.c:365:3: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
   dst_offset += n;
   ^
h5repart.c:365:14: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
   dst_offset += n;
              ^
h5repart.c:389:2: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
  dst_offset += n;
  ^
h5repart.c:389:13: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
  dst_offset += n;
             ^
h5repart.c:410:6: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
      sprintf (dst_name, dst_gen_name, ++dst_membno);
      ^
h5repart.c:471:9: warning: conversion to ‘hsize_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
         hdsize = dst_size;
         ^
h5repart.c:186:1: warning: stack usage is 8592 bytes [-Wstack-usage=]
 main (int argc, char *argv[])
 ^
  CCLD     h5repart
  CC       h5mkgrp.o
h5mkgrp.c: In function ‘leave’:
h5mkgrp.c:71:40: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for(curr_group = 0; curr_group < params.ngroups; curr_group++)
                                        ^
h5mkgrp.c: In function ‘parse_command_line’:
h5mkgrp.c:183:28: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     parms->ngroups = (argc - opt_ind);
                            ^
h5mkgrp.c:184:19: warning: request for implicit conversion from ‘void *’ to ‘char **’ not permitted in C++ [-Wc++-compat]
     parms->groups = HDmalloc(parms->ngroups * sizeof(char *));
                   ^
  CCLD     h5mkgrp
  CC       h5repart_gentest.o
h5repart_gentest.c: In function ‘main’:
h5repart_gentest.c:35:17: warning: size of ‘buf’ is 16384 bytes [-Wlarger-than=]
     int         buf[FAMILY_NUMBER][FAMILY_SIZE];
                 ^
h5repart_gentest.c:30:5: warning: stack usage is 16480 bytes [-Wstack-usage=]
 int main(void)
     ^
h5repart_gentest.c:100:1: warning: the frame size of 16420 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     h5repart_gentest
  CC       talign.o
talign.c: In function ‘main’:
talign.c:145:22: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if(fok[0] != fptr[0] || fok[1] != fptr[1]
                      ^
talign.c:145:43: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if(fok[0] != fptr[0] || fok[1] != fptr[1]
                                           ^
talign.c:146:32: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                     || fnok[0] != fptr[2] || fnok[1] != fptr[3]) {
                                ^
talign.c:146:54: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
                     || fnok[0] != fptr[2] || fnok[1] != fptr[3]) {
                                                      ^
talign.c:196:13: warning: ‘spc’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose(spc);
             ^
  CCLD     talign
  CC       repart_test.o
  CCLD     repart_test
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/misc'
Making all in h5import
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5import'
  CC       h5import.o
h5import.c: In function ‘main’:
h5import.c:74:21: warning: size of ‘opt’ is 173064 bytes [-Wlarger-than=]
     struct Options  opt;
                     ^
In file included from h5import.c:17:0:
h5import.c: In function ‘processConfigurationFile’:
../../src/H5private.h:1297:38: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
     #define HDstrtol(S,R,N)    strtol(S,R,N)
                                      ^
h5import.c:1442:40: note: in expansion of macro ‘HDstrtol’
                                 ival = HDstrtol(more, &more, 10);
                                        ^
h5import.c: In function ‘parseDimensions’:
../../src/H5private.h:1297:38: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     #define HDstrtol(S,R,N)    strtol(S,R,N)
                                      ^
h5import.c:2282:15: note: in expansion of macro ‘HDstrtol’
             = HDstrtol(HDstrtok (temp, delimiter), NULL, BASE_10);
               ^
../../src/H5private.h:1297:38: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     #define HDstrtol(S,R,N)    strtol(S,R,N)
                                      ^
h5import.c:2288:36: note: in expansion of macro ‘HDstrtol’
         in->sizeOfDimension[i++] = HDstrtol(token, NULL, BASE_10);
                                    ^
h5import.c: In function ‘getDimensionSizes’:
h5import.c:3136:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         in->sizeOfDimension[i++] = ival;
         ^
h5import.c: In function ‘getChunkedDimensionSizes’:
h5import.c:3160:9: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         in->sizeOfChunk[i++] = ival;
         ^
h5import.c: In function ‘getMaximumDimensionSizes’:
h5import.c:3193:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             in->maxsizeOfDimension[i++] = ival;
             ^
h5import.c: In function ‘process’:
h5import.c:3930:92: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 H5Pset_external(proplist, in->externFilename, (off_t) 0, numOfElements * in->inputSize / 8);
                                                                                            ^
h5import.c: In function ‘processStrHDFData’:
h5import.c:1148:13: warning: ‘mspace_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose(mspace_id);
             ^
h5import.c:1147:13: warning: ‘space_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose(space_id);
             ^
h5import.c:1146:13: warning: ‘dset_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Dclose(dset_id);
             ^
h5import.c: In function ‘main’:
h5import.c:317:12: warning: ‘token’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         if (token == ERR)
            ^
h5import.c:268:17: note: ‘token’ was declared here
     int         token;
                 ^
h5import.c:72:5: warning: stack usage is 174144 bytes [-Wstack-usage=]
 int main(int argc, char *argv[])
     ^
h5import.c:263:1: warning: the frame size of 174064 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     h5import
  CC       h5importtest.o
h5importtest.c: In function ‘main’:
h5importtest.c:122:37: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
         row4i16[i] = row4i16[i - 1] + rowi4i16;
                                     ^
h5importtest.c:123:35: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         row4i8[i] = row4i8[i - 1] + rowi4i8;
                                   ^
h5importtest.c:134:37: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
         col4i16[j] = col4i16[j - 1] + coli4i16;
                                     ^
h5importtest.c:135:35: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         col4i8[j] = col4i8[j - 1] + coli4i8;
                                   ^
h5importtest.c:145:37: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
         pln4i16[k] = pln4i16[k - 1] + plni4i16;
                                     ^
h5importtest.c:146:35: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         pln4i8[k] = pln4i8[k - 1] + plni4i8;
                                   ^
h5importtest.c:160:58: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
                 b16i3[k][i][j] = row4i16[i] + col4i16[j] + pln4i16[k];
                                                          ^
h5importtest.c:161:55: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 b8i3[k][i][j] = row4i8[i] + col4i8[j] + pln4i8[k];
                                                       ^
  CCLD     h5importtest
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5import'
Making all in h5repack
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
  CC       dynlib_rpk.lo
dynlib_rpk.c: In function 'H5PLget_plugin_type':
dynlib_rpk.c:41:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib_rpk.c: In function 'H5PLget_plugin_info':
dynlib_rpk.c:42:16: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void    *H5PLget_plugin_info(void) {return H5Z_DYNLIB1;}
                ^
dynlib_rpk.c: In function 'H5Z_filter_dynlib1':
dynlib_rpk.c:82:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
dynlib_rpk.c:89:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
  CCLD     libdynlibadd.la
  CC       h5repack.o
  CC       h5repack_copy.o
  CC       h5repack_filters.o
h5repack_filters.c: In function ‘aux_find_obj’:
h5repack_filters.c:51:10: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
          return i;
          ^
h5repack_filters.c:61:10: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
          return i;
          ^
h5repack_filters.c: In function ‘apply_filters’:
h5repack_filters.c:436:59: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
                     scale_factor = obj.filter[i].cd_values[1];
                                                           ^
  CC       h5repack_opttable.o
h5repack_opttable.c: In function ‘aux_inctable’:
h5repack_opttable.c:112:2: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  table->size += n_objs;
  ^
h5repack_opttable.c: In function ‘options_add_layout’:
h5repack_opttable.c:193:2: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  if (table->nelems + n_objs >= table->size) {
  ^
h5repack_opttable.c:224:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     I = table->nelems + added;
     ^
h5repack_opttable.c:237:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     I = table->nelems + added;
     ^
h5repack_opttable.c:249:4: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    I = table->nelems + added;
    ^
h5repack_opttable.c:257:2: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  table->nelems += added;
  ^
h5repack_opttable.c: In function ‘options_add_filter’:
h5repack_opttable.c:279:2: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  if (table->nelems + n_objs >= table->size) {
  ^
h5repack_opttable.c:301:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     I = table->nelems + added;
     ^
h5repack_opttable.c:314:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     I = table->nelems + added;
     ^
h5repack_opttable.c:326:4: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
    I = table->nelems + added;
    ^
h5repack_opttable.c:333:2: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  table->nelems += added;
  ^
  CC       h5repack_parse.o
h5repack_parse.c: In function ‘parse_filter’:
h5repack_parse.c:77:13: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             end_obj=i;
             ^
h5repack_parse.c:93:5: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     obj_list = (obj_list_t*) HDmalloc(n*sizeof(obj_list_t));
     ^
h5repack_parse.c:126:20: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     for ( i=end_obj+1, k=0, j=0; i<len; i++,k++)
                    ^
h5repack_parse.c:170:38: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
                                 i=len-1; /* end */
                                      ^
h5repack_parse.c:231:38: warning: conversion to ‘unsigned int’ from ‘size_t’ may alter its value [-Wconversion]
                                 i=len-1; /* end */
                                      ^
h5repack_parse.c:273:53: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                                 filt->cd_nelmts=atoi(stype);
                                                     ^
h5repack_parse.c:292:58: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                                 filt->cd_values[j++]=atoi(stype);
                                                          ^
h5repack_parse.c:325:42: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 filt->cd_values[j++]=atoi(stype);
                                          ^
h5repack_parse.c:326:17: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 i+=m; /* jump */
                 ^
h5repack_parse.c:447:37: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                 if (filt->cd_nelmts != j)
                                     ^
h5repack_parse.c: In function ‘parse_layout’:
h5repack_parse.c:567:13: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
             end_obj=i;
             ^
h5repack_parse.c:580:5: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     obj_list = (obj_list_t*) HDmalloc(n*sizeof(obj_list_t));
     ^
h5repack_parse.c:652:9: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         for ( i=j, c_index=0; i<len; i++)
         ^
h5repack_parse.c:672:60: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     pack->chunk.chunk_lengths[c_index]=atoi(sdim);
                                                            ^
h5repack_parse.c:690:64: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                         pack->chunk.chunk_lengths[c_index]=atoi(sdim);
                                                                ^
h5repack_parse.c: In function ‘parse_filter’:
h5repack_parse.c:161:28: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
                         if (l==-1)
                            ^
h5repack_parse.c:222:28: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
                         if (l==-1)
                            ^
  CC       h5repack_refs.o
h5repack_refs.c: In function ‘copy_refs_attr’:
h5repack_refs.c:521:13: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             ref_comp_index = (int *)HDmalloc(nmembers*sizeof (int));
             ^
h5repack_refs.c:522:13: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             ref_comp_size = (size_t *)HDmalloc(nmembers*sizeof(ref_comp_size));
             ^
h5repack_refs.c:529:21: warning: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Wsign-conversion]
                     ref_comp_index[ref_comp_field_n] = i;
                     ^
h5repack_refs.c:592:44: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             array_rank = H5Tget_array_ndims(mtype_id);
                                            ^
h5repack_refs.c:712:37: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
                    int idx = i*msize+H5Tget_member_offset( mtype_id, (unsigned)ref_comp_index[j]);
                                     ^
h5repack_refs.c:719:37: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
                    int idx = i*msize+H5Tget_member_offset( mtype_id, (unsigned)ref_comp_index[j]);
                                     ^
h5repack_refs.c: In function ‘copy_refs_attr.isra.1’:
h5repack_refs.c:446:12: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
 static int copy_refs_attr(hid_t loc_in,
            ^
  CC       h5repack_verify.o
h5repack_verify.c: In function ‘h5repack_verify’:
h5repack_verify.c:210:17: warning: ‘sid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Sclose(sid);
                 ^
h5repack_verify.c:209:17: warning: ‘pid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Pclose(pid);
                 ^
h5repack_verify.c:211:17: warning: ‘did’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Dclose(did);
                 ^
  CC       h5repack_main.o
In file included from h5repack.h:20:0,
                 from h5repack_main.c:18:
h5repack_main.c: In function ‘parse_command_line’:
../../src/H5private.h:612:30: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     #define HDatoi(S)    atoi(S)
                              ^
h5repack_main.c:389:24: note: in expansion of macro ‘HDatoi’
    options->min_comp = HDatoi( opt_arg );
                        ^
../../src/H5private.h:615:30: warning: conversion to ‘hsize_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     #define HDatol(S)    atol(S)
                              ^
h5repack_main.c:476:25: note: in expansion of macro ‘HDatol’
    options->alignment = HDatol( opt_arg );
                         ^
h5repack_main.c: In function ‘main’:
h5repack_main.c:541:5: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
  if (parse_command_line(argc, argv, &options) < 0)
     ^
h5repack_main.c:541:5: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
  CCLD     h5repack
  CC       testh5repack_detect_szip.o
  CCLD     testh5repack_detect_szip
  CC       h5repacktst.o
h5repacktst.c: In function ‘make_deflate’:
h5repacktst.c:2172:16: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int        buf[DIM1][DIM2];
                ^
h5repacktst.c: In function ‘make_shuffle’:
h5repacktst.c:2249:14: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int      buf[DIM1][DIM2];
              ^
h5repacktst.c: In function ‘make_fletcher32’:
h5repacktst.c:2314:14: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int      buf[DIM1][DIM2];
              ^
h5repacktst.c: In function ‘make_nbit’:
h5repacktst.c:2385:14: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int      buf[DIM1][DIM2];
              ^
h5repacktst.c: In function ‘make_scaleoffset’:
h5repacktst.c:2484:14: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int      buf[DIM1][DIM2];
              ^
h5repacktst.c: In function ‘make_all_filters’:
h5repacktst.c:2575:14: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int      buf[DIM1][DIM2];
              ^
h5repacktst.c: In function ‘make_layout’:
h5repacktst.c:2832:14: warning: size of ‘buf’ is 3200 bytes [-Wlarger-than=]
     int      buf[DIM1][DIM2];
              ^
h5repacktst.c: In function ‘make_layout3’:
h5repacktst.c:3028:14: warning: size of ‘buf1’ is 240000 bytes [-Wlarger-than=]
     int      buf1[DIM1_L3][DIM2_L3];
              ^
h5repacktst.c: In function ‘make_userblock’:
h5repacktst.c:3364:21: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         ub[u] = 'a' + (char)(u % 26);
                     ^
h5repacktst.c:3342:13: warning: variable ‘nwritten’ set but not used [-Wunused-but-set-variable]
     ssize_t nwritten;           /* # of bytes written */
             ^
h5repacktst.c: In function ‘verify_userblock’:
h5repacktst.c:3405:13: warning: variable ‘nread’ set but not used [-Wunused-but-set-variable]
     ssize_t nread;              /* # of bytes read */
             ^
h5repacktst.c: In function ‘make_userblock_file’:
h5repacktst.c:3477:21: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
         ub[u] = 'a' + (char)(u % 26);
                     ^
h5repacktst.c:3472:13: warning: variable ‘nwritten’ set but not used [-Wunused-but-set-variable]
     ssize_t nwritten;           /* # of bytes written */
             ^
In file included from h5repack.h:20:0,
                 from h5repacktst.c:16:
h5repacktst.c: In function ‘write_dset_in’:
h5repacktst.c:3957:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].p = HDmalloc((i + 1) * sizeof(int));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5repacktst.c:3959:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(l = 0; l < i + 1; l++)
             ^
h5repacktst.c:4075:38: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 else buf23[i][j][k]=n++;
                                      ^
h5repacktst.c:4115:39: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                     buf33[i][j][k].a=n++;
                                       ^
In file included from h5repack.h:20:0,
                 from h5repacktst.c:16:
h5repacktst.c:4178:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].p = HDmalloc((i + 1) * sizeof(int));
                                                ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5repacktst.c:4180:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for(l = 0; l < i + 1; l++)
                 ^
In file included from h5repack.h:20:0,
                 from h5repacktst.c:16:
h5repacktst.c: In function ‘write_attr_in’:
h5repacktst.c:4969:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             buf52[i][j].p = HDmalloc((i + 1) * sizeof(int));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5repacktst.c:4971:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for (l = 0; l < i + 1; l++)
             ^
h5repacktst.c:5189:38: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                 else buf23[i][j][k]=n++;
                                      ^
h5repacktst.c:5264:39: warning: conversion to ‘char’ from ‘int’ may alter its value [-Wconversion]
                     buf33[i][j][k].a=n++;
                                       ^
In file included from h5repack.h:20:0,
                 from h5repacktst.c:16:
h5repacktst.c:5435:48: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 buf53[i][j][k].p = HDmalloc((i + 1) * sizeof(int));
                                                ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
h5repacktst.c:5437:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for (l = 0; l < i + 1; l++)
                 ^
h5repacktst.c: In function ‘make_layout3’:
h5repacktst.c:3015:5: warning: stack usage is 241024 bytes [-Wstack-usage=]
 int make_layout3(hid_t loc_id)
     ^
h5repacktst.c:3138:1: warning: the frame size of 240956 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     h5repacktst
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
Making all in h5jam
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5jam'
  CC       h5jam.o
h5jam.c: In function ‘compute_user_block_size’:
h5jam.c:550:1: warning: function might be candidate for attribute ‘const’ if it is known to return normally [-Wsuggest-attribute=const]
 compute_user_block_size (hsize_t ublock_size)
 ^
  CCLD     h5jam
  CC       h5unjam.o
h5unjam.c: In function ‘copy_to_file’:
h5unjam.c:377:13: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
             bytes_in = how_much;
             ^
h5unjam.c:396:9: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
         how_much -= bytes_read;
         ^
h5unjam.c:396:18: warning: conversion to ‘ssize_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
         how_much -= bytes_read;
                  ^
h5unjam.c:397:9: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
         from += bytes_read;
         ^
h5unjam.c:397:14: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
         from += bytes_read;
              ^
h5unjam.c:398:9: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
         to += bytes_read;
         ^
h5unjam.c:398:12: warning: conversion to ‘off_t’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
         to += bytes_read;
            ^
  CCLD     h5unjam
  CC       tellub.o
  CCLD     tellub
  CC       h5jamgentest.o
h5jamgentest.c: In function ‘gent_ub’:
h5jamgentest.c:257:8: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
        dset2_1[i] = (float)(i*0.1F+1);
        ^
h5jamgentest.c:268:42: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             dset2_2[i][j] = (float)((i+1)*j*0.1F);
                                          ^
h5jamgentest.c: In function ‘create_textfile’:
h5jamgentest.c:311:9: warning: request for implicit conversion from ‘void *’ to ‘char *’ not permitted in C++ [-Wc++-compat]
     buf = HDcalloc(size, (size_t)1);
         ^
h5jamgentest.c: At top level:
h5jamgentest.c:96:0: warning: macro "ARRAY3_DIM2" is not used [-Wunused-macros]
 #define ARRAY3_DIM2 3
 ^
h5jamgentest.c:93:0: warning: macro "ARRAY1_RANK" is not used [-Wunused-macros]
 #define ARRAY1_RANK 1
 ^
  CCLD     h5jamgentest
  CC       getub.o
  CCLD     getub
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5jam'
Making all in h5copy
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5copy'
  CC       h5copy.o
  CCLD     h5copy
  CC       h5copygentest.o
  CCLD     h5copygentest
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5copy'
Making all in h5stat
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5stat'
  CC       h5stat.o
h5stat.c: In function ‘group_stats’:
h5stat.c:381:16: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t     ret;
                ^
h5stat.c: In function ‘dataset_stats’:
h5stat.c:464:16: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t     ret;
                ^
h5stat.c: In function ‘datatype_stats’:
h5stat.c:637:12: warning: variable ‘ret’ set but not used [-Wunused-but-set-variable]
     herr_t ret;
            ^
h5stat.c: In function ‘ceil_log10’:
h5stat.c:286:1: warning: function might be candidate for attribute ‘const’ if it is known to return normally [-Wsuggest-attribute=const]
 ceil_log10(unsigned long x)
 ^
  CCLD     h5stat
  CC       h5stat_gentest.o
h5stat_gentest.c: In function ‘gen_newgrat_file’:
h5stat_gentest.c:49:30: warning: unused parameter ‘fname’ [-Wunused-parameter]
 gen_newgrat_file(const char *fname)
                              ^
h5stat_gentest.c: In function ‘main’:
h5stat_gentest.c:117:17: warning: ‘did’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Dclose(did);
                 ^
h5stat_gentest.c:57:11: note: ‘did’ was declared here
     hid_t did;  /* Dataset id */
           ^
h5stat_gentest.c:116:10: warning: ‘attr_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]
  H5Aclose(attr_id);
          ^
h5stat_gentest.c:56:11: note: ‘attr_id’ was declared here
     hid_t attr_id;  /* Attribute id */
           ^
h5stat_gentest.c:119:17: warning: ‘sid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Sclose(sid);
                 ^
h5stat_gentest.c:55:11: note: ‘sid’ was declared here
     hid_t sid;   /* Dataspace id */
           ^
h5stat_gentest.c:118:17: warning: ‘tid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Tclose(tid);
                 ^
h5stat_gentest.c:54:11: note: ‘tid’ was declared here
     hid_t tid;  /* Datatype id */
           ^
h5stat_gentest.c:120:17: warning: ‘gid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Gclose(gid);
                 ^
h5stat_gentest.c:53:11: note: ‘gid’ was declared here
     hid_t gid;  /* Group id */
           ^
h5stat_gentest.c:121:17: warning: ‘fid’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Fclose(fid);
                 ^
h5stat_gentest.c:52:11: note: ‘fid’ was declared here
     hid_t fid;  /* File id */
           ^
  CCLD     h5stat_gentest
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5stat'
Making all in perform
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/perform'
  CC       sio_perf.o
sio_perf.c:108:28: warning: size of ‘l_opts’ is 2496 bytes [-Wlarger-than=]
 static struct long_options l_opts[] = {
                            ^
sio_perf.c: In function ‘run_test_loop’:
sio_perf.c:400:26: warning: conversion to ‘hsize_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
     parms.h5_align = opts->h5_alignment;
                          ^
sio_perf.c:401:27: warning: conversion to ‘hsize_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
     parms.h5_thresh = opts->h5_threshold;
                           ^
sio_perf.c: In function ‘run_test’:
sio_perf.c:484:24: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
     write_sys_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                        ^
sio_perf.c:485:20: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
     write_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                    ^
sio_perf.c:486:26: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
     write_gross_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                          ^
sio_perf.c:487:24: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
     write_raw_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                        ^
sio_perf.c:490:27: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
         read_sys_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                           ^
sio_perf.c:491:23: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
         read_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                       ^
sio_perf.c:492:29: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
         read_gross_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                             ^
sio_perf.c:493:27: warning: request for implicit conversion from ‘void *’ to ‘struct minmax *’ not permitted in C++ [-Wc++-compat]
         read_raw_mm_table = calloc((size_t)parms.num_iters , sizeof(minmax));
                           ^
sio_perf.c: In function ‘output_results’:
sio_perf.c:71:34: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                  ^
sio_perf.c:763:53: note: in expansion of macro ‘MB_PER_SEC’
     output_report("Maximum Throughput: %6.2f MB/s", MB_PER_SEC(data_size,total_mm.min));
                                                     ^
sio_perf.c:71:34: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                  ^
sio_perf.c:763:53: note: in expansion of macro ‘MB_PER_SEC’
     output_report("Maximum Throughput: %6.2f MB/s", MB_PER_SEC(data_size,total_mm.min));
                                                     ^
sio_perf.c:71:49: warning: implicit conversion from ‘float’ to ‘double’ to match other result of conditional [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                                 ^
sio_perf.c:763:53: note: in expansion of macro ‘MB_PER_SEC’
     output_report("Maximum Throughput: %6.2f MB/s", MB_PER_SEC(data_size,total_mm.min));
                                                     ^
sio_perf.c:71:34: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                  ^
sio_perf.c:771:19: note: in expansion of macro ‘MB_PER_SEC’
                   MB_PER_SEC(data_size,total_mm.sum / total_mm.num));
                   ^
sio_perf.c:71:34: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                  ^
sio_perf.c:771:19: note: in expansion of macro ‘MB_PER_SEC’
                   MB_PER_SEC(data_size,total_mm.sum / total_mm.num));
                   ^
sio_perf.c:71:49: warning: implicit conversion from ‘float’ to ‘double’ to match other result of conditional [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                                 ^
sio_perf.c:771:19: note: in expansion of macro ‘MB_PER_SEC’
                   MB_PER_SEC(data_size,total_mm.sum / total_mm.num));
                   ^
sio_perf.c:71:34: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                  ^
sio_perf.c:778:53: note: in expansion of macro ‘MB_PER_SEC’
     output_report("Minimum Throughput: %6.2f MB/s", MB_PER_SEC(data_size,total_mm.max));
                                                     ^
sio_perf.c:71:34: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                  ^
sio_perf.c:778:53: note: in expansion of macro ‘MB_PER_SEC’
     output_report("Minimum Throughput: %6.2f MB/s", MB_PER_SEC(data_size,total_mm.max));
                                                     ^
sio_perf.c:71:49: warning: implicit conversion from ‘float’ to ‘double’ to match other result of conditional [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) (((t)==0.0F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                                 ^
sio_perf.c:778:53: note: in expansion of macro ‘MB_PER_SEC’
     output_report("Minimum Throughput: %6.2f MB/s", MB_PER_SEC(data_size,total_mm.max));
                                                     ^
sio_perf.c: In function ‘output_report’:
sio_perf.c:798:9: warning: function might be possible candidate for ‘gnu_printf’ format attribute [-Wsuggest-attribute=format]
         vfprintf(output, fmt, ap);
         ^
sio_perf.c: In function ‘parse_command_line’:
sio_perf.c:960:35: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         cl_opts->buf_size[i]=(i+1)*10;
                                   ^
sio_perf.c:962:35: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         cl_opts->chk_size[i]=(i+1)*10;
                                   ^
sio_perf.c:977:36: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     while ((opt = get_option(argc, (const char **)argv, s_opts, l_opts)) != EOF) {
                                    ^
sio_perf.c:1033:64: warning: conversion to ‘size_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
                     cl_opts->chk_size[j] = parse_size_directive(buf);
                                                                ^
sio_perf.c:1183:64: warning: conversion to ‘size_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
                     cl_opts->buf_size[j] = parse_size_directive(buf);
                                                                ^
sio_perf.c:1211:61: warning: conversion to ‘int’ from ‘off_t’ may alter its value [-Wconversion]
                     cl_opts->order[j] = parse_size_directive(buf);
                                                             ^
sio_perf.c: At top level:
sio_perf.c:1410:6: warning: no previous prototype for ‘debug_start_stop_time’ [-Wmissing-prototypes]
 void debug_start_stop_time(io_time_t *pt, timer_type t, int start_stop)
      ^
sio_perf.c: In function ‘debug_start_stop_time’:
sio_perf.c:1415:13: warning: enumeration value ‘HDF5_FILE_READ_OPEN’ not handled in switch [-Wswitch-enum]
             switch (t) {
             ^
sio_perf.c:1415:13: warning: enumeration value ‘HDF5_FILE_READ_CLOSE’ not handled in switch [-Wswitch-enum]
sio_perf.c:1415:13: warning: enumeration value ‘HDF5_FILE_WRITE_OPEN’ not handled in switch [-Wswitch-enum]
sio_perf.c:1415:13: warning: enumeration value ‘HDF5_FILE_WRITE_CLOSE’ not handled in switch [-Wswitch-enum]
sio_perf.c:1415:13: warning: enumeration value ‘NUM_TIMERS’ not handled in switch [-Wswitch-enum]
sio_perf.c: In function ‘run_test’:
sio_perf.c:499:13: warning: function call has aggregate value [-Waggregate-return]
         res = do_sio(parms);
             ^
  CC       sio_engine.o
sio_engine.c: In function ‘do_sio’:
sio_engine.c:132:17: warning: size of ‘fname’ is 4096 bytes [-Wlarger-than=]
     char        fname[FILENAME_MAX];    /* test file name */
                 ^
sio_engine.c:173:29: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
         if ((param.dset_size[i]%param.buf_size[i])!=0) {
                             ^
sio_engine.c:184:17: warning: request for implicit conversion from ‘void *’ to ‘char *’ not permitted in C++ [-Wc++-compat]
     if ((buffer = malloc(linear_buf_size)) == NULL){
                 ^
sio_engine.c: In function ‘do_write’:
sio_engine.c:421:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (i=0; i < linear_buf_size; i++)
                 ^
sio_engine.c:422:19: warning: conversion to ‘unsigned char’ from ‘long int’ may alter its value [-Wconversion]
         buf_p[i]=i%128;
                   ^
sio_engine.c:438:39: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                 if (parms->buf_size[i]==parms->dset_size[i])
                                       ^
sio_engine.c:439:21: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
                     cont_dim = i;
                     ^
sio_engine.c:454:41: warning: conversion to ‘hsize_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
             h5dims[i] = parms->dset_size[i];
                                         ^
sio_engine.c: In function ‘dset_write’:
sio_engine.c:626:5: warning: conversion to ‘long unsigned int’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     for (i=0; i < parms->dset_size[cur_dim]; i += parms->buf_size[cur_dim]){
     ^
sio_engine.c:626:48: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     for (i=0; i < parms->dset_size[cur_dim]; i += parms->buf_size[cur_dim]){
                                                ^
sio_engine.c:658:37: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                         if (dims[k] <= h5offset[k]) {
                                     ^
sio_engine.c: In function ‘posix_buffer_write’:
sio_engine.c:711:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (i=0; i < parms->buf_size[local_dim]; i += dtype_size) {
                     ^
sio_engine.c:712:13: warning: conversion to ‘size_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
             buf_offset[local_dim] = i;
             ^
sio_engine.c:730:21: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
             for (j=i+1; j < parms->rank; j++)
                     ^
sio_engine.c:731:45: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
                 d_offset *= parms->dset_size[j];
                                             ^
sio_engine.c:733:42: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
             linear_dset_offset += (offset[i]+buf_offset[i])*d_offset;
                                          ^
sio_engine.c:737:9: warning: conversion to ‘__off64_t’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         rc = POSIXSEEK(fd->posixfd, linear_dset_offset) < 0 ? -1 : 0;
         ^
sio_engine.c: In function ‘do_read’:
sio_engine.c:781:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for(i = 0; i < linear_buf_size; i++)
                  ^
sio_engine.c:782:24: warning: conversion to ‘char’ from ‘long int’ may alter its value [-Wconversion]
         buffer2[i] = i % 128;
                        ^
sio_engine.c:794:39: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
                 if (parms->buf_size[i]==parms->dset_size[i])
                                       ^
sio_engine.c:795:21: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
                     cont_dim = i;
                     ^
sio_engine.c:807:41: warning: conversion to ‘hsize_t’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
             h5dims[i] = parms->dset_size[i];
                                         ^
sio_engine.c: In function ‘dset_read’:
sio_engine.c:945:5: warning: conversion to ‘long unsigned int’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
     for (i=0; i < parms->dset_size[cur_dim]; i += parms->buf_size[cur_dim]){
     ^
sio_engine.c:945:48: warning: conversion to ‘long int’ from ‘long unsigned int’ may change the sign of the result [-Wsign-conversion]
     for (i=0; i < parms->dset_size[cur_dim]; i += parms->buf_size[cur_dim]){
                                                ^
sio_engine.c: In function ‘posix_buffer_read’:
sio_engine.c:1015:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (i=0; i < parms->buf_size[local_dim]; i += dtype_size) {
                     ^
sio_engine.c:1016:13: warning: conversion to ‘size_t’ from ‘long int’ may change the sign of the result [-Wsign-conversion]
             buf_offset[local_dim] = i;
             ^
sio_engine.c:1029:21: warning: conversion to ‘int’ from ‘long int’ may alter its value [-Wconversion]
             for (j=i+1; j<parms->rank; j++)
                     ^
sio_engine.c:1030:45: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
                 d_offset *= parms->dset_size[j];
                                             ^
sio_engine.c:1032:42: warning: conversion to ‘long unsigned int’ from ‘off_t’ may change the sign of the result [-Wsign-conversion]
             linear_dset_offset += (offset[i]+buf_offset[i])*d_offset;
                                          ^
sio_engine.c:1036:9: warning: conversion to ‘__off64_t’ from ‘size_t’ may change the sign of the result [-Wsign-conversion]
         rc = POSIXSEEK(fd->posixfd, linear_dset_offset) < 0 ? -1 : 0;
         ^
sio_engine.c: In function ‘set_vfd’:
sio_engine.c:1150:14: warning: size of ‘sv’ is 7168 bytes [-Wlarger-than=]
         char sv[H5FD_MEM_NTYPES][1024];
              ^
In file included from sio_perf.h:20:0,
                 from sio_engine.c:31:
sio_engine.c:1164:35: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             memb_addr[mt] = MAX(mt-1,0)*(HADDR_MAX/10);
                                   ^
../../src/H5private.h:328:35: note: in definition of macro ‘MAX’
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                   ^
sio_engine.c:1164:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             memb_addr[mt] = MAX(mt-1,0)*(HADDR_MAX/10);
             ^
sio_engine.c: In function ‘do_cleanupfile’:
sio_engine.c:1270:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                     HDsnprintf(temp, sizeof temp, filename, j);
                     ^
sio_engine.c:1270:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
sio_engine.c: In function ‘do_sio’:
sio_engine.c:121:1: warning: function returns an aggregate [-Waggregate-return]
 do_sio(parameters param)
 ^
  CCLD     h5perf_serial
  CC       iopipe.o
iopipe.c: In function ‘print_stats’:
iopipe.c:84:43: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         (double)(r_stop->ru_utime.tv_usec)/1000000.0F) -
                                           ^
iopipe.c:86:44: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         (double)(r_start->ru_utime.tv_usec)/1000000.0F);
                                            ^
iopipe.c:89:43: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         (double)(r_stop->ru_stime.tv_usec)/1000000.0F) -
                                           ^
iopipe.c:91:44: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         (double)(r_start->ru_stime.tv_usec)/1000000.0F);
                                            ^
iopipe.c:95:34: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         (double)(t_stop->tv_usec)/1000000.0F) -
                                  ^
iopipe.c:97:35: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
         (double)(t_start->tv_usec)/1000000.0F);
                                   ^
iopipe.c: In function ‘main’:
iopipe.c:194:42: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
       (double)(hssize_t)(size[0]*size[1])/1024.0F*1024);
                                          ^
iopipe.c:179:14: warning: variable ‘offset’ set but not used [-Wunused-but-set-variable]
     off_t    offset;
              ^
iopipe.c:178:17: warning: variable ‘n’ set but not used [-Wunused-but-set-variable]
     hssize_t    n;
                 ^
iopipe.c:169:15: warning: variable ‘status’ set but not used [-Wunused-but-set-variable]
     herr_t    status;
               ^
  CCLD     iopipe
  CC       chunk.o
chunk.c: In function ‘create_dataset’:
chunk.c:166:9: warning: request for implicit conversion from ‘void *’ to ‘signed char *’ not permitted in C++ [-Wc++-compat]
     buf = calloc(1, SQUARE (DS_SIZE*CH_SIZE));
         ^
chunk.c: In function ‘test_rowmaj’:
chunk.c:197:24: warning: request for implicit conversion from ‘void *’ to ‘signed char *’ not permitted in C++ [-Wc++-compat]
     signed char *buf = calloc (1, (size_t)(SQUARE(io_size)));
                        ^
chunk.c: In function ‘test_diag’:
chunk.c:276:24: warning: request for implicit conversion from ‘void *’ to ‘signed char *’ not permitted in C++ [-Wc++-compat]
     signed char *buf = calloc (1, (size_t)(SQUARE (io_size)));
                        ^
chunk.c:323:34: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
     return (double)(hssize_t)nio/(hssize_t)nio_g;
                                  ^
chunk.c: In function ‘main’:
chunk.c:393:38: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
  for (io_percent=RM_START; io_percent<=RM_END; io_percent+=RM_DELTA) {
                                      ^
chunk.c:393:58: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
  for (io_percent=RM_START; io_percent<=RM_END; io_percent+=RM_DELTA) {
                                                          ^
chunk.c:439:38: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
  for (io_percent=RM_START; io_percent<=RM_END; io_percent+=RM_DELTA) {
                                      ^
chunk.c:439:58: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
  for (io_percent=RM_START; io_percent<=RM_END; io_percent+=RM_DELTA) {
                                                          ^
chunk.c:483:17: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
       io_percent<=DIAG_END;
                 ^
chunk.c:484:17: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
       io_percent+=DIAG_DELTA) {
                 ^
chunk.c:528:17: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
       io_percent<=DIAG_END;
                 ^
chunk.c:529:17: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
       io_percent+=DIAG_DELTA) {
                 ^
  CCLD     chunk
  CC       overhead.o
overhead.c: In function ‘test’:
overhead.c:227:13: warning: request for implicit conversion from ‘void *’ to ‘int *’ not permitted in C++ [-Wc++-compat]
         had = calloc((size_t)cur_size[0], sizeof(int));
             ^
overhead.c:244:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             hs_start[0] = j%2 ? j/2 : (hssize_t)cur_size[0]-j/2;
             ^
overhead.c:244:60: warning: conversion to ‘hsize_t’ from ‘long long int’ may change the sign of the result [-Wsign-conversion]
             hs_start[0] = j%2 ? j/2 : (hssize_t)cur_size[0]-j/2;
                                                            ^
overhead.c:249:13: warning: conversion to ‘hsize_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             hs_start[0] = j;
             ^
overhead.c:279:42: warning: conversion to ‘long long unsigned int’ from ‘__off_t’ may change the sign of the result [-Wsign-conversion]
                     (double)(hssize_t)(sb.st_size-i*sizeof(int))/(hssize_t)i);
                                          ^
overhead.c:279:66: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
                     (double)(hssize_t)(sb.st_size-i*sizeof(int))/(hssize_t)i);
                                                                  ^
overhead.c:323:38: warning: conversion to ‘long long unsigned int’ from ‘__off_t’ may change the sign of the result [-Wsign-conversion]
                 (double)(hssize_t)(sb.st_size-cur_size[0]*sizeof(int))/
                                      ^
overhead.c:324:17: warning: conversion to ‘double’ from ‘long long int’ may alter its value [-Wconversion]
                 (hssize_t)cur_size[0]);
                 ^
  CCLD     overhead
  CC       zip_perf.o
zip_perf.c: In function ‘error’:
zip_perf.c:146:5: warning: function might be possible candidate for ‘gnu_printf’ format attribute [-Wsuggest-attribute=format]
     HDvfprintf(stderr, fmt, ap);
     ^
zip_perf.c: In function ‘write_file’:
zip_perf.c:176:63: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
     destLen = (uLongf)((double)sourceLen + ((double)sourceLen * 0.1F)) + 12;
                                                               ^
zip_perf.c:187:58: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                             ((double)timer_stop.tv_usec) / MICROSECOND) -
                                                          ^
zip_perf.c:189:59: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                             ((double)timer_start.tv_usec) / MICROSECOND);
                                                           ^
zip_perf.c:209:9: warning: conversion to ‘uLongf’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         d_len -= rc;
         ^
zip_perf.c: In function ‘fill_with_random_data’:
zip_perf.c:422:13: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
             len -= rc;
             ^
zip_perf.c:432:9: warning: conversion to ‘uLongf’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         unsigned long s = src_len * compress_percent / 100;
         ^
zip_perf.c: In function ‘do_write_test’:
zip_perf.c:498:17: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
                 s_len -= rc;
                 ^
zip_perf.c:507:58: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                             ((double)timer_stop.tv_usec) / MICROSECOND) -
                                                          ^
zip_perf.c:509:59: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                             ((double)timer_start.tv_usec) / MICROSECOND);
                                                           ^
zip_perf.c:40:38: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) ((fabs(t)<0.0000000001F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                      ^
zip_perf.c:513:16: note: in expansion of macro ‘MB_PER_SEC’
                MB_PER_SEC(file_size, total_time));
                ^
zip_perf.c:40:61: warning: implicit conversion from ‘float’ to ‘double’ to match other result of conditional [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) ((fabs(t)<0.0000000001F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                                             ^
zip_perf.c:513:16: note: in expansion of macro ‘MB_PER_SEC’
                MB_PER_SEC(file_size, total_time));
                ^
zip_perf.c:533:58: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                             ((double)timer_stop.tv_usec) / MICROSECOND) -
                                                          ^
zip_perf.c:535:59: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
                             ((double)timer_start.tv_usec) / MICROSECOND);
                                                           ^
zip_perf.c:40:38: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) ((fabs(t)<0.0000000001F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                      ^
zip_perf.c:539:16: note: in expansion of macro ‘MB_PER_SEC’
                MB_PER_SEC(file_size, total_time));
                ^
zip_perf.c:40:61: warning: implicit conversion from ‘float’ to ‘double’ to match other result of conditional [-Wdouble-promotion]
 #define MB_PER_SEC(bytes,t) ((fabs(t)<0.0000000001F) ? 0.0F : ((((double)bytes) / ONE_MB) / (t)))
                                                             ^
zip_perf.c:539:16: note: in expansion of macro ‘MB_PER_SEC’
                MB_PER_SEC(file_size, total_time));
                ^
zip_perf.c: In function ‘main’:
zip_perf.c:566:36: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     while ((opt = get_option(argc, (const char **)argv, s_opts, l_opts)) > 0) {
                                    ^
  CCLD     zip_perf
  CC       perf_meta.o
  CCLD     perf_meta
  CC       perf.o
  CCLD     perf
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/perform'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
make[2]: Nothing to be done for `all-am'.
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
Making all in .
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16'
make[1]: Nothing to be done for `all-am'.
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16'
Making all in hl
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
Making all in src
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src'
  CC       H5DO.lo
  CC       H5DS.lo
H5DS.c: In function 'H5DSget_scale_name':
H5DS.c:1888:5: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
     return (ssize_t) MAX(0,nbytes-1);
     ^
H5DS.c: In function 'H5DSset_label':
H5DS.c:1592:8: warning: 'u.const_buf' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if (u.buf)
        ^
  CC       H5IM.lo
H5IM.c: In function 'H5IMget_image_info':
H5IM.c:402:13: warning: 'atid' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Tclose( atid );
             ^
H5IM.c:401:13: warning: 'asid' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose( asid );
             ^
H5IM.c:400:13: warning: 'aid' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Aclose( aid );
             ^
  CC       H5LT.lo
H5LT.c: In function 'H5LTopen_file_image':
H5LT.c:898:5: warning: conversion to 'double' from 'size_t' may alter its value [-Wconversion]
     if ((buf_prcnt * buf_size) > min_incr)
     ^
H5LT.c:899:9: warning: conversion to 'double' from 'size_t' may alter its value [-Wconversion]
         alloc_incr = (size_t)(buf_prcnt * buf_size);
         ^
H5LT.c: In function 'H5LTfind_dataset':
H5LT.c:1417:76: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     return H5Literate(loc_id, H5_INDEX_NAME, H5_ITER_INC, 0, find_dataset, (void *)dset_name);
                                                                            ^
H5LT.c: In function 'H5LT_find_attribute':
H5LT.c:2043:77: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     return H5Aiterate2(loc_id, H5_INDEX_NAME, H5_ITER_INC, NULL, find_attr, (void *)attr_name);
                                                                             ^
H5LT.c: In function 'H5LTopen_file_image':
H5LT.c:963:17: warning: 'fapl' may be used uninitialized in this function [-Wmaybe-uninitialized]
         H5Pclose(fapl);
                 ^
  CC       H5LTanalyze.lo
H5LTanalyze.l: In function 'H5LTyyget_lineno':
H5LTanalyze.c:2332:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 #define yyless(n) \
     ^
H5LTanalyze.l: In function 'H5LTyyget_in':
H5LTanalyze.c:2341:7: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
   *(yy_c_buf_p) = '\0'; \
       ^
H5LTanalyze.l: In function 'H5LTyyget_out':
H5LTanalyze.c:2349:7: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
  * 
       ^
H5LTanalyze.l: In function 'H5LTyyget_leng':
H5LTanalyze.c:2357:11: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 /** Get the input stream.
           ^
H5LTanalyze.l: In function 'H5LTyyget_text':
H5LTanalyze.c:2366:7: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
  * 
       ^
H5LTanalyze.l: In function 'H5LTyyget_debug':
H5LTanalyze.c:2397:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
     H5LTyylineno = line_number;
     ^
H5LTanalyze.l: In function 'H5LTyywrap':
H5LTanalyze.l:192:5: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 {
     ^
  CC       H5LTparse.lo
H5LTparse.c:406:7: warning: redundant redeclaration of 'malloc' [-Wredundant-decls]
 #  endif
       ^
H5LTparse.c: In function 'H5LTyyparse':
H5LTparse.c:1459:6: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
   YYDPRINTF ((stderr, "Starting parse\n"));
      ^
H5LTparse.c:1459:6: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
H5LTparse.c:1459:6: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
  CC       H5PT.lo
  CC       H5TB.lo
H5TB.c: In function 'H5TB_find_field':
H5TB.c:3252:9: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 hbool_t H5TB_find_field(const char *field, const char *field_list)
         ^
  CCLD     libhdf5_hl.la
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src'
Making all in test
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/test'
  CC       test_lite.o
In file included from test_lite.c:19:0:
../../test/H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
../../test/H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
test_lite.c: In function ‘main’:
test_lite.c:1313:7: warning: ‘dt_str’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(dt_str)
       ^
test_lite.c:1199:13: note: ‘dt_str’ was declared here
     char*   dt_str;
             ^
  CCLD     test_lite
  CC       test_image.o
In file included from test_image.c:21:0:
../../test/H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
test_image.c: In function ‘test_generate’:
test_image.c:754:7: warning: ‘data’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(data)
       ^
test_image.c: In function ‘read_data’:
test_image.c:844:5: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     for(i = 0; i < n_elements; i++) {
     ^
  CCLD     test_image
  CC       test_file_image.o
  CCLD     test_file_image
  CC       test_table.o
In file included from test_table.c:19:0:
../../test/H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
../../test/H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     test_table
  CC       test_ds.o
test_ds.c: In function ‘create_long_dataset’:
test_ds.c:392:13: warning: size of ‘buf’ is 2304 bytes [-Wlarger-than=]
     long    buf[DIM1_SIZE*DIM2_SIZE*DIM3_SIZE*DIM4_SIZE];
             ^
In file included from ../../test/h5test.h:26:0,
                 from h5hltest.h:27,
                 from test_ds.c:18:
test_ds.c: In function ‘test_cmp_scalename’:
test_ds.c:1108:46: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
          name_out = (char*)HDmalloc((name_len+1) * sizeof (char));
                                              ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
test_ds.c: In function ‘test_simple’:
test_ds.c:3129:41: warning: conversion to ‘long unsigned int’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_out = (char*)HDmalloc((name_len+1) * sizeof (char));
                                         ^
../../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
In file included from test_ds.c:19:0:
test_ds.c: At top level:
../../test/H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
../../test/H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CCLD     test_ds
  CC       test_packet.o
  CCLD     test_packet
  CC       test_dset_opt.o
test_dset_opt.c: In function ‘test_direct_chunk_write’:
test_dset_opt.c:44:51: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DEFLATE_SIZE_ADJUST(s) (ceil(((double)(s))*1.001F)+12)
                                                   ^
test_dset_opt.c:116:40: note: in expansion of macro ‘DEFLATE_SIZE_ADJUST’
     uLongf      z_dst_nbytes = (uLongf)DEFLATE_SIZE_ADJUST(buf_size);
                                        ^
In file included from test_dset_opt.c:19:0:
test_dset_opt.c: At top level:
../../test/H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
../../test/H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
test_dset_opt.c: In function ‘filter_bogus1’:
test_dset_opt.c:508:14: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         while(buf_left>0) {
              ^
test_dset_opt.c:515:14: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         while(buf_left>0) {
              ^
test_dset_opt.c: In function ‘filter_bogus2’:
test_dset_opt.c:545:14: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         while(buf_left>0) {
              ^
test_dset_opt.c:552:14: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         while(buf_left>0) {
              ^
  CCLD     test_dset_opt
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/test'
Making all in tools
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
Making all in gif2h5
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools/gif2h5'
  CC       gif2hdf.o
  CC       gif2mem.o
  CC       decompress.o
decompress.c:62:5: warning: size of ‘Prefix’ is 16384 bytes [-Wlarger-than=]
 int Prefix[4096];
     ^
decompress.c:63:5: warning: size of ‘Suffix’ is 16384 bytes [-Wlarger-than=]
 int Suffix[4096];
     ^
decompress.c:67:5: warning: size of ‘OutCode’ is 4100 bytes [-Wlarger-than=]
 int OutCode[1025];
     ^
  CC       gifread.o
gifread.c: In function ‘GetWord’:
gifread.c:25:1: warning: function might be candidate for attribute ‘pure’ [-Wsuggest-attribute=pure]
 GetWord(BYTE *MemGif)
 ^
gifread.c: In function ‘GetByte’:
gifread.c:42:1: warning: function might be candidate for attribute ‘pure’ [-Wsuggest-attribute=pure]
 GetByte(BYTE *MemGif)
 ^
  CC       writehdf.o
  CCLD     gif2h5
  CC       hdf2gif.o
hdf2gif.c: In function ‘main’:
hdf2gif.c:217:13: warning: ‘numcols’ may be used uninitialized in this function [-Wmaybe-uninitialized]
             for (i = 0 ; i < numcols ; i++)
             ^
  CC       hdfgifwr.o
hdfgifwr.c:128:24: warning: size of ‘htab’ is 40024 bytes [-Wlarger-than=]
 static  count_int      htab [HSIZE];
                        ^
hdfgifwr.c:129:24: warning: size of ‘codetab’ is 10006 bytes [-Wlarger-than=]
 static  unsigned short codetab [HSIZE];
                        ^
  CCLD     h52gif
  CC       h52gifgentst.o
h52gifgentst.c: In function ‘main’:
h52gifgentst.c:52:19: warning: size of ‘buf’ is 80000 bytes [-Wlarger-than=]
     unsigned char buf [ WIDTH*HEIGHT ];
                   ^
h52gifgentst.c:48:5: warning: stack usage is 80800 bytes [-Wstack-usage=]
 int main(void)
     ^
h52gifgentst.c:103:1: warning: the frame size of 80784 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CCLD     h52gifgentst
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools/gif2h5'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[3]: Nothing to be done for `all-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
make[2]: Nothing to be done for `all-am'.
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
Making install in src
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
 /bin/sh ../libtool   --mode=install /usr/bin/install -c   libhdf5.la '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
libtool: install: /usr/bin/install -c .libs/libhdf5.so.10.1.0 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5.so.10.1.0
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libhdf5.so.10.1.0 libhdf5.so.10 || { rm -f libhdf5.so.10 && ln -s libhdf5.so.10.1.0 libhdf5.so.10; }; })
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libhdf5.so.10.1.0 libhdf5.so || { rm -f libhdf5.so && ln -s libhdf5.so.10.1.0 libhdf5.so; }; })
libtool: install: /usr/bin/install -c .libs/libhdf5.lai /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5.la
libtool: install: /usr/bin/install -c .libs/libhdf5.a /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5.a
libtool: install: chmod 644 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5.a
libtool: install: ranlib /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5.a
libtool: finish: PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jh7x3/.local/bin:/home/jh7x3/bin:/sbin" ldconfig -n /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/include'
 /usr/bin/install -c -m 644 hdf5.h H5api_adpt.h H5overflow.h H5pubconf.h H5public.h H5version.h H5Apublic.h H5ACpublic.h H5Cpublic.h H5Dpublic.h H5Epubgen.h H5Epublic.h H5Fpublic.h H5FDpublic.h H5FDcore.h H5FDdirect.h H5FDfamily.h H5FDlog.h H5FDmpi.h H5FDmpio.h H5FDmulti.h H5FDsec2.h H5FDstdio.h H5Gpublic.h H5Ipublic.h H5Lpublic.h H5MMpublic.h H5Opublic.h H5Ppublic.h H5PLextern.h H5PLpublic.h H5Rpublic.h H5Spublic.h H5Tpublic.h H5Zpublic.h '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/include'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
 /usr/bin/install -c -m 644 libhdf5.settings '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/src'
Making install in test
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
 /bin/sh ../libtool   --mode=install /usr/bin/install -c   libdynlib1.la libdynlib2.la libdynlib3.la '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
libtool: install: /usr/bin/install -c .libs/libdynlib1.so.0.0.0 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib1.so.0.0.0
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlib1.so.0.0.0 libdynlib1.so.0 || { rm -f libdynlib1.so.0 && ln -s libdynlib1.so.0.0.0 libdynlib1.so.0; }; })
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlib1.so.0.0.0 libdynlib1.so || { rm -f libdynlib1.so && ln -s libdynlib1.so.0.0.0 libdynlib1.so; }; })
libtool: install: /usr/bin/install -c .libs/libdynlib1.lai /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib1.la
libtool: install: /usr/bin/install -c .libs/libdynlib2.so.0.0.0 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib2.so.0.0.0
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlib2.so.0.0.0 libdynlib2.so.0 || { rm -f libdynlib2.so.0 && ln -s libdynlib2.so.0.0.0 libdynlib2.so.0; }; })
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlib2.so.0.0.0 libdynlib2.so || { rm -f libdynlib2.so && ln -s libdynlib2.so.0.0.0 libdynlib2.so; }; })
libtool: install: /usr/bin/install -c .libs/libdynlib2.lai /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib2.la
libtool: install: /usr/bin/install -c .libs/libdynlib3.so.0.0.0 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib3.so.0.0.0
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlib3.so.0.0.0 libdynlib3.so.0 || { rm -f libdynlib3.so.0 && ln -s libdynlib3.so.0.0.0 libdynlib3.so.0; }; })
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlib3.so.0.0.0 libdynlib3.so || { rm -f libdynlib3.so && ln -s libdynlib3.so.0.0.0 libdynlib3.so; }; })
libtool: install: /usr/bin/install -c .libs/libdynlib3.lai /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib3.la
libtool: install: /usr/bin/install -c .libs/libdynlib1.a /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib1.a
libtool: install: chmod 644 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib1.a
libtool: install: ranlib /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib1.a
libtool: install: /usr/bin/install -c .libs/libdynlib2.a /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib2.a
libtool: install: chmod 644 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib2.a
libtool: install: ranlib /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib2.a
libtool: install: /usr/bin/install -c .libs/libdynlib3.a /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib3.a
libtool: install: chmod 644 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib3.a
libtool: install: ranlib /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlib3.a
libtool: finish: PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jh7x3/.local/bin:/home/jh7x3/bin:/sbin" ldconfig -n /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
make  install-exec-hook
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
rm -f /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/*dynlib*
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
make[2]: Nothing to be done for `install-data-am'.
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/test'
Making install in tools
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
Making install in lib
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/lib'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/lib'
make[3]: Nothing to be done for `install-exec-am'.
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/lib'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/lib'
Making install in h5diff
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5diff'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5diff'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5diff '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5diff /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5diff
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5diff'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5diff'
Making install in h5ls
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5ls'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5ls'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5ls '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5ls /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5ls
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5ls'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5ls'
Making install in h5dump
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5dump'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5dump'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5dump '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5dump /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5dump
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5dump'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5dump'
Making install in misc
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/misc'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/misc'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5debug h5repart h5mkgrp '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5debug /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5debug
libtool: install: /usr/bin/install -c .libs/h5repart /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5repart
libtool: install: /usr/bin/install -c .libs/h5mkgrp /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5mkgrp
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
 /usr/bin/install -c h5redeploy '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/misc'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/misc'
Making install in h5import
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5import'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5import'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5import '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5import /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5import
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5import'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5import'
Making install in h5repack
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
 /bin/sh ../../libtool   --mode=install /usr/bin/install -c   libdynlibadd.la '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
libtool: install: /usr/bin/install -c .libs/libdynlibadd.so.0.0.0 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlibadd.so.0.0.0
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlibadd.so.0.0.0 libdynlibadd.so.0 || { rm -f libdynlibadd.so.0 && ln -s libdynlibadd.so.0.0.0 libdynlibadd.so.0; }; })
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libdynlibadd.so.0.0.0 libdynlibadd.so || { rm -f libdynlibadd.so && ln -s libdynlibadd.so.0.0.0 libdynlibadd.so; }; })
libtool: install: /usr/bin/install -c .libs/libdynlibadd.lai /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlibadd.la
libtool: install: /usr/bin/install -c .libs/libdynlibadd.a /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlibadd.a
libtool: install: chmod 644 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlibadd.a
libtool: install: ranlib /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libdynlibadd.a
libtool: finish: PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jh7x3/.local/bin:/home/jh7x3/bin:/sbin" ldconfig -n /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5repack '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5repack /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5repack
make  install-exec-hook
make[4]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
rm -f /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/*dynlib*
make[4]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5repack'
Making install in h5jam
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5jam'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5jam'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5jam h5unjam '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5jam /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5jam
libtool: install: /usr/bin/install -c .libs/h5unjam /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5unjam
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5jam'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5jam'
Making install in h5copy
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5copy'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5copy'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5copy '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5copy /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5copy
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5copy'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5copy'
Making install in h5stat
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5stat'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5stat'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5stat '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5stat /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5stat
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5stat'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/h5stat'
Making install in perform
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/perform'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/perform'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../libtool   --mode=install /usr/bin/install -c h5perf_serial '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/h5perf_serial /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h5perf_serial
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/perform'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools/perform'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
make[3]: Nothing to be done for `install-exec-am'.
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/tools'
Making install in .
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16'
make[2]: Nothing to be done for `install-exec-am'.
make[2]: Nothing to be done for `install-data-am'.
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16'
Making install in hl
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
Making install in src
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
 /bin/sh ../../libtool   --mode=install /usr/bin/install -c   libhdf5_hl.la '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib'
libtool: install: warning: relinking `libhdf5_hl.la'
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src; /bin/sh /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/libtool  --silent --tag CC --mode=relink gcc -std=c99 -pedantic -Wall -Wextra -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline -Wfloat-equal -Wmissing-format-attribute -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wformat=2 -Wunreachable-code -Wendif-labels -Wdeclaration-after-statement -Wold-style-definition -Winvalid-pch -Wvariadic-macros -Winit-self -Wmissing-include-dirs -Wswitch-default -Wswitch-enum -Wunused-macros -Wunsafe-loop-optimizations -Wc++-compat -Wstrict-overflow -Wlogical-op -Wlarger-than=2048 -Wvla -Wsync-nand -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wstrict-overflow=5 -Wjump-misses-init -Wdouble-promotion -Wsuggest-attribute=const -Wtrampolines -Wstack-usage=8192 -Wvector-operation-performance -Wsuggest-attribute=pure -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -O3 -version-info 10:2:0 -L/data/jh7x3/GFOLD/GFOLD_database_tools2//tools/zlib-1.2.8/lib -o libhdf5_hl.la -rpath /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib H5DO.lo H5DS.lo H5IM.lo H5LT.lo H5LTanalyze.lo H5LTparse.lo H5PT.lo H5TB.lo ../../src/libhdf5.la -lz -ldl -lm )
libtool: install: /usr/bin/install -c .libs/libhdf5_hl.so.10.0.2T /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5_hl.so.10.0.2
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libhdf5_hl.so.10.0.2 libhdf5_hl.so.10 || { rm -f libhdf5_hl.so.10 && ln -s libhdf5_hl.so.10.0.2 libhdf5_hl.so.10; }; })
libtool: install: (cd /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib && { ln -s -f libhdf5_hl.so.10.0.2 libhdf5_hl.so || { rm -f libhdf5_hl.so && ln -s libhdf5_hl.so.10.0.2 libhdf5_hl.so; }; })
libtool: install: /usr/bin/install -c .libs/libhdf5_hl.lai /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5_hl.la
libtool: install: /usr/bin/install -c .libs/libhdf5_hl.a /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5_hl.a
libtool: install: chmod 644 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5_hl.a
libtool: install: ranlib /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib/libhdf5_hl.a
libtool: finish: PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/jh7x3/.local/bin:/home/jh7x3/bin:/sbin" ldconfig -n /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/include'
 /usr/bin/install -c -m 644 hdf5_hl.h H5DOpublic.h H5IMpublic.h H5LTpublic.h H5TBpublic.h H5DSpublic.h H5PTpublic.h '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/include'
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/src'
Making install in test
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/test'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/test'
make[3]: Nothing to be done for `install-exec-am'.
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/test'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/test'
Making install in tools
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
Making install in gif2h5
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools/gif2h5'
make[4]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools/gif2h5'
 /usr/bin/mkdir -p '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
  /bin/sh ../../../libtool   --mode=install /usr/bin/install -c gif2h5 h52gif '/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin'
libtool: install: /usr/bin/install -c .libs/gif2h5 /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/gif2h5
libtool: install: /usr/bin/install -c .libs/h52gif /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/bin/h52gif
make[4]: Nothing to be done for `install-data-am'.
make[4]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools/gif2h5'
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools/gif2h5'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[4]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[4]: Nothing to be done for `install-exec-am'.
make[4]: Nothing to be done for `install-data-am'.
make[4]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/tools'
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
make[3]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
make[3]: Nothing to be done for `install-exec-am'.
make[3]: Nothing to be done for `install-data-am'.
make[3]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
for d in examples  hl; do               \
    (cd $d && make  install-examples) || exit 1;           \
done
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/examples'
../bin/mkdirs /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c
+ /usr/bin/install -c ./h5_write.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_read.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_extend_write.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_chunk_read.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_crtgrpd.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_subset.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_cmprss.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_rdwt.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_crtgrpar.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_extend.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_crtatt.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_crtgrp.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_crtdat.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_compound.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_group.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_select.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_attribute.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_mount.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_reference.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_drivers.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_extlink.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_elink_unix2win.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_ref2reg.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./h5_shared_mesg.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./ph5example.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c run-c-ex.sh /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/c/.
+ /usr/bin/install -c ./README /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/.
+ /usr/bin/install -c ./run-all-ex.sh /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/.
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/examples'
make[1]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'
for d in examples ; do               \
    (cd $d && make  install-examples) || exit 1;           \
done
make[2]: Entering directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/examples'
../../bin/mkdirs /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c
+ /usr/bin/install -c ./ex_lite1.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_lite2.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_lite3.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ptExampleFL.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_image1.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_image2.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_01.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_02.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_03.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_04.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_05.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_06.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_07.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_08.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_09.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_10.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_11.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_table_12.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./ex_ds1.c /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./image24pixel.txt /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./image8.txt /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./pal_rgb.h /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c run-hlc-ex.sh /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/c/.
+ /usr/bin/install -c ./run-hl-ex.sh /data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hdf5/share/hdf5_examples/hl/.
make[2]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl/examples'
make[1]: Leaving directory `/data/jh7x3/GFOLD/GFOLD_database_tools2/tools/hdf5-1.8.16/hl'

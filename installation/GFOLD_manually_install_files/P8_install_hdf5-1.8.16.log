 Start compile hdf5-1.8.16 (will take ~1 min)
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking whether to enable maintainer-specific portions of Makefiles... no
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking shell variables initial values... done
checking if basename works... yes
checking if xargs works... yes
checking for cached host... none
checking for config x86_64-unknown-linux-gnu... no
checking for config x86_64-unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-unknown... no
checking for config linux-gnu... found
compiler 'gcc' is GNU gcc-4.8.5
checking for config ./config/site-specific/host-multicom.eecs.missouri.edu... no
checking for config ./config/site-specific/host-eecs.missouri.edu... no
checking for config ./config/site-specific/host-missouri.edu... no
checking for config ./config/site-specific/host-edu... no
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking for style of include used by make... GNU
checking dependency style of gcc... gcc3
checking if unsupported combinations of configure options are allowed... no
checking if Fortran interface enabled... no
checking if Fortran 2003 interface enabled... no
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking dependency style of g++... gcc3
checking how to run the C++ preprocessor... g++ -E
checking if c++ interface enabled... no
checking if high level library is enabled... yes
checking for perl... perl
checking for ar... ar
checking whether make sets $(MAKE)... (cached) yes
checking for tr... /usr/bin/tr
checking if srcdir= and time commands work together... no
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 1572864
checking whether the shell understands some XSI constructs... yes
checking whether the shell understands "+="... yes
checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop
checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for mt... no
checking if : is a manifest tool... no
checking how to run the C preprocessor... gcc -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking for shl_load... no
checking for shl_load in -ldld... no
checking for dlopen... no
checking for dlopen in -ldl... yes
checking whether a program can dlopen itself... yes
checking whether a statically linked program can dlopen itself... yes
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking if we should install only statically linked executables... no
checking if -Wl,-rpath should be used to link shared libs in nondefault directories... yes
checking whether make will build with undefined variables... yes
checking for production mode... production
checking for ceil in -lm... yes
checking for dlopen in -ldl... (cached) yes
checking for ANSI C header files... (cached) yes
checking whether time.h and sys/time.h may both be included... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for unistd.h... (cached) yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking for sys/stat.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking for sys/types.h... (cached) yes
checking stddef.h usability... yes
checking stddef.h presence... yes
checking for stddef.h... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking features.h usability... yes
checking features.h presence... yes
checking for features.h... yes
checking dirent.h usability... yes
checking dirent.h presence... yes
checking for dirent.h... yes
checking for stdint.h... (cached) yes
checking mach/mach_time.h usability... no
checking mach/mach_time.h presence... no
checking for mach/mach_time.h... no
checking io.h usability... no
checking io.h presence... no
checking for io.h... no
checking winsock2.h usability... no
checking winsock2.h presence... no
checking for winsock2.h... no
checking sys/timeb.h usability... yes
checking sys/timeb.h presence... yes
checking for sys/timeb.h... yes
checking if libtool needs -no-undefined flag to build shared libraries... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking for lseek64... yes
checking for fseeko64... yes
checking for ftello64... yes
checking for ftruncate64... yes
checking for fseeko... yes
checking for ftello... yes
checking for stat64... yes
checking for fstat64... yes
checking for off_t... yes
checking for size_t... yes
checking for ssize_t... yes
checking for ptrdiff_t... yes
checking whether byte ordering is bigendian... no
checking size of char... 1
checking size of short... 2
checking size of int... 4
checking size of unsigned... 4
checking size of long... 8
checking size of long long... 8
checking size of __int64... 0
checking size of float... 4
checking size of double... 8
checking size of long double... 16
checking size of int8_t... 1
checking size of uint8_t... 1
checking size of int_least8_t... 1
checking size of uint_least8_t... 1
checking size of int_fast8_t... 1
checking size of uint_fast8_t... 1
checking size of int16_t... 2
checking size of uint16_t... 2
checking size of int_least16_t... 2
checking size of uint_least16_t... 2
checking size of int_fast16_t... 8
checking size of uint_fast16_t... 8
checking size of int32_t... 4
checking size of uint32_t... 4
checking size of int_least32_t... 4
checking size of uint_least32_t... 4
checking size of int_fast32_t... 8
checking size of uint_fast32_t... 8
checking size of int64_t... 8
checking size of uint64_t... 8
checking size of int_least64_t... 8
checking size of uint_least64_t... 8
checking size of int_fast64_t... 8
checking size of uint_fast64_t... 8
checking size of size_t... 8
checking size of ssize_t... 8
checking size of ptrdiff_t... 8
checking size of off_t... 8
checking size of off64_t... 8
checking if dev_t is scalar... yes
checking for dmalloc library... suppressed
checking zlib.h usability... yes
checking zlib.h presence... yes
checking for zlib.h... yes
checking for compress2 in -lz... yes
checking for compress2... yes
checking for szlib... suppressed
checking for thread safe support... no
checking whether CLOCK_MONOTONIC is declared... yes
checking for tm_gmtoff in struct tm... yes
checking for global timezone variable... yes
checking for st_blocks in struct stat... yes
checking for _getvideoconfig... no
checking for gettextinfo... no
checking for GetConsoleScreenBufferInfo... no
checking for _scrsize... no
checking for ioctl... yes
checking for struct videoconfig... no
checking for struct text_info... no
checking for TIOCGWINSZ... yes
checking for TIOCGETD... yes
checking for library containing clock_gettime... none required
checking for alarm... yes
checking for clock_gettime... yes
checking for difftime... yes
checking for fork... yes
checking for frexpf... yes
checking for frexpl... yes
checking for gethostname... yes
checking for getpwuid... yes
checking for getrusage... yes
checking for gettimeofday... yes
checking for lstat... yes
checking for rand_r... yes
checking for random... yes
checking for setsysinfo... no
checking for signal... yes
checking for longjmp... yes
checking for setjmp... yes
checking for siglongjmp... yes
checking for sigsetjmp... no
checking for sigprocmask... yes
checking for snprintf... yes
checking for srandom... yes
checking for strdup... yes
checking for symlink... yes
checking for system... yes
checking for tmpfile... yes
checking for asprintf... yes
checking for vasprintf... yes
checking for vsnprintf... yes
checking for waitpid... yes
checking for an ANSI C-conforming const... yes
checking if the compiler understands  __inline__... yes
checking if the compiler understands __inline... yes
checking if the compiler understands inline... yes
checking for __attribute__ extension... yes
checking for __func__ extension... yes
checking for __FUNCTION__ extension... yes
checking for C99 designated initialization support... yes
checking how to print long long... %ld and %lu
checking Threads support system scope... yes
checking for debug flags... none
checking whether function stack tracking is enabled... no
checking whether metadata trace file code is enabled... no
checking for API tracing... no
checking for instrumented library... no
checking whether to clear file buffers... yes
checking whether a memory checking tool will be used... no
checking for parallel support files... skipped
checking whether O_DIRECT is declared... yes
checking for posix_memalign... yes
checking if the direct I/O virtual file driver (VFD) is enabled... no
checking for custom plugin default path definition... /usr/local/hdf5/lib/plugin
checking whether exception handling functions is checked during data conversions... yes
checking whether data accuracy is guaranteed during data conversions... yes
checking if the machine has window style path name... no
checking if using special algorithm to convert long double to (unsigned) long values... no
checking if using special algorithm to convert (unsigned) long to long double values... no
checking if correctly converting long double to (unsigned) long long values... yes
checking if correctly converting (unsigned) long long to long double values... yes
checking additional programs should be built... no
checking if deprecated public symbols are available... yes
checking which version of public symbols to use by default... v18
checking whether to perform strict file format checks... no
checking whether to have library information embedded in the executables... yes
checking if alignment restrictions are strictly enforced... no
configure: creating ./config.lt
config.lt: creating libtool
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating src/libhdf5.settings
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating test/Makefile
config.status: creating test/testcheck_version.sh
config.status: creating test/testerror.sh
config.status: creating test/H5srcdir_str.h
config.status: creating test/testlibinfo.sh
config.status: creating test/testlinks_env.sh
config.status: creating test/test_plugin.sh
config.status: creating testpar/Makefile
config.status: creating tools/Makefile
config.status: creating tools/h5dump/Makefile
config.status: creating tools/h5dump/testh5dump.sh
config.status: creating tools/h5dump/testh5dumppbits.sh
config.status: creating tools/h5dump/testh5dumpxml.sh
config.status: creating tools/h5ls/testh5ls.sh
config.status: creating tools/h5import/Makefile
config.status: creating tools/h5import/h5importtestutil.sh
config.status: creating tools/h5diff/Makefile
config.status: creating tools/h5diff/testh5diff.sh
config.status: creating tools/h5diff/testph5diff.sh
config.status: creating tools/h5jam/Makefile
config.status: creating tools/h5jam/testh5jam.sh
config.status: creating tools/h5repack/Makefile
config.status: creating tools/h5repack/h5repack.sh
config.status: creating tools/h5repack/h5repack_plugin.sh
config.status: creating tools/h5ls/Makefile
config.status: creating tools/h5copy/Makefile
config.status: creating tools/h5copy/testh5copy.sh
config.status: creating tools/lib/Makefile
config.status: creating tools/misc/Makefile
config.status: creating tools/misc/h5cc
config.status: creating tools/misc/testh5mkgrp.sh
config.status: creating tools/misc/testh5repart.sh
config.status: creating tools/h5stat/testh5stat.sh
config.status: creating tools/h5stat/Makefile
config.status: creating tools/perform/Makefile
config.status: creating examples/Makefile
config.status: creating examples/run-c-ex.sh
config.status: creating examples/testh5cc.sh
config.status: creating c++/Makefile
config.status: creating c++/src/Makefile
config.status: creating c++/src/h5c++
config.status: creating c++/test/Makefile
config.status: creating c++/test/H5srcdir_str.h
config.status: creating c++/examples/Makefile
config.status: creating c++/examples/run-c++-ex.sh
config.status: creating c++/examples/testh5c++.sh
config.status: creating fortran/Makefile
config.status: creating fortran/src/h5fc
config.status: creating fortran/src/Makefile
config.status: creating fortran/test/Makefile
config.status: creating fortran/testpar/Makefile
config.status: creating fortran/examples/Makefile
config.status: creating fortran/examples/run-fortran-ex.sh
config.status: creating fortran/examples/testh5fc.sh
config.status: creating hl/Makefile
config.status: creating hl/src/Makefile
config.status: creating hl/test/Makefile
config.status: creating hl/test/H5srcdir_str.h
config.status: creating hl/tools/Makefile
config.status: creating hl/tools/gif2h5/Makefile
config.status: creating hl/tools/gif2h5/h52giftest.sh
config.status: creating hl/examples/Makefile
config.status: creating hl/examples/run-hlc-ex.sh
config.status: creating hl/c++/Makefile
config.status: creating hl/c++/src/Makefile
config.status: creating hl/c++/test/Makefile
config.status: creating hl/c++/examples/Makefile
config.status: creating hl/c++/examples/run-hlc++-ex.sh
config.status: creating hl/fortran/Makefile
config.status: creating hl/fortran/src/Makefile
config.status: creating hl/fortran/test/Makefile
config.status: creating hl/fortran/examples/Makefile
config.status: creating hl/fortran/examples/run-hlfortran-ex.sh
config.status: creating src/H5config.h
config.status: executing pubconf commands
creating src/H5pubconf.h
Post process src/libhdf5.settings
config.status: executing depfiles commands
config.status: executing libtool commands
	    SUMMARY OF THE HDF5 CONFIGURATION
	    =================================

General Information:
-------------------
		   HDF5 Version: 1.8.16
		  Configured on: Fri Aug  2 01:03:47 CDT 2019
		  Configured by: jh7x3@multicom.eecs.missouri.edu
		 Configure mode: production
		    Host system: x86_64-unknown-linux-gnu
	      Uname information: Linux multicom.eecs.missouri.edu 3.10.0-957.5.1.el7.x86_64 #1 SMP Fri Feb 1 14:54:57 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
		       Byte sex: little-endian
		      Libraries: static, shared
	     Installation point: /data/commons/GFOLD_db_tools/tools/hdf5-1.8.16/hdf5

Compiling Options:
------------------
               Compilation Mode: production
                     C Compiler: /usr/bin/gcc ( gcc (GCC) 4.8.5 20150623 )
                         CFLAGS: 
                      H5_CFLAGS: -std=c99 -pedantic -Wall -Wextra -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline -Wfloat-equal -Wmissing-format-attribute -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wformat=2 -Wunreachable-code -Wendif-labels -Wdeclaration-after-statement -Wold-style-definition -Winvalid-pch -Wvariadic-macros -Winit-self -Wmissing-include-dirs -Wswitch-default -Wswitch-enum -Wunused-macros -Wunsafe-loop-optimizations -Wc++-compat -Wstrict-overflow -Wlogical-op -Wlarger-than=2048 -Wvla -Wsync-nand -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wstrict-overflow=5 -Wjump-misses-init -Wdouble-promotion -Wsuggest-attribute=const -Wtrampolines -Wstack-usage=8192 -Wvector-operation-performance -Wsuggest-attribute=pure -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -O3
                      AM_CFLAGS: 
                       CPPFLAGS: 
                    H5_CPPFLAGS: -D_GNU_SOURCE -D_POSIX_C_SOURCE=200112L   -DNDEBUG -UH5_DEBUG_API
                    AM_CPPFLAGS: -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE  -I/data/commons/GFOLD_db_tools//tools/zlib-1.2.8/include
               Shared C Library: yes
               Static C Library: yes
  Statically Linked Executables: no
                        LDFLAGS: 
                     H5_LDFLAGS: 
                     AM_LDFLAGS:  -L/data/commons/GFOLD_db_tools//tools/zlib-1.2.8/lib
 	 	Extra libraries: -lz -ldl -lm 
 		       Archiver: ar
 		 	 Ranlib: ranlib
 	      Debugged Packages: 
		    API Tracing: no

Languages:
----------
                        Fortran: no

                            C++: no

Features:
---------
                  Parallel HDF5: no
             High Level library: yes
                   Threadsafety: no
            Default API Mapping: v18
 With Deprecated Public Symbols: yes
         I/O filters (external): deflate(zlib)
                            MPE: no
                     Direct VFD: no
                        dmalloc: no
Clear file buffers before write: yes
           Using memory checker: no
         Function Stack Tracing: no
      Strict File Format Checks: no
   Optimization Instrumentation: no
Making all in src
make[1]: Entering directory `/data/commons/GFOLD_db_tools/tools/hdf5-1.8.16/src'
make  all-am
make[2]: Entering directory `/data/commons/GFOLD_db_tools/tools/hdf5-1.8.16/src'
  CC       H5.lo
  CC       H5checksum.lo
H5checksum.c: In function 'H5_checksum_fletcher32':
H5checksum.c:112:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5_checksum_fletcher32(const void *_data, size_t _len)
 ^
H5checksum.c: In function 'H5_checksum_lookup3':
H5checksum.c:374:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5_checksum_lookup3(const void *key, size_t length, uint32_t initval)
 ^
H5checksum.c: In function 'H5_hash_string':
H5checksum.c:481:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5_hash_string(const char *str)
 ^
  CC       H5dbg.lo
H5dbg.c: In function 'H5_buffer_dump':
H5dbg.c:102:5: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
     for(u = 0; u < buf_size; u += 16) {
     ^
  CC       H5system.lo
H5system.c: In function 'HDfprintf':
H5system.c:277:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:280:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:283:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:286:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf (stream, format_templ, x);
                         ^
H5system.c:296:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:299:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:302:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:305:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:316:25: warning: implicit conversion from 'float' to 'double' when passing argument to function [-Wdouble-promotion]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:316:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5system.c:319:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:327:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:364:29: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                             n = fprintf(stream, format_templ, x);
                             ^
H5system.c:376:29: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                             fprintf(stream, format_templ, "UNDEF");
                             ^
H5system.c:384:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:392:25: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                         n = fprintf(stream, format_templ, x);
                         ^
H5system.c:398:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                     n = fprintf(stream, format_templ, nout);
                     ^
H5system.c: In function 'HDstrtoll':
H5system.c:515:7: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
       (*s>='A' && *s<'A'+base-10)))) {
       ^
H5system.c:515:7: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
H5system.c:515:7: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
  CC       H5timer.lo
H5timer.c: In function 'H5_timer_begin':
H5timer.c:130:53: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                    ((double)rusage.ru_utime.tv_usec / 1e6F);
                                                     ^
H5timer.c:132:53: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                    ((double)rusage.ru_stime.tv_usec / 1e6F);
                                                     ^
H5timer.c:139:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     timer->etime = (double)etime.tv_sec + ((double)etime.tv_usec / 1e6F);
                                                                  ^
In file included from H5timer.c:35:0:
H5timer.c: In function 'H5_timer_end':
H5private.h:328:26: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                          ^
H5timer.c:169:20: note: in expansion of macro 'MAX'
     timer->utime = MAX(0.0F, now.utime - timer->utime);
                    ^
H5private.h:328:38: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                      ^
H5timer.c:169:20: note: in expansion of macro 'MAX'
     timer->utime = MAX(0.0F, now.utime - timer->utime);
                    ^
H5private.h:328:26: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                          ^
H5timer.c:170:20: note: in expansion of macro 'MAX'
     timer->stime = MAX(0.0F, now.stime - timer->stime);
                    ^
H5private.h:328:38: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                      ^
H5timer.c:170:20: note: in expansion of macro 'MAX'
     timer->stime = MAX(0.0F, now.stime - timer->stime);
                    ^
H5private.h:328:26: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                          ^
H5timer.c:171:20: note: in expansion of macro 'MAX'
     timer->etime = MAX(0.0F, now.etime - timer->etime);
                    ^
H5private.h:328:38: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
 #define MAX(a,b)    (((a)>(b)) ? (a) : (b))
                                      ^
H5timer.c:171:20: note: in expansion of macro 'MAX'
     timer->etime = MAX(0.0F, now.etime - timer->etime);
                    ^
H5timer.c: In function 'H5_bandwidth':
H5timer.c:211:17: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     if(nseconds <= 0.0F)
                 ^
In file included from H5timer.c:35:0:
H5private.h:512:47: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define H5_DBL_ABS_EQUAL(X,Y)       (HDfabs (X-Y) < DBL_EPSILON)
                                               ^
H5private.h:715:31: note: in definition of macro 'HDfabs'
     #define HDfabs(X)    fabs(X)
                               ^
H5timer.c:215:12: note: in expansion of macro 'H5_DBL_ABS_EQUAL'
         if(H5_DBL_ABS_EQUAL(bw, 0.0F))
            ^
H5timer.c:217:20: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         else if(bw < 1.0F)
                    ^
H5timer.c:219:20: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         else if(bw < H5_KB) {
                    ^
H5timer.c:222:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_MB) {
                      ^
H5timer.c:223:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_KB);
                                       ^
H5timer.c:225:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_GB) {
                      ^
H5timer.c:226:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_MB);
                                       ^
H5timer.c:228:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_TB) {
                      ^
H5timer.c:229:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_GB);
                                       ^
H5timer.c:231:22: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
         } else if(bw < H5_EB) {
                      ^
H5timer.c:232:39: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
             sprintf(buf, "%05.4f", bw / H5_TB);
                                       ^
  CC       H5trace.lo
H5trace.c: In function 'H5_trace':
H5trace.c:159:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     if(HDfabs(first_time.etime) < 0.0000000001F)
                                 ^
H5trace.c:235:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      unsigned n = (unsigned)MAX (0, (int)HDstrlen(argname) - 3); /*lint !e666 Allow expression with side effects */
      ^
H5trace.c:2312:29: warning: conversion to 'hssize_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
                             asize[argno] = iul;
                             ^
H5trace.c:2336:29: warning: conversion to 'hssize_t' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                             asize[argno] = iull;
                             ^
  CC       H5A.lo
  CC       H5Abtree2.lo
H5Abtree2.c: In function 'H5A_dense_btree2_name_compare':
H5Abtree2.c:272:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;                  /* Status from fractal heap 'op' routine */
                ^
  CC       H5Adense.lo
  CC       H5Adeprec.lo
  CC       H5Aint.lo
H5Aint.c: In function 'H5A_create':
H5Aint.c:202:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (attr->shared->dt = H5T_copy(type, H5T_COPY_ALL)))
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Aprivate.h:27,
                 from H5Apkg.h:39,
                 from H5Aint.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Aint.c: In function 'H5A_write':
H5Aint.c:529:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if((src_id = H5I_register(H5I_DATATYPE, H5T_copy(mem_type, H5T_COPY_ALL), FALSE)) < 0 ||
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Aprivate.h:27,
                 from H5Apkg.h:39,
                 from H5Aint.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Aint.c: In function 'H5A_read':
H5Aint.c:646:25: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
                         (dst_id = H5I_register(H5I_DATATYPE, H5T_copy(mem_type, H5T_COPY_ALL), FALSE)) < 0)
                         ^
In file included from H5Oprivate.h:41:0,
                 from H5Aprivate.h:27,
                 from H5Apkg.h:39,
                 from H5Aint.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
In file included from H5Aint.c:38:0:
H5Aint.c: In function 'H5A_attr_copy_file':
H5Sprivate.h:172:71: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
 #define H5S_GET_EXTENT_NPOINTS(S)       (H5S_get_simple_extent_npoints(S))
                                                                       ^
H5private.h:1522:23: note: in definition of macro 'H5_CHECKED_ASSIGN'
     (dst) = (dsttype)(src);
                       ^
H5Aint.c:2016:60: note: in expansion of macro 'H5S_GET_EXTENT_NPOINTS'
     H5_CHECKED_ASSIGN(attr_dst->shared->data_size, size_t, H5S_GET_EXTENT_NPOINTS(attr_dst->shared->ds) * H5T_get_size(attr_dst->shared->dt), hssize_t);
                                                            ^
H5Aint.c:1914:17: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     H5O_copy_t *cpy_info, hid_t dxpl_id)
                 ^
H5Aint.c: In function 'H5A_oloc':
H5Aint.c:1093:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5A_oloc(H5A_t *attr)
 ^
H5Aint.c: In function 'H5A_nameof':
H5Aint.c:1124:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5A_nameof(H5A_t *attr)
 ^
H5Aint.c: In function 'H5A_type':
H5Aint.c:1153:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5A_type(const H5A_t *attr)
 ^
  CC       H5Atest.lo
  CC       H5AC.lo
  CC       H5B.lo
H5B.c: In function 'H5B_shared_new':
H5B.c:1751:30: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
                 shared->nkey = H5FL_SEQ_FREE(size_t, shared->nkey);
                              ^
H5B.c: In function 'H5B_shared_free':
H5B.c:1782:18: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
     shared->nkey = H5FL_SEQ_FREE(size_t, shared->nkey);
                  ^
H5B.c: In function 'H5B_copy':
H5B.c:1850:22: warning: request for implicit conversion from 'void *' to 'haddr_t *' not permitted in C++ [-Wc++-compat]
      new_node->child = H5FL_SEQ_FREE(haddr_t, new_node->child);
                      ^
H5B.c: In function 'H5B_valid':
H5B.c:2035:26: warning: variable 'shared' set but not used [-Wunused-but-set-variable]
     H5B_shared_t        *shared;                /* Pointer to shared B-tree info */
                          ^
H5B.c: In function 'H5B_node_dest':
H5B.c:2097:15: warning: request for implicit conversion from 'void *' to 'haddr_t *' not permitted in C++ [-Wc++-compat]
     bt->child = H5FL_SEQ_FREE(haddr_t, bt->child);
               ^
  CC       H5Bcache.lo
  CC       H5Bdbg.lo
H5Bdbg.c: In function 'H5B_debug':
H5Bdbg.c:130:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     "Address:", bt->child[u]);
     ^
H5Bdbg.c:136:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       "Left Key:");
                       ^
H5Bdbg.c:139:10: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
          H5B_NKEY(bt, shared, u), udata);
          ^
H5Bdbg.c:143:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       "Right Key:");
                       ^
H5Bdbg.c:146:10: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
          H5B_NKEY(bt, shared, u + 1), udata);
          ^
  CC       H5B2.lo
  CC       H5B2cache.lo
H5B2cache.c: In function 'H5B2__cache_internal_load':
H5B2cache.c:553:27: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
     internal->nrec = udata->nrec;
                           ^
H5B2cache.c:554:28: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
     internal->depth = udata->depth;
                            ^
In file included from H5B2private.h:34:0,
                 from H5B2pkg.h:32,
                 from H5B2cache.c:38:
H5Fprivate.h:151:20: warning: conversion to 'uint16_t' from 'int' may alter its value [-Wconversion]
       n = (n << 8) | *(--p);            \
                    ^
H5Fprivate.h:183:41: note: in expansion of macro 'DECODE_VAR'
 #  define UINT64DECODE_VAR(p, n, l)     DECODE_VAR(p, n, l)
                                         ^
H5B2cache.c:573:9: note: in expansion of macro 'UINT64DECODE_VAR'
         UINT64DECODE_VAR(p, int_node_ptr->node_nrec, udata->hdr->max_nrec_size);
         ^
H5B2cache.c: In function 'H5B2__cache_leaf_load':
H5B2cache.c:891:23: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
     leaf->nrec = udata->nrec;
                       ^
  CC       H5B2dbg.lo
H5B2dbg.c: In function 'H5B2_hdr_debug':
H5B2dbg.c:175:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             hdr->node_info[u].max_nrec, hdr->node_info[u].split_nrec, hdr->node_info[u].merge_nrec);
             ^
H5B2dbg.c: In function 'H5B2_int_debug':
H5B2dbg.c:289:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   internal->node_ptrs[u].addr);
                   ^
H5B2dbg.c:294:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   temp_str);
                   ^
H5B2dbg.c:297:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5B2_INT_NREC(internal, hdr, u), dbg_ctx);
             ^
H5B2dbg.c:306:15: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
               internal->node_ptrs[u].addr);
               ^
H5B2dbg.c: In function 'H5B2_leaf_debug':
H5B2dbg.c:415:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   temp_str);
                   ^
H5B2dbg.c:418:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5B2_LEAF_NREC(leaf, hdr, u), dbg_ctx);
             ^
  CC       H5B2hdr.lo
H5B2hdr.c: In function 'H5B2_hdr_free':
H5B2hdr.c:525:22: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         hdr->nat_off = H5FL_SEQ_FREE(size_t, hdr->nat_off);
                      ^
H5B2hdr.c:542:24: warning: request for implicit conversion from 'void *' to 'struct H5B2_node_info_t *' not permitted in C++ [-Wc++-compat]
         hdr->node_info = H5FL_SEQ_FREE(H5B2_node_info_t, hdr->node_info);
                        ^
  CC       H5B2int.lo
  CC       H5B2stat.lo
  CC       H5B2test.lo
H5B2test.c: In function 'H5B2_get_node_depth_test':
H5B2test.c:529:22: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
     ret_value = ninfo.depth;
                      ^
  CC       H5C.lo
H5C.c: In function 'H5C_pin_protected_entry':
H5C.c:3418:25: warning: variable 'cache_ptr' set but not used [-Wunused-but-set-variable]
     H5C_t             * cache_ptr;
                         ^
H5C.c: At top level:
H5C.c:285:1: warning: 'H5C_epoch_marker_notify' defined but not used [-Wunused-function]
 H5C_epoch_marker_notify(H5C_notify_action_t H5_ATTR_UNUSED action,
 ^
H5C.c: In function 'H5C_stats__reset':
H5C.c:4812:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5C_stats__reset(H5C_t H5_ATTR_UNUSED * cache_ptr)
 ^
H5C.c: In function 'H5C_make_space_in_cache':
H5C.c:8336:36: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 ( entries_examined <= initial_list_len )
                                    ^
  CC       H5CS.lo
  CC       H5D.lo
  CC       H5Dbtree.lo
  CC       H5Dchunk.lo
H5Dchunk.c: In function 'H5D__chunk_io_init':
H5Dchunk.c:738:60: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     if((file_space_normalized = H5S_hyper_normalize_offset((H5S_t *)file_space, old_offset)) < 0)
                                                            ^
H5Dchunk.c:976:41: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5S_hyper_denormalize_offset((H5S_t *)file_space, old_offset) < 0)
                                         ^
H5Dchunk.c: In function 'H5D__create_chunk_map_single':
H5Dchunk.c:1196:26: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     chunk_info->mspace = (H5S_t *)fm->mem_space;
                          ^
H5Dchunk.c: In function 'H5D__create_chunk_file_map_hyper':
H5Dchunk.c:1263:46: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(TRUE == H5S_hyper_intersect_block((H5S_t *)fm->file_space, coords, end)) {
                                              ^
H5Dchunk.c: In function 'H5D__create_chunk_mem_map_hyper':
H5Dchunk.c:1430:30: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         chunk_info->mspace = (H5S_t *)fm->mem_space;
                              ^
H5Dchunk.c: In function 'H5D__chunk_allocate':
H5Dchunk.c:3345:17: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                 (void *)pline, (H5MM_free_t)H5D__chunk_xfree, (void *)pline,
                 ^
H5Dchunk.c:3345:63: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                 (void *)pline, (H5MM_free_t)H5D__chunk_xfree, (void *)pline,
                                                               ^
H5Dchunk.c: In function 'H5D__chunk_prune_fill':
H5Dchunk.c:3789:20: warning: size of 'chunk_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t chunk_iter;          /* Memory selection iteration info */
                    ^
H5Dchunk.c: In function 'H5D__chunk_copy':
H5Dchunk.c:4831:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (dt_mem = H5T_copy(dt_src, H5T_COPY_TRANSIENT)))
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dchunk.c:57:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dchunk.c:4839:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (dt_dst = H5T_copy(dt_src, H5T_COPY_TRANSIENT)))
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dchunk.c:57:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dchunk.c: In function 'H5D__chunk_dest':
H5Dchunk.c:5168:20: warning: request for implicit conversion from 'void *' to 'struct H5D_rdcc_ent_t **' not permitted in C++ [-Wc++-compat]
         rdcc->slot = H5FL_SEQ_FREE(H5D_rdcc_ent_ptr_t, rdcc->slot);
                    ^
  CC       H5Dcompact.lo
  CC       H5Dcontig.lo
H5Dcontig.c: In function 'H5D__contig_is_space_alloc':
H5Dcontig.c:471:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5D__contig_is_space_alloc(const H5O_storage_t *storage)
 ^
  CC       H5Ddbg.lo
  CC       H5Ddeprec.lo
  CC       H5Defl.lo
In file included from H5Cprivate.h:37:0,
                 from H5ACprivate.h:35,
                 from H5Oprivate.h:38,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Defl.c:32:
H5Defl.c: In function 'H5D__efl_read':
H5Defl.c:292:42: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(H5F_OVERFLOW_HSIZET2OFFT(efl->slot[u].offset + skip))
                                          ^
H5Fprivate.h:346:16: note: in definition of macro 'H5F_OVERFLOW_HSIZET2OFFT'
     ((hsize_t)(X)>=(hsize_t)((hsize_t)1<<(8*sizeof(off_t)-1)))
                ^
In file included from H5Defl.c:31:0:
H5Defl.c:296:37: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(HDlseek(fd, (off_t)(efl->slot[u].offset + skip), SEEK_SET) < 0)
                                     ^
H5private.h:1000:43: note: in definition of macro 'HDlseek'
         #define HDlseek(F,O,W)  lseek64(F,O,W)
                                           ^
In file included from H5Cprivate.h:37:0,
                 from H5ACprivate.h:35,
                 from H5Oprivate.h:38,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Defl.c:32:
H5Defl.c: In function 'H5D__efl_write':
H5Defl.c:378:42: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(H5F_OVERFLOW_HSIZET2OFFT(efl->slot[u].offset + skip))
                                          ^
H5Fprivate.h:346:16: note: in definition of macro 'H5F_OVERFLOW_HSIZET2OFFT'
     ((hsize_t)(X)>=(hsize_t)((hsize_t)1<<(8*sizeof(off_t)-1)))
                ^
In file included from H5Defl.c:31:0:
H5Defl.c:386:37: warning: conversion to 'long long unsigned int' from 'off_t' may change the sign of the result [-Wsign-conversion]
  if(HDlseek(fd, (off_t)(efl->slot[u].offset + skip), SEEK_SET) < 0)
                                     ^
H5private.h:1000:43: note: in definition of macro 'HDlseek'
         #define HDlseek(F,O,W)  lseek64(F,O,W)
                                           ^
H5Defl.c: In function 'H5D__efl_is_space_alloc':
H5Defl.c:201:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5D__efl_is_space_alloc(const H5O_storage_t H5_ATTR_UNUSED *storage)
 ^
  CC       H5Dfill.lo
H5Dfill.c: In function 'H5D__fill':
H5Dfill.c:234:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if((src_id = H5I_register(H5I_DATATYPE, H5T_copy(fill_type, H5T_COPY_ALL), FALSE)) < 0)
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dfill.c:37:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dfill.c:237:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if((dst_id = H5I_register(H5I_DATATYPE, H5T_copy(buf_type, H5T_COPY_ALL), FALSE)) < 0)
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dfill.c:37:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dfill.c:248:28: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
             H5S_sel_iter_t mem_iter;            /* Memory selection iteration info */
                            ^
H5Dfill.c: In function 'H5D__fill_init':
H5Dfill.c:407:13: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
             if(NULL == (fb_info->mem_type = H5T_copy(dset_type, H5T_COPY_REOPEN)))
             ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dfill.c:37:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
  CC       H5Dint.lo
H5Dint.c: In function 'H5D__init_type':
H5Dint.c:636:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if((dset->shared->type = H5T_copy(type, H5T_COPY_ALL)) == NULL)
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Dpkg.h:32,
                 from H5Dint.c:30:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Dint.c:659:30: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         dset->shared->type = (H5T_t *)type; /* (Cast away const OK - QAK) */
                              ^
H5Dint.c: In function 'H5D_oloc':
H5Dint.c:1529:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5D_oloc(H5D_t *dataset)
 ^
H5Dint.c: In function 'H5D_nameof':
H5Dint.c:1552:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5D_nameof(H5D_t *dataset)
 ^
H5Dint.c: In function 'H5D_typeof':
H5Dint.c:1576:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5D_typeof(const H5D_t *dset)
 ^
  CC       H5Dio.lo
H5Dio.c: In function 'H5D__pre_write':
H5Dio.c:330:15: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for(u = 0; u < ndims; u++) {
               ^
H5Dio.c: In function 'H5D__read':
H5Dio.c:377:21: warning: size of 'fm' is 2864 bytes [-Wlarger-than=]
     H5D_chunk_map_t fm;                 /* Chunk file<->memory mapping */
                     ^
H5Dio.c:478:66: warning: to be safe all intermediate pointers in cast from 'void **' to 'const void **' must be 'const' qualified [-Wcast-qual]
                 (unsigned)H5S_GET_EXTENT_NDIMS(file_space), buf, (const void **)&adj_buf, type_info.dst_type_size) < 0)
                                                                  ^
H5Dio.c: In function 'H5D__write':
H5Dio.c:593:21: warning: size of 'fm' is 2864 bytes [-Wlarger-than=]
     H5D_chunk_map_t fm;                 /* Chunk file<->memory mapping */
                     ^
H5Dio.c:732:66: warning: to be safe all intermediate pointers in cast from 'void **' to 'const void **' must be 'const' qualified [-Wcast-qual]
                 (unsigned)H5S_GET_EXTENT_NDIMS(file_space), buf, (const void **)&adj_buf, type_info.src_type_size) < 0)
                                                                  ^
  CC       H5Dlayout.lo
  CC       H5Dmpio.lo
  CC       H5Doh.lo
  CC       H5Dscatgath.lo
H5Dscatgath.c: In function 'H5D__scatter_file':
H5Dscatgath.c:100:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];             /* Array to store sequence offsets */
             ^
H5Dscatgath.c:105:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];              /* Array to store sequence lengths */
            ^
H5Dscatgath.c:164:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:166:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__gather_file':
H5Dscatgath.c:199:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];   /* Array to store sequence offsets */
             ^
H5Dscatgath.c:204:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];    /* Array to store sequence lengths */
            ^
H5Dscatgath.c:265:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:267:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__scatter_mem':
H5Dscatgath.c:295:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];          /* Array to store sequence offsets */
             ^
H5Dscatgath.c:297:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];           /* Array to store sequence lengths */
            ^
H5Dscatgath.c:350:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:352:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__gather_mem':
H5Dscatgath.c:382:13: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _off[H5D_IO_VECTOR_SIZE];          /* Array to store sequence offsets */
             ^
H5Dscatgath.c:384:12: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t _len[H5D_IO_VECTOR_SIZE];           /* Array to store sequence lengths */
            ^
H5Dscatgath.c:437:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:439:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5D__scatgath_read':
H5Dscatgath.c:463:20: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t mem_iter;            /*memory selection iteration info*/
                    ^
H5Dscatgath.c:465:20: warning: size of 'bkg_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t bkg_iter;            /*background iteration info*/
                    ^
H5Dscatgath.c:467:20: warning: size of 'file_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t file_iter;           /*file selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5D__scatgath_write':
H5Dscatgath.c:595:20: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t mem_iter;            /*memory selection iteration info*/
                    ^
H5Dscatgath.c:597:20: warning: size of 'bkg_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t bkg_iter;            /*background iteration info*/
                    ^
H5Dscatgath.c:599:20: warning: size of 'file_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t file_iter;           /*file selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5D__compound_opt_read':
H5Dscatgath.c:747:16: warning: size of '_off' is 8192 bytes [-Wlarger-than=]
     hsize_t    _off[H5D_IO_VECTOR_SIZE];        /* Array to store sequence offsets */
                ^
H5Dscatgath.c:749:16: warning: size of '_len' is 8192 bytes [-Wlarger-than=]
     size_t     _len[H5D_IO_VECTOR_SIZE];        /* Array to store sequence lengths */
                ^
H5Dscatgath.c:831:13: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         len = H5FL_SEQ_FREE(size_t, len);
             ^
H5Dscatgath.c:833:13: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         off = H5FL_SEQ_FREE(hsize_t, off);
             ^
H5Dscatgath.c: In function 'H5Dscatter':
H5Dscatgath.c:926:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5Dgather':
H5Dscatgath.c:1026:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info*/
                    ^
H5Dscatgath.c: In function 'H5D__gather_file':
H5Dscatgath.c:194:1: warning: stack usage is 16800 bytes [-Wstack-usage=]
 H5D__gather_file(const H5D_io_info_t *_io_info,
 ^
H5Dscatgath.c:270:1: warning: the frame size of 16712 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* H5D__gather_file() */
 ^
H5Dscatgath.c: In function 'H5D__gather_mem.isra.0':
H5Dscatgath.c:376:1: warning: stack usage is 16576 bytes [-Wstack-usage=]
 H5D__gather_mem(const void *_buf, const H5S_t *space,
 ^
H5Dscatgath.c:442:1: warning: the frame size of 16488 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* H5D__gather_mem() */
 ^
H5Dscatgath.c: In function 'H5D__scatter_mem':
H5Dscatgath.c:289:1: warning: stack usage is 16576 bytes [-Wstack-usage=]
 H5D__scatter_mem (const void *_tscat_buf, const H5S_t *space,
 ^
H5Dscatgath.c:355:1: warning: the frame size of 16480 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* H5D__scatter_mem() */
 ^
H5Dscatgath.c: In function 'H5D__scatgath_read':
H5Dscatgath.c:458:1: warning: stack usage is 23392 bytes [-Wstack-usage=]
 H5D__scatgath_read(const H5D_io_info_t *io_info, const H5D_type_info_t *type_info,
 ^
H5Dscatgath.c:574:1: warning: the frame size of 23304 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end H5D__scatgath_read() */
 ^
H5Dscatgath.c: In function 'H5D__scatgath_write':
H5Dscatgath.c:590:1: warning: stack usage is 23600 bytes [-Wstack-usage=]
 H5D__scatgath_write(const H5D_io_info_t *io_info, const H5D_type_info_t *type_info,
 ^
H5Dscatgath.c:705:1: warning: the frame size of 23512 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end H5D__scatgath_write() */
 ^
  CC       H5Dselect.lo
H5Dselect.c: In function 'H5D__select_io':
H5Dselect.c:89:20: warning: size of 'mem_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t mem_iter;    /* Memory selection iteration info */
                    ^
H5Dselect.c:91:20: warning: size of 'file_iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t file_iter;   /* File selection iteration info */
                    ^
H5Dselect.c:93:13: warning: size of '_mem_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _mem_off[H5D_IO_VECTOR_SIZE];      /* Array to store sequence offsets in memory */
             ^
H5Dselect.c:95:13: warning: size of '_file_off' is 8192 bytes [-Wlarger-than=]
     hsize_t _file_off[H5D_IO_VECTOR_SIZE];     /* Array to store sequence offsets in the file */
             ^
H5Dselect.c:97:12: warning: size of '_mem_len' is 8192 bytes [-Wlarger-than=]
     size_t _mem_len[H5D_IO_VECTOR_SIZE];       /* Array to store sequence lengths in memory */
            ^
H5Dselect.c:99:12: warning: size of '_file_len' is 8192 bytes [-Wlarger-than=]
     size_t _file_len[H5D_IO_VECTOR_SIZE];      /* Array to store sequence lengths in the file */
            ^
H5Dselect.c:242:18: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         file_len = H5FL_SEQ_FREE(size_t, file_len);
                  ^
H5Dselect.c:244:18: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         file_off = H5FL_SEQ_FREE(hsize_t, file_off);
                  ^
H5Dselect.c:246:17: warning: request for implicit conversion from 'void *' to 'size_t *' not permitted in C++ [-Wc++-compat]
         mem_len = H5FL_SEQ_FREE(size_t, mem_len);
                 ^
H5Dselect.c:248:17: warning: request for implicit conversion from 'void *' to 'hsize_t *' not permitted in C++ [-Wc++-compat]
         mem_off = H5FL_SEQ_FREE(hsize_t, mem_off);
                 ^
H5Dselect.c:86:1: warning: stack usage is 37504 bytes [-Wstack-usage=]
 H5D__select_io(const H5D_io_info_t *io_info, size_t elmt_size,
 ^
H5Dselect.c:251:1: warning: the frame size of 37416 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* end H5D__select_io() */
 ^
  CC       H5Dtest.lo
  CC       H5E.lo
H5E.c: In function 'H5Epush2':
H5E.c:1391:5: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
     if(HDvasprintf(&tmp, fmt, ap) < 0)
     ^
  CC       H5Edeprec.lo
  CC       H5Eint.lo
H5Eint.c: In function 'H5E_printf_stack':
H5Eint.c:739:5: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
     if(HDvasprintf(&tmp, fmt, ap) < 0)
     ^
H5Eint.c: In function 'H5E_clear_entries':
H5Eint.c:905:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             H5MM_xfree((void *)error->func_name);        /* Casting away const OK - QAK */
                        ^
H5Eint.c:907:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             H5MM_xfree((void *)error->file_name);        /* Casting away const OK - QAK */
                        ^
H5Eint.c:909:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             H5MM_xfree((void *)error->desc);     /* Casting away const OK - QAK */
                        ^
H5Eint.c: In function 'H5E_walk':
H5Eint.c:574:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int)(estack->nused - 1); i >= 0 && status >= 0; i--) {
                                                     ^
H5Eint.c:604:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int)(estack->nused - 1); i >= 0 && status >= 0; i--)
                                                     ^
  CC       H5F.lo
  CC       H5Fint.lo
H5Fint.c: In function 'H5F_build_actual_name':
H5Fint.c:1583:18: warning: size of 'realname' is 4096 bytes [-Wlarger-than=]
             char realname[PATH_MAX];    /* Fully resolved path name of file */
                  ^
  CC       H5Faccum.lo
  CC       H5Fcwfs.lo
  CC       H5Fdbg.lo
H5Fdbg.c: In function 'H5F_debug':
H5Fdbg.c:126:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5G__ent_debug(f->shared->sblock->root_ent, stream, indent + 3, MAX(0, fwidth - 3), NULL);
             ^
H5Fdbg.c:141:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5G__ent_debug(&root_ent, stream, indent + 3, MAX(0, fwidth - 3), NULL);
             ^
  CC       H5Fefc.lo
H5Fefc.c: In function 'H5F_efc_max_nfiles':
H5Fefc.c:396:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_efc_max_nfiles(H5F_efc_t *efc)
 ^
  CC       H5Ffake.lo
  CC       H5Fio.lo
  CC       H5Fmount.lo
H5Fmount.c: In function 'H5F_is_mount':
H5Fmount.c:440:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_is_mount(const H5F_t *file)
 ^
  CC       H5Fmpi.lo
  CC       H5Fquery.lo
H5Fquery.c: In function 'H5F_get_intent':
H5Fquery.c:94:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_intent(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_open_name':
H5Fquery.c:119:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_open_name(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_actual_name':
H5Fquery.c:145:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_actual_name(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_extpath':
H5Fquery.c:171:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_extpath(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_shared':
H5Fquery.c:195:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_shared(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_same_shared':
H5Fquery.c:218:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_same_shared(const H5F_t *f1, const H5F_t *f2)
 ^
H5Fquery.c: In function 'H5F_get_nopen_objs':
H5Fquery.c:244:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_nopen_objs(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_file_id':
H5Fquery.c:267:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_file_id(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_parent':
H5Fquery.c:290:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_parent(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_nmounts':
H5Fquery.c:313:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_nmounts(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_fcpl':
H5Fquery.c:340:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_fcpl(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sizeof_addr':
H5Fquery.c:367:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sizeof_addr(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sizeof_size':
H5Fquery.c:394:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sizeof_size(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_sohm_addr':
H5Fquery.c:418:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_sohm_addr(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_sohm_vers':
H5Fquery.c:442:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_sohm_vers(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_sohm_nindexes':
H5Fquery.c:466:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_sohm_nindexes(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sym_leaf_k':
H5Fquery.c:497:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sym_leaf_k(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_Kvalue':
H5Fquery.c:529:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_Kvalue(const H5F_t *f, const H5B_class_t *type)
 ^
H5Fquery.c: In function 'H5F_get_nrefs':
H5Fquery.c:555:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_nrefs(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_rdcc_nslots':
H5Fquery.c:586:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_rdcc_nslots(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_rdcc_nbytes':
H5Fquery.c:617:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_rdcc_nbytes(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_rdcc_w0':
H5Fquery.c:648:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_rdcc_w0(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_base_addr':
H5Fquery.c:675:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_base_addr(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_grp_btree_shared':
H5Fquery.c:707:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_grp_btree_shared(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_sieve_buf_size':
H5Fquery.c:738:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_sieve_buf_size(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_gc_ref':
H5Fquery.c:769:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_gc_ref(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_use_latest_format':
H5Fquery.c:798:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_use_latest_format(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_get_fc_degree':
H5Fquery.c:826:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_fc_degree(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_store_msg_crt_idx':
H5Fquery.c:854:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_store_msg_crt_idx(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_has_feature':
H5Fquery.c:881:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_has_feature(const H5F_t *f, unsigned feature)
 ^
H5Fquery.c: In function 'H5F_get_driver_id':
H5Fquery.c:908:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_get_driver_id(const H5F_t *f)
 ^
H5Fquery.c: In function 'H5F_is_tmp_addr':
H5Fquery.c:1037:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_is_tmp_addr(const H5F_t *f, haddr_t addr)
 ^
H5Fquery.c: In function 'H5F_use_tmp_space':
H5Fquery.c:1065:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5F_use_tmp_space(const H5F_t *f)
 ^
  CC       H5Fsfile.lo
H5Fsfile.c: In function 'H5F_sfile_assert_num':
H5Fsfile.c:57:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5F_sfile_assert_num(unsigned n)
 ^
  CC       H5Fsuper.lo
  CC       H5Fsuper_cache.lo
H5Fsuper_cache.c: In function 'H5F_sblock_load':
H5Fsuper_cache.c:282:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->base_addr/*out*/);
                            ^
H5Fsuper_cache.c:283:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->ext_addr/*out*/);
                            ^
H5Fsuper_cache.c:284:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &stored_eoa/*out*/);
                            ^
H5Fsuper_cache.c:285:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->driver_addr/*out*/);
                            ^
H5Fsuper_cache.c:293:30: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         if(H5G_ent_decode(f, (const uint8_t **)&p, sblock->root_ent) < 0)
                              ^
H5Fsuper_cache.c:414:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->base_addr/*out*/);
                            ^
H5Fsuper_cache.c:415:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->ext_addr/*out*/);
                            ^
H5Fsuper_cache.c:416:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &stored_eoa/*out*/);
                            ^
H5Fsuper_cache.c:417:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&p, &sblock->root_addr/*out*/);
                            ^
  CC       H5Ftest.lo
  CC       H5FD.lo
H5FD.c: In function 'H5FD_get_base_addr':
H5FD.c:2053:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5FD_get_base_addr(const H5FD_t *file)
 ^
  CC       H5FDcore.lo
  CC       H5FDdirect.lo
In file included from H5FDdirect.c:32:0:
H5private.h:1835:15: warning: 'H5_interface_initialize_g' defined but not used [-Wunused-variable]
 static int    H5_interface_initialize_g = 0;
               ^
H5FDdirect.c:26:33: warning: 'H5FD_direct_init_interface' declared 'static' but never defined [-Wunused-function]
 #define H5_INTERFACE_INIT_FUNC  H5FD_direct_init_interface
                                 ^
H5private.h:1836:18: note: in expansion of macro 'H5_INTERFACE_INIT_FUNC'
 static herr_t    H5_INTERFACE_INIT_FUNC(void);
                  ^
  CC       H5FDfamily.lo
H5FDfamily.c: In function 'H5FD_family_open':
H5FDfamily.c:649:11: warning: size of 'memb_name' is 4096 bytes [-Wlarger-than=]
     char  memb_name[4096], temp[4096];
           ^
H5FDfamily.c:649:28: warning: size of 'temp' is 4096 bytes [-Wlarger-than=]
     char  memb_name[4096], temp[4096];
                            ^
H5FDfamily.c:711:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(memb_name, sizeof(memb_name), name, 0);
     ^
H5FDfamily.c:711:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c:712:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
     HDsnprintf(temp, sizeof(temp), name, 1);
     ^
H5FDfamily.c:712:5: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c:718:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
         HDsnprintf(memb_name, sizeof(memb_name), name, file->nmembs);
         ^
H5FDfamily.c:718:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c: In function 'H5FD_family_cmp':
H5FDfamily.c:870:1: warning: label 'done' defined but not used [-Wunused-label]
 done:
 ^
H5FDfamily.c: In function 'H5FD_family_set_eoa':
H5FDfamily.c:970:11: warning: size of 'memb_name' is 4096 bytes [-Wlarger-than=]
     char  memb_name[4096];
           ^
H5FDfamily.c:993:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
             HDsnprintf(memb_name, sizeof(memb_name), file->name, u);
             ^
H5FDfamily.c:993:13: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
H5FDfamily.c: In function 'H5FD_family_open':
H5FDfamily.c:644:1: warning: stack usage is 8352 bytes [-Wstack-usage=]
 H5FD_family_open(const char *name, unsigned flags, hid_t fapl_id,
 ^
  CC       H5FDint.lo
  CC       H5FDlog.lo
H5FDlog.c: In function 'H5Pset_fapl_log':
H5FDlog.c:326:18: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     fa.logfile = (char *)logfile;
                  ^
H5FDlog.c: In function 'H5FD_log_open':
H5FDlog.c:616:95: warning: 'stat_timeval_diff.tv_usec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Stat took: (%f s)\n", (double)stat_timeval_diff.tv_sec + ((double)stat_timeval_diff.tv_usec / (double)1000000.0f));
                                                                                               ^
H5FDlog.c:616:59: warning: 'stat_timeval_diff.tv_sec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Stat took: (%f s)\n", (double)stat_timeval_diff.tv_sec + ((double)stat_timeval_diff.tv_usec / (double)1000000.0f));
                                                           ^
H5FDlog.c:614:95: warning: 'open_timeval_diff.tv_usec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Open took: (%f s)\n", (double)open_timeval_diff.tv_sec + ((double)open_timeval_diff.tv_usec / (double)1000000.0f));
                                                                                               ^
H5FDlog.c:614:59: warning: 'open_timeval_diff.tv_sec' may be used uninitialized in this function [-Wmaybe-uninitialized]
             HDfprintf(file->logfp, "Open took: (%f s)\n", (double)open_timeval_diff.tv_sec + ((double)open_timeval_diff.tv_usec / (double)1000000.0f));
                                                           ^
  CC       H5FDmpi.lo
  CC       H5FDmpio.lo
In file included from H5FDmpio.c:28:0:
H5private.h:1835:15: warning: 'H5_interface_initialize_g' defined but not used [-Wunused-variable]
 static int    H5_interface_initialize_g = 0;
               ^
H5FDmpio.c:25:33: warning: 'H5FD_mpio_init_interface' declared 'static' but never defined [-Wunused-function]
 #define H5_INTERFACE_INIT_FUNC  H5FD_mpio_init_interface
                                 ^
H5private.h:1836:18: note: in expansion of macro 'H5_INTERFACE_INIT_FUNC'
 static herr_t    H5_INTERFACE_INIT_FUNC(void);
                  ^
  CC       H5FDmulti.lo
H5FDmulti.c: In function 'H5FD_multi_read':
H5FDmulti.c:1622:55: warning: unused parameter 'dxpl_id' [-Wunused-parameter]
 H5FD_multi_read(H5FD_t *_file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr,
                                                       ^
H5FDmulti.c: In function 'H5FD_multi_write':
H5FDmulti.c:1673:56: warning: unused parameter 'dxpl_id' [-Wunused-parameter]
 H5FD_multi_write(H5FD_t *_file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr,
                                                        ^
H5FDmulti.c: In function 'compute_next':
H5FDmulti.c:52:16: warning: declaration of '_unmapped' shadows a previous local [-Wshadow]
     H5FD_mem_t _unmapped, LOOPVAR;           \
                ^
H5FDmulti.c:1847:2: note: in expansion of macro 'UNIQUE_MEMBERS'
  UNIQUE_MEMBERS(file->fa.memb_map, mt2) {
  ^
H5FDmulti.c:52:16: warning: shadowed declaration is here [-Wshadow]
     H5FD_mem_t _unmapped, LOOPVAR;           \
                ^
H5FDmulti.c:1846:5: note: in expansion of macro 'UNIQUE_MEMBERS'
     UNIQUE_MEMBERS(file->fa.memb_map, mt1) {
     ^
H5FDmulti.c:53:13: warning: declaration of '_seen' shadows a previous local [-Wshadow]
     hbool_t _seen[H5FD_MEM_NTYPES];           \
             ^
H5FDmulti.c:1847:2: note: in expansion of macro 'UNIQUE_MEMBERS'
  UNIQUE_MEMBERS(file->fa.memb_map, mt2) {
  ^
H5FDmulti.c:53:13: warning: shadowed declaration is here [-Wshadow]
     hbool_t _seen[H5FD_MEM_NTYPES];           \
             ^
H5FDmulti.c:1846:5: note: in expansion of macro 'UNIQUE_MEMBERS'
     UNIQUE_MEMBERS(file->fa.memb_map, mt1) {
     ^
H5FDmulti.c: In function 'open_members':
H5FDmulti.c:1896:2: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
  sprintf(tmp, file->fa.memb_name[mt], file->name);
  ^
  CC       H5FDsec2.lo
  CC       H5FDspace.lo
  CC       H5FDstdio.lo
  CC       H5FL.lo
  CC       H5FO.lo
  CC       H5FS.lo
H5FS.c: In function 'H5FS_new':
H5FS.c:540:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     fspace->nclasses = nclasses;
     ^
In file included from H5FS.c:38:0:
H5FSpkg.h:79:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + H5F_SIZEOF_SIZE(f) /* Allocated size of serialized free space sections */ \
     ^
H5FS.c:566:24: note: in expansion of macro 'H5FS_HEADER_SIZE'
     fspace->hdr_size = H5FS_HEADER_SIZE(f);
                        ^
H5FS.c: In function 'H5FS_size':
H5FS.c:601:24: warning: unused parameter 'f' [-Wunused-parameter]
 H5FS_size(const H5F_t *f, const H5FS_t *fspace, hsize_t *meta_size)
                        ^
H5FS.c: In function 'H5FS_sinfo_dest':
H5FS.c:892:17: warning: request for implicit conversion from 'void *' to 'struct H5FS_bin_t *' not permitted in C++ [-Wc++-compat]
     sinfo->bins = H5FL_SEQ_FREE(H5FS_bin_t, sinfo->bins);
                 ^
  CC       H5FScache.lo
H5FScache.c: In function 'H5FS_cache_sinfo_load':
H5FScache.c:618:17: warning: variable 'old_tot_space' set but not used [-Wunused-but-set-variable]
         hsize_t old_tot_space;          /* Total space managed from header */
                 ^
H5FScache.c:617:17: warning: variable 'old_ghost_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_ghost_sect_count;   /* Total ghost section count from header */
                 ^
H5FScache.c:616:17: warning: variable 'old_serial_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_serial_sect_count;  /* Total serializable section count from header */
                 ^
H5FScache.c:615:17: warning: variable 'old_tot_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_tot_sect_count;     /* Total section count from header */
                 ^
  CC       H5FSdbg.lo
H5FSdbg.c: In function 'H5FS_sects_debug':
H5FSdbg.c:288:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(H5HF_sects_debug(f, dxpl_id, client_addr, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
             ^
  CC       H5FSsection.lo
H5FSsection.c: In function 'H5FS_sinfo_new':
H5FSsection.c:147:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     sinfo->sect_prefix_size = (size_t)H5FS_SINFO_PREFIX_SIZE(f);
                               ^
H5FSsection.c:178:25: warning: request for implicit conversion from 'void *' to 'struct H5FS_bin_t *' not permitted in C++ [-Wc++-compat]
             sinfo->bins = H5FL_SEQ_FREE(H5FS_bin_t, sinfo->bins);
                         ^
H5FSsection.c: In function 'H5FS_sect_try_shrink_eoa':
H5FSsection.c:2338:5: warning: passing argument 1 of 'H5FS_sinfo_lock' discards 'const' qualifier from pointer target type [enabled by default]
     if(H5FS_sinfo_lock(f, dxpl_id, fspace, H5AC_WRITE) < 0)
     ^
H5FSsection.c:207:1: note: expected 'struct H5F_t *' but argument is of type 'const struct H5F_t *'
 H5FS_sinfo_lock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, H5AC_protect_t accmode)
 ^
H5FSsection.c:2338:5: warning: passing argument 3 of 'H5FS_sinfo_lock' discards 'const' qualifier from pointer target type [enabled by default]
     if(H5FS_sinfo_lock(f, dxpl_id, fspace, H5AC_WRITE) < 0)
     ^
H5FSsection.c:207:1: note: expected 'struct H5FS_t *' but argument is of type 'const struct H5FS_t *'
 H5FS_sinfo_lock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, H5AC_protect_t accmode)
 ^
H5FSsection.c:2362:7: warning: passing argument 1 of 'H5FS_sect_remove_real' discards 'const' qualifier from pointer target type [enabled by default]
       if(H5FS_sect_remove_real(fspace, tmp_sect) < 0)
       ^
H5FSsection.c:859:1: note: expected 'struct H5FS_t *' but argument is of type 'const struct H5FS_t *'
 H5FS_sect_remove_real(H5FS_t *fspace, H5FS_section_info_t *sect)
 ^
H5FSsection.c:2376:5: warning: passing argument 1 of 'H5FS_sinfo_unlock' discards 'const' qualifier from pointer target type [enabled by default]
     if(sinfo_valid && H5FS_sinfo_unlock(f, dxpl_id, fspace, section_removed) < 0)
     ^
H5FSsection.c:313:1: note: expected 'struct H5F_t *' but argument is of type 'const struct H5F_t *'
 H5FS_sinfo_unlock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, hbool_t modified)
 ^
H5FSsection.c:2376:5: warning: passing argument 3 of 'H5FS_sinfo_unlock' discards 'const' qualifier from pointer target type [enabled by default]
     if(sinfo_valid && H5FS_sinfo_unlock(f, dxpl_id, fspace, section_removed) < 0)
     ^
H5FSsection.c:313:1: note: expected 'struct H5FS_t *' but argument is of type 'const struct H5FS_t *'
 H5FS_sinfo_unlock(H5F_t *f, hid_t dxpl_id, H5FS_t *fspace, hbool_t modified)
 ^
  CC       H5FSstat.lo
H5FSstat.c: In function 'H5FS_stat_info':
H5FSstat.c:99:23: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     stats->hdr_size = (size_t)H5FS_HEADER_SIZE(f);
                       ^
  CC       H5FStest.lo
H5FStest.c: In function 'H5FS_cmp_cparam_test':
H5FStest.c:118:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5FS_cmp_cparam_test(const H5FS_create_t *cparam1, const H5FS_create_t *cparam2)
 ^
  CC       H5G.lo
  CC       H5Gbtree2.lo
H5Gbtree2.c: In function 'H5G_dense_btree2_name_compare':
H5Gbtree2.c:266:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;                  /* Status from fractal heap 'op' routine */
                ^
  CC       H5Gcache.lo
In file included from H5Gpkg.h:32:0,
                 from H5Gcache.c:39:
H5Gcache.c: In function 'H5G_node_load':
H5Gprivate.h:54:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     4 +    /*reserved    */    \
       ^
H5Gpkg.h:58:34: note: in expansion of macro 'H5G_SIZEOF_ENTRY'
     + ((2 * H5F_SYM_LEAF_K(f)) * H5G_SIZEOF_ENTRY(f))                         \
                                  ^
H5Gcache.c:148:22: note: in expansion of macro 'H5G_NODE_SIZE'
     sym->node_size = H5G_NODE_SIZE(f);
                      ^
H5Gcache.c:123:60: warning: unused parameter 'udata' [-Wunused-parameter]
 H5G_node_load(H5F_t *f, hid_t dxpl_id, haddr_t addr, void *udata)
                                                            ^
  CC       H5Gcompact.lo
  CC       H5Gdense.lo
H5Gdense.c: In function 'H5G__dense_create':
H5Gdense.c:325:30: warning: conversion to 'uint32_t' from 'size_t' may alter its value [-Wconversion]
     bt2_cparam.rrec_size = 4 +          /* Name's hash value */
                              ^
H5Gdense.c:345:34: warning: conversion to 'uint32_t' from 'size_t' may alter its value [-Wconversion]
         bt2_cparam.rrec_size = 8 +      /* Creation order value */
                                  ^
  CC       H5Gdeprec.lo
H5Gdeprec.c: In function 'H5G_map_obj_type':
H5Gdeprec.c:169:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5G_map_obj_type(H5O_type_t obj_type)
 ^
  CC       H5Gent.lo
H5Gent.c: In function 'H5G__ent_copy':
H5Gent.c:341:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         H5G__ent_reset((H5G_entry_t *)src);
                        ^
H5Gent.c: In function 'H5G__ent_debug':
H5Gent.c:553:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     nested_fwidth = MAX(0, fwidth - 3);
     ^
  CC       H5Gint.lo
H5Gint.c: In function 'H5G_oloc':
H5Gint.c:578:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5G_oloc(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_nameof':
H5Gint.c:601:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5G_nameof(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_fileof':
H5Gint.c:625:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5G_fileof(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_get_shared_count':
H5Gint.c:649:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5G_get_shared_count(H5G_t *grp)
 ^
H5Gint.c: In function 'H5G_mounted':
H5Gint.c:701:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5G_mounted(H5G_t *grp)
 ^
  CC       H5Glink.lo
  CC       H5Gloc.lo
H5Gloc.c: In function 'H5G__loc_insert':
H5Gloc.c:580:16: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     lnk.name = (char *)name;
                ^
H5Gloc.c: In function 'H5G_loc_set_comment_cb':
H5Gloc.c:793:14: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
  comment.s = (char *)udata->comment;
              ^
  CC       H5Gname.lo
H5Gname.c: In function 'H5G_name_copy':
H5Gname.c:537:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         H5G_name_reset((H5G_name_t *)src);
                        ^
  CC       H5Gnode.lo
H5Gnode.c: In function 'H5G__node_free':
H5Gnode.c:299:20: warning: request for implicit conversion from 'void *' to 'struct H5G_entry_t *' not permitted in C++ [-Wc++-compat]
         sym->entry = H5FL_SEQ_FREE(H5G_entry_t, sym->entry);
                    ^
In file included from H5Gpkg.h:32:0,
                 from H5Gnode.c:45:
H5Gnode.c: In function 'H5G_node_create':
H5Gprivate.h:54:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     4 +    /*reserved    */    \
       ^
H5Gpkg.h:58:34: note: in expansion of macro 'H5G_SIZEOF_ENTRY'
     + ((2 * H5F_SYM_LEAF_K(f)) * H5G_SIZEOF_ENTRY(f))                         \
                                  ^
H5Gnode.c:344:22: note: in expansion of macro 'H5G_NODE_SIZE'
     sym->node_size = H5G_NODE_SIZE(f);
                      ^
H5Gnode.c:367:28: warning: request for implicit conversion from 'void *' to 'struct H5G_entry_t *' not permitted in C++ [-Wc++-compat]
                 sym->entry = H5FL_SEQ_FREE(H5G_entry_t, sym->entry);
                            ^
H5Gnode.c: In function 'H5G_node_insert':
H5Gnode.c:718:6: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
      idx -= H5F_SYM_LEAF_K(f);
      ^
H5Gnode.c:718:10: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
      idx -= H5F_SYM_LEAF_K(f);
          ^
H5Gnode.c: In function 'H5G_node_remove':
H5Gnode.c:792:21: warning: unused variable 'lt_key' [-Wunused-variable]
     H5G_node_key_t *lt_key = (H5G_node_key_t *)_lt_key;
                     ^
H5Gnode.c: In function 'H5G__node_copy':
H5Gnode.c:1294:28: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             grp_loc.oloc = (H5O_loc_t *)src_oloc;
                            ^
In file included from H5Gpkg.h:32:0,
                 from H5Gnode.c:45:
H5Gnode.c: In function 'H5G__node_iterate_size':
H5Gprivate.h:54:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     4 +    /*reserved    */    \
       ^
H5Gpkg.h:58:34: note: in expansion of macro 'H5G_SIZEOF_ENTRY'
     + ((2 * H5F_SYM_LEAF_K(f)) * H5G_SIZEOF_ENTRY(f))                         \
                                  ^
H5Gnode.c:1481:19: note: in expansion of macro 'H5G_NODE_SIZE'
     *stab_size += H5G_NODE_SIZE(f);
                   ^
H5Gnode.c: In function 'H5G_node_debug':
H5Gnode.c:1550:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         fwidth = MAX(0, fwidth - 3);
         ^
  CC       H5Gobj.lo
H5Gobj.c: In function 'H5G__obj_create_real':
H5Gobj.c:272:67: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5O_msg_create(oloc, H5O_LINFO_ID, 0, H5O_UPDATE_TIME, (void *)linfo, dxpl_id) < 0)
                                                                   ^
H5Gobj.c:277:73: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5O_msg_create(oloc, H5O_GINFO_ID, H5O_MSG_FLAG_CONSTANT, 0, (void *)ginfo, dxpl_id) < 0)
                                                                         ^
H5Gobj.c:283:77: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if(H5O_msg_create(oloc, H5O_PLINE_ID, H5O_MSG_FLAG_CONSTANT, 0, (void *)pline, dxpl_id) < 0)
                                                                             ^
H5Gobj.c: In function 'H5G_obj_stab_to_new_cb':
H5Gobj.c:433:51: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     if(H5G_obj_insert(udata->grp_oloc, lnk->name, (H5O_link_t *)lnk, FALSE,
                                                   ^
  CC       H5Goh.lo
  CC       H5Groot.lo
  CC       H5Gstab.lo
  CC       H5Gtest.lo
  CC       H5Gtraverse.lo
H5Gtraverse.c: In function 'H5G_traverse_real':
H5Gtraverse.c:743:52: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_GINFO_ID, (void *)ginfo) < 0)
                                                    ^
H5Gtraverse.c:747:52: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_LINFO_ID, (void *)linfo) < 0)
                                                    ^
H5Gtraverse.c:751:52: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_PLINE_ID, (void *)pline) < 0)
                                                    ^
  CC       H5HF.lo
In file included from H5HF.c:41:0:
H5HF.c: In function 'H5HF_op_write':
H5HF.c:130:14: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     HDmemcpy((void *)obj, op_data, obj_len);    /* Casting away const OK -QAK */
              ^
H5private.h:1033:47: note: in definition of macro 'HDmemcpy'
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5HF.c: In function 'H5HF_insert':
H5HF.c:375:49: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(H5HF_huge_insert(hdr, dxpl_id, size, (void *)obj, id) < 0)
                                                 ^
  CC       H5HFbtree2.lo
  CC       H5HFcache.lo
H5HFcache.c: In function 'H5HF_cache_hdr_flush':
H5HFcache.c:503:20: warning: conversion to 'uint8_t' from 'int' may alter its value [-Wconversion]
         heap_flags |= (hdr->huge_ids_wrapped ?  H5HF_HDR_FLAGS_HUGE_ID_WRAPPED : 0);
                    ^
H5HFcache.c:504:20: warning: conversion to 'uint8_t' from 'int' may alter its value [-Wconversion]
         heap_flags |= (hdr->checksum_dblocks ?  H5HF_HDR_FLAGS_CHECKSUM_DBLOCKS : 0);
                    ^
H5HFcache.c: In function 'H5HF_cache_iblock_load':
H5HFcache.c:708:25: warning: size of 'iblock_buf' is 4096 bytes [-Wlarger-than=]
     uint8_t             iblock_buf[H5HF_IBLOCK_BUF_SIZE]; /* Buffer for indirect block */
                         ^
In file included from H5HFcache.c:40:0:
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFcache.c:749:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFcache.c:749:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFcache.c: In function 'H5HF_cache_iblock_flush':
H5HFcache.c:906:17: warning: size of 'iblock_buf' is 4096 bytes [-Wlarger-than=]
     uint8_t     iblock_buf[H5HF_IBLOCK_BUF_SIZE]; /* Buffer for indirect block */
                 ^
In file included from H5HFcache.c:37:0:
H5HFcache.c: In function 'H5HF_cache_dblock_load':
H5HFcache.c:1349:18: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         HDmemset((uint8_t *)p - H5HF_SIZEOF_CHKSUM, 0, (size_t)H5HF_SIZEOF_CHKSUM);
                  ^
H5private.h:1039:39: note: in definition of macro 'HDmemset'
     #define HDmemset(X,C,Z)    memset(X,C,Z)
                                       ^
  CC       H5HFdbg.lo
H5HFdbg.c: In function 'H5HF_hdr_print':
H5HFdbg.c:259:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     H5HF_dtable_debug(&hdr->man_dtable, stream, indent + 3, MAX(0, fwidth - 3));
     ^
H5HFdbg.c:267:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       hdr->pline_root_direct_size);
                       ^
H5HFdbg.c:270:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       hdr->pline_root_direct_filter_mask);
                       ^
H5HFdbg.c:273:30: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                              indent + 3, MAX(0, fwidth - 3));
                              ^
H5HFdbg.c:283:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   hdr->root_iblock_flags);
                   ^
H5HFdbg.c:286:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   hdr->root_iblock);
                   ^
H5HFdbg.c: In function 'H5HF_dblock_debug_cb':
H5HFdbg.c:402:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   start, len);
   ^
In file included from H5HFdbg.c:40:0:
H5HFdbg.c: In function 'H5HF_dblock_debug':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFdbg.c:483:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     blk_prefix_size = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFdbg.c: In function 'H5HF_iblock_print':
H5HFdbg.c:622:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 temp_str);
                 ^
H5HFdbg.c:632:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->filt_ents[off].filter_mask);
                         ^
H5HFdbg.c:636:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->ents[off].addr);
                         ^
H5HFdbg.c:650:21: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     temp_str);
                     ^
H5HFdbg.c:657:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->ents[off].addr);
                         ^
H5HFdbg.c:663:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   "<none>");
                   ^
H5HFdbg.c:672:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   iblock->rc);
                   ^
H5HFdbg.c:677:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   iblock->parent);
                   ^
H5HFdbg.c: In function 'H5HF_sects_debug_cb':
H5HFdbg.c:791:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5FS_sect_debug(udata->fspace, _sect, udata->stream, udata->indent + 3, MAX(0, udata->fwidth - 3)) < 0)
     ^
  CC       H5HFdblock.lo
In file included from H5HFdblock.c:39:0:
H5HFdblock.c: In function 'H5HF_man_dblock_create':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFdblock.c:143:33: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     free_space = dblock->size - H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                                 ^
H5HFpkg.h:115:5: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFdblock.c:171:70: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     if(NULL == (sec_node = H5HF_sect_single_new((dblock->block_off + H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr)),
                                                                      ^
H5HFdblock.c: In function 'H5HF_man_dblock_new':
H5HFdblock.c:363:36: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     if((min_dblock_size - request) < H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr))
                                    ^
  CC       H5HFdtable.lo
H5HFdtable.c: In function 'H5HF_dtable_size_to_row':
H5HFdtable.c:241:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_dtable_size_to_row(const H5HF_dtable_t *dtable, size_t block_size)
 ^
H5HFdtable.c: In function 'H5HF_dtable_size_to_rows':
H5HFdtable.c:275:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_dtable_size_to_rows(const H5HF_dtable_t *dtable, hsize_t size)
 ^
H5HFdtable.c: In function 'H5HF_dtable_span_size':
H5HFdtable.c:306:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_dtable_span_size(const H5HF_dtable_t *dtable, unsigned start_row,
 ^
  CC       H5HFhdr.lo
In file included from H5HFhdr.c:36:0:
H5HFhdr.c: In function 'H5HF_hdr_finish_init_phase1':
H5HFhdr.c:226:45: warning: conversion to 'uint8_t' from 'unsigned int' may alter its value [-Wconversion]
     hdr->heap_len_size = MIN(hdr->man_dtable.max_dir_blk_off_size,
                                             ^
H5private.h:321:35: note: in definition of macro 'MIN'
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                   ^
H5HFhdr.c:227:32: warning: conversion to 'uint8_t' from 'unsigned int' may alter its value [-Wconversion]
             H5VM_limit_enc_size((uint64_t)hdr->max_man_size));
                                ^
H5private.h:321:41: note: in definition of macro 'MIN'
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                         ^
In file included from H5HFhdr.c:38:0:
H5HFhdr.c: In function 'H5HF_hdr_finish_init_phase2':
H5HFpkg.h:115:5: warning: conversion to 'hsize_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFhdr.c:264:21: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
                     H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                     ^
H5HFhdr.c: In function 'H5HF_hdr_create':
H5HFhdr.c:435:52: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         if(0 == (hdr->filter_len = H5O_msg_raw_size(hdr->f, H5O_PLINE_ID, FALSE, &(hdr->pline))))
                                                    ^
H5HFhdr.c:441:13: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
             + 4                                 /* Size of filter mask for filtered root direct block */
             ^
In file included from H5HFhdr.c:38:0:
H5HFpkg.h:105:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + H5HF_DTABLE_INFO_SIZE(h) /* Size of managed obj. doubling-table info */ \
     ^
H5HFhdr.c:446:26: note: in expansion of macro 'H5HF_HEADER_SIZE'
         hdr->heap_size = H5HF_HEADER_SIZE(hdr);
                          ^
H5HFhdr.c:468:21: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                     + hdr->sizeof_size; /* Size of de-filtered object in memory */
                     ^
H5HFhdr.c:472:21: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
                     + hdr->sizeof_size; /* Length of object */
                     ^
In file included from H5HFhdr.c:38:0:
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFhdr.c:494:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFhdr.c: In function 'H5HF_hdr_adj_free':
H5HFhdr.c:763:5: warning: conversion to 'long long unsigned int' from 'ssize_t' may change the sign of the result [-Wsign-conversion]
     hdr->total_man_free += amt;
     ^
H5HFhdr.c: In function 'H5HF_hdr_adjust_heap':
H5HFhdr.c:803:5: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
     hdr->total_man_free += extra_free;
     ^
H5HFhdr.c: In function 'H5HF_hdr_reverse_iter':
H5HFhdr.c:1245:9: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
         tmp_entry = curr_entry;
         ^
H5HFhdr.c:1280:13: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
             curr_entry = tmp_entry;
             ^
  CC       H5HFhuge.lo
H5HFhuge.c: In function 'H5HF_huge_bt2_create':
H5HFhuge.c:127:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of object */
                                    ^
H5HFhuge.c:134:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of object */
                                    ^
H5HFhuge.c:141:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of filtered object */
                                    ^
H5HFhuge.c:149:36: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             bt2_cparam.rrec_size = (size_t)(hdr->sizeof_addr    /* Address of object */
                                    ^
H5HFhuge.c: In function 'H5HF_huge_write':
H5HFhuge.c:805:23: warning: 'obj_size' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5F_block_write(hdr->f, H5FD_MEM_FHEAP_HUGE_OBJ, obj_addr, obj_size, dxpl_id, obj) < 0)
                       ^
  CC       H5HFiblock.lo
H5HFiblock.c: In function 'H5HF_iblock_unpin':
H5HFiblock.c:216:13: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
             iblock->hdr->root_iblock_flags &= ~(H5HF_ROOT_IBLOCK_PINNED);
             ^
In file included from H5HFiblock.c:39:0:
H5HFiblock.c: In function 'H5HF_man_iblock_root_double':
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFiblock.c:592:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFiblock.c:592:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFiblock.c:631:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         unsigned row = u / hdr->man_dtable.cparam.width;        /* Row for current entry */
                          ^
H5HFiblock.c: In function 'H5HF_man_iblock_root_halve':
H5HFiblock.c:733:19: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     new_nrows = 1 << (1 + H5VM_log2_gen((uint64_t)max_child_row));
                   ^
In file included from H5HFiblock.c:39:0:
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFiblock.c:761:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFiblock.c:761:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFiblock.c: In function 'H5HF_man_iblock_create':
H5HFpkg.h:121:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
         ((h)->sizeof_addr + (h)->sizeof_size + 4) : /* Size of entries for filtered direct blocks */ \
                                              ^
H5HFpkg.h:133:81: note: in expansion of macro 'H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE'
     + (MIN(r, (h)->man_dtable.max_direct_rows) * (h)->man_dtable.cparam.width * H5HF_MAN_INDIRECT_CHILD_DIR_ENTRY_SIZE(h)) /* Size of entries for direct blocks */ \
                                                                                 ^
H5HFiblock.c:1030:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFpkg.h:132:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFiblock.c:1030:20: note: in expansion of macro 'H5HF_MAN_INDIRECT_SIZE'
     iblock->size = H5HF_MAN_INDIRECT_SIZE(hdr, iblock->nrows);
                    ^
H5HFiblock.c: In function 'H5HF_man_iblock_unprotect':
H5HFiblock.c:1283:13: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]
             iblock->hdr->root_iblock_flags &= ~(H5HF_ROOT_IBLOCK_PROTECTED);
             ^
H5HFiblock.c: In function 'H5HF_man_iblock_dest':
H5HFiblock.c:1725:22: warning: request for implicit conversion from 'void *' to 'struct H5HF_indirect_ent_t *' not permitted in C++ [-Wc++-compat]
         iblock->ents = H5FL_SEQ_FREE(H5HF_indirect_ent_t, iblock->ents);
                      ^
H5HFiblock.c:1727:27: warning: request for implicit conversion from 'void *' to 'struct H5HF_indirect_filt_ent_t *' not permitted in C++ [-Wc++-compat]
         iblock->filt_ents = H5FL_SEQ_FREE(H5HF_indirect_filt_ent_t, iblock->filt_ents);
                           ^
H5HFiblock.c:1729:31: warning: request for implicit conversion from 'void *' to 'struct H5HF_indirect_t **' not permitted in C++ [-Wc++-compat]
         iblock->child_iblocks = H5FL_SEQ_FREE(H5HF_indirect_ptr_t, iblock->child_iblocks);
                               ^
  CC       H5HFiter.lo
H5HFiter.c: In function 'H5HF_man_iter_ready':
H5HFiter.c:653:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_man_iter_ready(H5HF_block_iter_t *biter)
 ^
  CC       H5HFman.lo
H5HFman.c: In function 'H5HF_man_write':
H5HFman.c:432:58: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     if(H5HF_man_op_real(hdr, dxpl_id, id, H5HF_op_write, (void *)obj, H5HF_OP_MODIFY) < 0)
                                                          ^
  CC       H5HFsection.lo
H5HFsection.c: In function 'H5HF_sect_single_dblock_info':
H5HFsection.c:651:53: warning: unused parameter 'dxpl_id' [-Wunused-parameter]
 H5HF_sect_single_dblock_info(H5HF_hdr_t *hdr, hid_t dxpl_id,
                                                     ^
In file included from H5HFsection.c:35:0:
H5HFsection.c: In function 'H5HF_sect_single_full_dblock':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:774:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFsection.c: In function 'H5HF_sect_single_can_shrink':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:1034:27: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
         dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                           ^
H5HFsection.c: In function 'H5HF_sect_single_valid':
H5HFsection.c:1200:78: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             status = H5HF_sect_single_dblock_info(iblock->hdr, H5AC_dxpl_id, (H5HF_free_section_t *)sect, &dblock_addr, &dblock_size);
                                                                              ^
In file included from H5HFsection.c:35:0:
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:1209:31: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
             dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(iblock->hdr);
                               ^
H5HFsection.c:1192:20: warning: variable 'status' set but not used [-Wunused-but-set-variable]
             herr_t status;              /* Generic status value */
                    ^
H5HFsection.c:1190:20: warning: variable 'dblock_overhead' set but not used [-Wunused-but-set-variable]
             size_t dblock_overhead;     /* Direct block's overhead */
                    ^
H5HFsection.c: In function 'H5HF_sect_row_init_cls':
H5HFsection.c:48:9: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         + 2             /* # of entries */                                    \
         ^
H5HFsection.c:1569:28: note: in expansion of macro 'H5HF_SECT_INDIRECT_SERIAL_SIZE'
         cls->serial_size = H5HF_SECT_INDIRECT_SERIAL_SIZE(hdr);
                            ^
H5HFsection.c: In function 'H5HF_sect_row_valid':
H5HFsection.c:2000:14: warning: variable 'indir_idx' set but not used [-Wunused-but-set-variable]
     unsigned indir_idx;         /* Index of row in underlying indirect section's row array */
              ^
H5HFsection.c: In function 'H5HF_sect_row_debug':
H5HFsection.c:2082:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         H5HF_sect_indirect_debug(sect->u.row.under, stream, indent + 3, MAX(0, fwidth - 3));
         ^
H5HFsection.c: In function 'H5HF_sect_indirect_init_cls':
H5HFsection.c:48:9: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         + 2             /* # of entries */                                    \
         ^
H5HFsection.c:2185:24: note: in expansion of macro 'H5HF_SECT_INDIRECT_SERIAL_SIZE'
     cls->serial_size = H5HF_SECT_INDIRECT_SERIAL_SIZE(hdr);
                        ^
In file included from H5HFsection.c:35:0:
H5HFsection.c: In function 'H5HF_sect_indirect_init_rows':
H5HFpkg.h:115:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     + (h)->heap_off_size        /* Offset of the block in the heap */         \
     ^
H5HFsection.c:2478:23: note: in expansion of macro 'H5HF_MAN_ABS_DIRECT_OVERHEAD'
     dblock_overhead = H5HF_MAN_ABS_DIRECT_OVERHEAD(hdr);
                       ^
H5HFsection.c: In function 'H5HF_sect_indirect_valid':
H5HFsection.c:4107:44: warning: variable 'tmp_row_sect2' set but not used [-Wunused-but-set-variable]
                 const H5HF_free_section_t *tmp_row_sect2;    /* Pointer to row section */
                                            ^
H5HFsection.c:4099:40: warning: variable 'tmp_row_sect' set but not used [-Wunused-but-set-variable]
             const H5HF_free_section_t *tmp_row_sect;    /* Pointer to row section */
                                        ^
H5HFsection.c:4134:44: warning: variable 'tmp_child_sect2' set but not used [-Wunused-but-set-variable]
                 const H5HF_free_section_t *tmp_child_sect2;    /* Pointer to child indirect section */
                                            ^
H5HFsection.c: In function 'H5HF_sect_indirect_top':
H5HFsection.c:2134:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_indirect_top(H5HF_free_section_t *sect)
 ^
H5HFsection.c: In function 'H5HF_sect_row_can_merge':
H5HFsection.c:1716:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_row_can_merge(const H5FS_section_info_t *_sect1,
 ^
H5HFsection.c: In function 'H5HF_sect_indirect_is_first.isra.1':
H5HFsection.c:3389:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_indirect_is_first(H5HF_free_section_t *sect)
 ^
H5HFsection.c: In function 'H5HF_sect_indirect_valid.isra.3':
H5HFsection.c:4060:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_indirect_valid(const H5HF_hdr_t *hdr, const H5HF_free_section_t *sect)
 ^
H5HFsection.c: In function 'H5HF_sect_row_valid':
H5HFsection.c:1994:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5HF_sect_row_valid(const H5FS_section_class_t *cls, const H5FS_section_info_t *_sect)
 ^
H5HFsection.c: In function 'H5HF_sect_row_get_iblock':
H5HFsection.c:1514:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_sect_row_get_iblock(H5HF_free_section_t *sect)
 ^
  CC       H5HFspace.lo
  CC       H5HFstat.lo
  CC       H5HFtest.lo
H5HFtest.c: In function 'H5HF_get_cparam_test':
H5HFtest.c:99:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     else if(fh->hdr->id_len == (1 + fh->hdr->sizeof_size + fh->hdr->sizeof_addr))
                             ^
H5HFtest.c:102:33: warning: conversion to 'uint16_t' from 'unsigned int' may alter its value [-Wconversion]
         cparam->id_len = fh->hdr->id_len;
                                 ^
H5HFtest.c: In function 'H5HF_cmp_cparam_test':
H5HFtest.c:125:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_cmp_cparam_test(const H5HF_create_t *cparam1, const H5HF_create_t *cparam2)
 ^
H5HFtest.c: In function 'H5HF_get_max_root_rows':
H5HFtest.c:245:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_max_root_rows(const H5HF_t *fh)
 ^
H5HFtest.c: In function 'H5HF_get_dtable_width_test':
H5HFtest.c:276:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dtable_width_test(const H5HF_t *fh)
 ^
H5HFtest.c: In function 'H5HF_get_dtable_max_drows_test':
H5HFtest.c:307:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dtable_max_drows_test(const H5HF_t *fh)
 ^
H5HFtest.c: In function 'H5HF_get_iblock_max_drows_test':
H5HFtest.c:342:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_iblock_max_drows_test(const H5HF_t *fh, unsigned pos)
 ^
H5HFtest.c: In function 'H5HF_get_dblock_size_test':
H5HFtest.c:375:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dblock_size_test(const H5HF_t *fh, unsigned row)
 ^
H5HFtest.c: In function 'H5HF_get_dblock_free_test':
H5HFtest.c:407:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HF_get_dblock_free_test(const H5HF_t *fh, unsigned row)
 ^
  CC       H5HFtiny.lo
H5HFtiny.c: In function 'H5HF_tiny_insert':
H5HFtiny.c:172:55: warning: conversion to 'uint8_t' from 'size_t' may alter its value [-Wconversion]
         *id++ = H5HF_ID_VERS_CURR | H5HF_ID_TYPE_TINY |
                                                       ^
H5HFtiny.c:176:55: warning: conversion to 'uint8_t' from 'size_t' may alter its value [-Wconversion]
         *id++ = H5HF_ID_VERS_CURR | H5HF_ID_TYPE_TINY |
                                                       ^
H5HFtiny.c: In function 'H5HF_tiny_get_obj_len':
H5HFtiny.c:232:34: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         enc_obj_size = *(id + 1) | ((*id & H5HF_TINY_MASK_EXT_1) << 8);
                                  ^
H5HFtiny.c: In function 'H5HF_tiny_op_real':
H5HFtiny.c:283:34: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         enc_obj_size = *(id + 1) | ((*id & H5HF_TINY_MASK_EXT_1) << 8);
                                  ^
H5HFtiny.c: In function 'H5HF_tiny_remove':
H5HFtiny.c:408:34: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         enc_obj_size = *(id + 1) | ((*id & H5HF_TINY_MASK_EXT_1) << 8);
                                  ^
  CC       H5HG.lo
In file included from H5HG.c:53:0:
H5HG.c: In function 'H5HG_create':
H5HGpkg.h:80:38: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 #define H5HG_ALIGN(X) (H5HG_ALIGNMENT*(((X)+H5HG_ALIGNMENT-1)/H5HG_ALIGNMENT))
                                      ^
H5HG.c:185:9: note: in expansion of macro 'H5HG_ALIGN'
     n = H5HG_ALIGN(p - heap->chunk) - (size_t)(p - heap->chunk);
         ^
H5HG.c: In function 'H5HG_free':
H5HG.c:844:19: warning: request for implicit conversion from 'void *' to 'struct H5HG_obj_t *' not permitted in C++ [-Wc++-compat]
         heap->obj = H5FL_SEQ_FREE(H5HG_obj_t, heap->obj);
                   ^
  CC       H5HGcache.lo
H5HGcache.c: In function 'H5HG_load':
H5HGcache.c:186:70: warning: conversion to 'size_t' from 'long int' may change the sign of the result [-Wsign-conversion]
      heap->obj[0].size = ((const uint8_t *)heap->chunk + heap->size) - p;
                                                                      ^
H5HGcache.c:114:56: warning: unused parameter 'udata' [-Wunused-parameter]
 H5HG_load(H5F_t *f, hid_t dxpl_id, haddr_t addr, void *udata)
                                                        ^
  CC       H5HGdbg.lo
H5HGdbg.c: In function 'H5HG_debug':
H5HGdbg.c:144:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        (unsigned long)(h->obj[u].begin - h->chunk));
        ^
H5HGdbg.c:147:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        h->obj[u].nrefs);
        ^
H5HGdbg.c:152:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        (unsigned long)H5HG_ALIGN(h->obj[u].size));
        ^
  CC       H5HGquery.lo
H5HGquery.c: In function 'H5HG_get_addr':
H5HGquery.c:88:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HG_get_addr(const H5HG_heap_t *heap)
 ^
H5HGquery.c: In function 'H5HG_get_size':
H5HGquery.c:112:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HG_get_size(const H5HG_heap_t *heap)
 ^
H5HGquery.c: In function 'H5HG_get_free_size':
H5HGquery.c:136:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HG_get_free_size(const H5HG_heap_t *heap)
 ^
  CC       H5HL.lo
H5HL.c: In function 'H5HL_offset_into':
H5HL.c:536:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HL_offset_into(const H5HL_t *heap, size_t offset)
 ^
  CC       H5HLcache.lo
H5HLcache.c: In function 'H5HL_datablock_load':
H5HLcache.c:627:54: warning: unused parameter 'addr' [-Wunused-parameter]
 H5HL_datablock_load(H5F_t *f, hid_t dxpl_id, haddr_t addr, void *_udata)
                                                      ^
H5HLcache.c: In function 'H5HL_datablock_flush':
H5HLcache.c:693:72: warning: unused parameter 'addr' [-Wunused-parameter]
 H5HL_datablock_flush(H5F_t *f, hid_t dxpl_id, hbool_t destroy, haddr_t addr,
                                                                        ^
  CC       H5HLdbg.lo
H5HLdbg.c: In function 'H5HL_debug':
H5HLdbg.c:100:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   freelist->offset, freelist->size);
   ^
  CC       H5HLint.lo
  CC       H5HP.lo
H5HP.c: In function 'H5HP_create':
H5HP.c:384:32: warning: request for implicit conversion from 'void *' to 'struct H5HP_ent_t *' not permitted in C++ [-Wc++-compat]
                 new_heap->heap = H5FL_SEQ_FREE(H5HP_ent_t, new_heap->heap);
                                ^
H5HP.c: In function 'H5HP_decr':
H5HP.c:851:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     heap->heap[obj_loc].val-=amt;
     ^
H5HP.c:851:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
     heap->heap[obj_loc].val-=amt;
                            ^
H5HP.c: In function 'H5HP_close':
H5HP.c:913:16: warning: request for implicit conversion from 'void *' to 'struct H5HP_ent_t *' not permitted in C++ [-Wc++-compat]
     heap->heap = H5FL_SEQ_FREE(H5HP_ent_t, heap->heap);
                ^
H5HP.c: In function 'H5HP_count':
H5HP.c:412:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5HP_count(const H5HP_t *heap)
 ^
  CC       H5I.lo
H5I.c: In function 'H5Iregister_type':
H5I.c:254:25: warning: unused parameter 'hash_size' [-Wunused-parameter]
 H5Iregister_type(size_t hash_size, unsigned reserved, H5I_free_t free_func)
                         ^
H5I.c: In function 'H5I__clear_type_cb':
H5I.c:655:81: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(udata->type_ptr->cls->free_func && (udata->type_ptr->cls->free_func)((void *)id->obj_ptr) < 0) {
                                                                                 ^
In file included from H5I.c:47:0:
H5I.c: In function 'H5I__destroy_type':
H5I.c:760:48: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         type_ptr->cls = H5FL_FREE(H5I_class_t, (void *)type_ptr->cls);
                                                ^
H5FLprivate.h:132:65: note: in definition of macro 'H5FL_FREE'
 #define H5FL_FREE(t,obj) (t *)H5FL_reg_free(&(H5FL_REG_NAME(t)),obj)
                                                                 ^
H5I.c: In function 'H5I_subst':
H5I.c:987:17: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     ret_value = (void *)id_ptr->obj_ptr;
                 ^
H5I.c: In function 'H5I_object':
H5I.c:1022:21: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         ret_value = (void *)id_ptr->obj_ptr;
                     ^
H5I.c: In function 'H5I_object_verify':
H5I.c:1097:21: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         ret_value = (void *)id_ptr->obj_ptr;
                     ^
H5I.c: In function 'H5I__remove_common':
H5I.c:1271:17: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     ret_value = (void *)curr_id->obj_ptr;
                 ^
H5I.c: In function 'H5I_dec_ref':
H5I.c:1445:68: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         if(!type_ptr->cls->free_func || (type_ptr->cls->free_func)((void *)id_ptr->obj_ptr) >= 0) {
                                                                    ^
H5I.c: In function 'H5I__iterate_cb':
H5I.c:2104:42: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         cb_ret_val = (*udata->user_func)((void *)item->obj_ptr, item->id, udata->user_udata);
                                          ^
  CC       H5Itest.lo
  CC       H5L.lo
H5L.c: In function 'H5L_link_cb':
H5L.c:1718:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     udata->lnk->name = (char *)name;
                        ^
H5L.c: In function 'H5L_move_dest_cb':
H5L.c:2437:24: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
     udata->lnk->name = (char *)name;
                        ^
H5L.c: In function 'H5L_move_cb':
H5L.c:2580:13: warning: passing argument 1 of 'H5RS_wrap' discards 'const' qualifier from pointer target type [enabled by default]
             dst_name_r = H5RS_wrap(udata->dst_name);
             ^
In file included from H5Gprivate.h:37:0,
                 from H5Tprivate.h:30,
                 from H5Oprivate.h:41,
                 from H5Dprivate.h:27,
                 from H5L.c:30:
H5RSprivate.h:49:20: note: expected 'char *' but argument is of type 'const char *'
 H5_DLL H5RS_str_t *H5RS_wrap(char *s);
                    ^
H5L.c: In function 'H5L_link_copy_file':
H5L.c:3014:28: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         lnk_grp_loc.oloc = (H5O_loc_t *)src_oloc;    /* Casting away const OK -QAK */
                            ^
H5L.c: In function 'H5L_find_class_idx':
H5L.c:1410:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5L_find_class_idx(H5L_type_t id)
 ^
  CC       H5Lexternal.lo
  CC       H5make_libsettings.o
  CCLD     H5make_libsettings
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5make_libsettings > H5lib_settings.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5lib_settings.c ; exit 1)
  CC       H5lib_settings.lo
H5lib_settings.c:34:6: warning: size of 'H5libhdf5_settings' is 3137 bytes [-Wlarger-than=]
 char H5libhdf5_settings[]=
      ^
  CC       H5MF.lo
  CC       H5MFaggr.lo
H5MFaggr.c: In function 'H5MF_aggr_try_extend':
H5MFaggr.c:417:49: warning: conversion to 'float' from 'hsize_t' may alter its value [-Wconversion]
   if(extra_requested <= (EXTEND_THRESHOLD * aggr->size)) {
                                                 ^
  CC       H5MFdbg.lo
  CC       H5MFsection.lo
  CC       H5MM.lo
  CC       H5MP.lo
  CC       H5MPtest.lo
H5MPtest.c: In function 'H5MP_pool_is_free_size_correct':
H5MPtest.c:119:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5MP_pool_is_free_size_correct(const H5MP_pool_t *mp)
 ^
  CC       H5O.lo
H5O.c: In function 'H5O_get_oh_addr':
H5O.c:3047:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5O_get_oh_addr(const H5O_t *oh)
 ^
  CC       H5Oainfo.lo
H5Oainfo.c: In function 'H5O_ainfo_copy_file':
H5Oainfo.c:405:28: warning: unused parameter 'file_src' [-Wunused-parameter]
 H5O_ainfo_copy_file(H5F_t *file_src, void *mesg_src, H5F_t *file_dst,
                            ^
H5Oainfo.c:407:17: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     H5O_copy_t *cpy_info, void H5_ATTR_UNUSED *udata, hid_t dxpl_id)
                 ^
  CC       H5Oalloc.lo
H5Oalloc.c: In function 'H5O_add_gap':
H5Oalloc.c:112:20: warning: unused parameter 'f' [-Wunused-parameter]
 H5O_add_gap(H5F_t *f, H5O_t *oh, unsigned chunkno, hbool_t *chk_dirtied,
                    ^
H5Oalloc.c: In function 'H5O_alloc_new_chunk':
H5Oalloc.c:955:75: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         if(NULL == (chk_proxy = H5O_chunk_protect(f, dxpl_id, oh, chunkno - 1)))
                                                                           ^
H5Oalloc.c:973:21: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
                     curr_msg->chunkno = chunkno;
                     ^
H5Oalloc.c:994:37: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         null_msg->chunkno = chunkno - 1;
                                     ^
H5Oalloc.c:1029:9: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         oh->mesg[found_other.msgno].chunkno = chunkno;
         ^
H5Oalloc.c:1081:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     oh->mesg[idx].chunkno = chunkno;
     ^
H5Oalloc.c:1084:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     if(H5O_chunk_add(f, dxpl_id, oh, chunkno) < 0)
     ^
H5Oalloc.c:1092:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cont->chunkno = chunkno;
     ^
  CC       H5Oattr.lo
H5Oattr.c: In function 'H5O_attr_debug':
H5Oattr.c:862:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->shared->dt_size));
      ^
H5Oattr.c:863:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if((H5O_MSG_DTYPE->debug)(f, dxpl_id, mesg->shared->dt, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
     ^
H5Oattr.c:869:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->shared->ds_size));
      ^
H5Oattr.c:870:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5S_debug(f, dxpl_id, mesg->shared->ds, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
     ^
H5Oattr.c: In function 'H5O_attr_reset':
H5Oattr.c:481:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5O_attr_reset(void H5_ATTR_UNUSED *_mesg)
 ^
  CC       H5Oattribute.lo
  CC       H5Obogus.lo
  CC       H5Obtreek.lo
  CC       H5Ocache.lo
H5Ocache.c: In function 'H5O_load':
H5Ocache.c:166:12: warning: variable 'prefix_size' set but not used [-Wunused-but-set-variable]
     size_t prefix_size;    /* Size of object header prefix */
            ^
H5Ocache.c: In function 'H5O_cache_chk_load':
H5Ocache.c:728:49: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         chk_proxy->chunkno = udata->oh->nchunks - 1;
                                                 ^
H5Ocache.c: In function 'H5O_chunk_deserialize':
H5Ocache.c:1064:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     chunkno = oh->nchunks++;
                          ^
H5Ocache.c:1186:36: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             oh->mesg[mesgno].raw = (uint8_t *)p;        /* Casting away const OK - QAK */
                                    ^
H5Ocache.c:1289:57: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
             cont->chunkno = udata->cont_msg_info->nmsgs + 1; /*the next continuation message/chunk */
                                                         ^
H5Ocache.c: In function 'H5O_chunk_serialize':
H5Ocache.c:1385:30: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if(H5O_msg_flush((H5F_t *)f, oh, curr_msg) < 0)
                              ^
  CC       H5Ochunk.lo
  CC       H5Ocont.lo
  CC       H5Ocopy.lo
  CC       H5Odbg.lo
H5Odbg.c: In function 'H5O_debug_real':
H5Odbg.c:395:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   oh->chunk[i].addr);
                   ^
H5Odbg.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     chunk_size);
     ^
H5Odbg.c:416:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   oh->chunk[i].gap);
                   ^
H5Odbg.c:448:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     sequence[oh->mesg[i].type->id]++);
     ^
H5Odbg.c:451:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      oh->mesg[i].dirty);
      ^
H5Odbg.c:453:20: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                    "Message flags:");
                    ^
H5Odbg.c:488:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                            oh->mesg[i].flags & ~H5O_MSG_FLAG_BITS);
                            ^
H5Odbg.c:494:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     oh->mesg[i].chunkno);
     ^
H5Odbg.c:501:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     oh->mesg[i].raw_size);
     ^
H5Odbg.c:516:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     "Message Information:");
     ^
H5Odbg.c:518:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (debug_type->debug)(f, dxpl_id, oh->mesg[i].native, stream, indent + 6, MAX(0, fwidth - 6));
      ^
  CC       H5Odrvinfo.lo
  CC       H5Odtype.lo
H5Odtype.c: In function 'H5O_dtype_copy':
H5Odtype.c:1188:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (dst = H5T_copy(src, H5T_COPY_ALL)))
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Odtype.c:20:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Odtype.c: In function 'H5O_dtype_pre_copy_file':
H5Odtype.c:1533:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (udata->src_dtype = H5T_copy(dt_src, H5T_COPY_TRANSIENT)))
         ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Odtype.c:20:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Odtype.c: In function 'H5O_dtype_debug':
H5Odtype.c:1732:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       (unsigned long)(dt->shared->u.compnd.memb[i].offset));
       ^
H5Odtype.c:1734:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        indent + 3, MAX(0, fwidth - 3));
        ^
H5Odtype.c:1738:2: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  H5O_dtype_debug(f, dxpl_id, dt->shared->parent, stream, indent+3, MAX(0, fwidth-3));
  ^
H5Odtype.c:1965:2: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  H5O_dtype_debug(f, dxpl_id, dt->shared->parent, stream, indent + 3, MAX(0, fwidth - 3));
  ^
H5Odtype.c: In function 'H5O_dtype_size':
H5Odtype.c:1223:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5O_dtype_size(const H5F_t *f, const void *_mesg)
 ^
H5Odtype.c: In function 'H5O_dtype_decode_helper':
H5Odtype.c:333:25: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
                         for(j = 0; j <= i; j++)
                         ^
H5Odtype.c:353:33: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
                                 for(j = 0; j <= i; j++)
                                 ^
  CC       H5Oefl.lo
H5Oefl.c: In function 'H5O_efl_debug':
H5Oefl.c:574:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     mesg->slot[u].name);
     ^
H5Oefl.c:578:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     (unsigned long)(mesg->slot[u].name_offset));
     ^
H5Oefl.c:582:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->slot[u].offset));
      ^
H5Oefl.c:586:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->slot[u].size));
      ^
  CC       H5Ofill.lo
In file included from H5Ofill.c:69:0:
H5Oshared.h: In function 'H5O_fill_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
In file included from H5Ofill.c:105:0:
H5Oshared.h: In function 'H5O_fill_new_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
In file included from H5Cprivate.h:37:0,
                 from H5ACprivate.h:35,
                 from H5Oprivate.h:38,
                 from H5Dprivate.h:27,
                 from H5Ofill.c:26:
H5Ofill.c: In function 'H5O_fill_new_decode':
H5Fprivate.h:132:37: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
    (i) |= ((int32_t)(((*(p) & 0xff) << 24) |                                  \
                                     ^
H5Ofill.c:219:13: note: in expansion of macro 'INT32DECODE'
             INT32DECODE(p, fill->size);
             ^
  CC       H5Oginfo.lo
  CC       H5Olayout.lo
  CC       H5Olinfo.lo
  CC       H5Olink.lo
  CC       H5Omessage.lo
H5Omessage.c: In function 'H5O_msg_reset_share':
H5Omessage.c:1703:28: warning: variable 'type' set but not used [-Wunused-but-set-variable]
     const H5O_msg_class_t *type;        /* Actual H5O class type for the ID */
                            ^
H5Omessage.c: In function 'H5O_msg_count_real':
H5Omessage.c:836:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5O_msg_count_real(const H5O_t *oh, const H5O_msg_class_t *type)
 ^
H5Omessage.c: In function 'H5O_msg_exists_oh':
H5Omessage.c:921:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5O_msg_exists_oh(const H5O_t *oh, unsigned type_id)
 ^
H5Omessage.c: In function 'H5O_msg_can_share_in_ohdr':
H5Omessage.c:1574:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5O_msg_can_share_in_ohdr(unsigned type_id)
 ^
H5Omessage.c: In function 'H5O_msg_is_shared':
H5Omessage.c:1612:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5O_msg_is_shared(unsigned type_id, const void *mesg)
 ^
  CC       H5Omtime.lo
H5Omtime.c: In function 'H5O_mtime_decode':
H5Omtime.c:182:5: warning: "_MSC_VER" is not defined [-Wundef]
 #if _MSC_VER >= 1900  /* VS 2015 */
     ^
  CC       H5Oname.lo
  CC       H5Onull.lo
  CC       H5Opline.lo
In file included from H5Opline.c:67:0:
H5Oshared.h: In function 'H5O_pline_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
H5Opline.c: In function 'H5O_pline_debug':
H5Opline.c:637:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   (unsigned)(pline->filter[i].id));
   ^
H5Opline.c:641:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       pline->filter[i].name);
       ^
H5Opline.c:644:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       "Filter name:");
       ^
H5Opline.c:647:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   pline->filter[i].flags);
   ^
H5Opline.c:650:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   pline->filter[i].cd_nelmts);
   ^
H5Opline.c:659:7: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
       pline->filter[i].cd_values[j]);
       ^
  CC       H5Orefcount.lo
  CC       H5Osdspace.lo
In file included from H5Osdspace.c:61:0:
H5Oshared.h: In function 'H5O_sdspace_shared_post_copy_file':
H5Oshared.h:386:44: warning: unused parameter 'oloc_src' [-Wunused-parameter]
 H5O_SHARED_POST_COPY_FILE(const H5O_loc_t *oloc_src, const void *mesg_src,
                                            ^
  CC       H5Oshared.lo
H5Oshared.c: In function 'H5O_shared_copy_file':
H5Oshared.c:590:29: warning: unused parameter 'file_src' [-Wunused-parameter]
 H5O_shared_copy_file(H5F_t *file_src, H5F_t *file_dst,
                             ^
H5Oshared.c:592:79: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     hbool_t H5_ATTR_UNUSED *recompute_size, unsigned *mesg_flags, H5O_copy_t *cpy_info,
                                                                               ^
  CC       H5Ostab.lo
  CC       H5Oshmesg.lo
  CC       H5Otest.lo
  CC       H5Ounknown.lo
  CC       H5P.lo
  CC       H5Pacpl.lo
  CC       H5Pdapl.lo
  CC       H5Pdcpl.lo
H5Pdcpl.c: In function 'H5P_get_fill_value':
H5Pdcpl.c:1565:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if((dst_id = H5I_register(H5I_DATATYPE, H5T_copy(type, H5T_COPY_TRANSIENT), FALSE)) < 0)
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Pdcpl.c:39:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
  CC       H5Pdeprec.lo
  CC       H5Pdxpl.lo
  CC       H5Pfapl.lo
  CC       H5Pfcpl.lo
  CC       H5Pfmpl.lo
  CC       H5Pgcpl.lo
  CC       H5Pint.lo
H5Pint.c: In function 'H5P__iterate_pclass_cb':
H5Pint.c:3632:11: warning: unused variable 'key' [-Wunused-variable]
     char *key = (char *)_key;                           /* Pointer to the property's name */
           ^
H5Pint.c: In function 'H5P_get_class_parent':
H5Pint.c:4830:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5P_get_class_parent(const H5P_genclass_t *pclass)
 ^
H5Pint.c: In function 'H5P_get_plist_id':
H5Pint.c:4898:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5P_get_plist_id(const H5P_genplist_t *plist)
 ^
H5Pint.c: In function 'H5P_get_class':
H5Pint.c:4926:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5P_get_class(const H5P_genplist_t *plist)
 ^
  CC       H5Plapl.lo
H5Plapl.c: In function 'H5P_lacc_elink_fapl_cmp':
H5Plapl.c:305:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;
                ^
  CC       H5Plcpl.lo
  CC       H5Pocpl.lo
H5Pocpl.c: In function 'H5Pget_filter_by_id2':
H5Pocpl.c:1072:30: warning: unused variable 'filter' [-Wunused-variable]
     const H5Z_filter_info_t *filter;        /* Pointer to filter information */
                              ^
H5Pocpl.c:1071:21: warning: unused variable 'pline' [-Wunused-variable]
     H5O_pline_t     pline;                  /* Filter pipeline */
                     ^
  CC       H5Pocpypl.lo
H5Pocpypl.c: In function 'H5P__ocpy_merge_comm_dt_list_cmp':
H5Pocpypl.c:280:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5P__ocpy_merge_comm_dt_list_cmp(const void *_dt_list1, const void *_dt_list2,
 ^
  CC       H5Pstrcpl.lo
  CC       H5Ptest.lo
  CC       H5PL.lo
H5PL.c: In function 'H5PL_load':
H5PL.c:326:5: warning: enumeration value 'H5PL_TYPE_ERROR' not handled in switch [-Wswitch-enum]
     switch (type) {
     ^
H5PL.c:326:5: warning: enumeration value 'H5PL_TYPE_NONE' not handled in switch [-Wswitch-enum]
H5PL.c: In function 'H5PL__open':
H5PL.c:605:39: warning: ISO C forbids conversion of object pointer to function pointer type [-Wpedantic]
         if(NULL == (get_plugin_info = (H5PL_get_plugin_info_t)H5PL_GET_LIB_FUNC(handle, "H5PLget_plugin_info"))) {
                                       ^
H5PL.c: In function 'H5PL__search_table':
H5PL.c:688:47: warning: ISO C forbids conversion of object pointer to function pointer type [-Wpedantic]
                 if(NULL == (get_plugin_info = (H5PL_get_plugin_info_t)H5PL_GET_LIB_FUNC((H5PL_table_g[i]).handle, "H5PLget_plugin_info")))
                                               ^
  CC       H5R.lo
  CC       H5Rdeprec.lo
  CC       H5RC.lo
  CC       H5RS.lo
H5RS.c: In function 'H5RS_cmp':
H5RS.c:389:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_cmp(const H5RS_str_t *rs1, const H5RS_str_t *rs2)
 ^
H5RS.c: In function 'H5RS_len':
H5RS.c:423:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_len(const H5RS_str_t *rs)
 ^
H5RS.c: In function 'H5RS_get_str':
H5RS.c:457:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_get_str(const H5RS_str_t *rs)
 ^
H5RS.c: In function 'H5RS_get_count':
H5RS.c:489:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5RS_get_count(const H5RS_str_t *rs)
 ^
  CC       H5S.lo
H5S.c: In function 'H5S_has_extent':
H5S.c:1903:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_has_extent(const H5S_t *ds)
 ^
H5S.c: In function 'H5S_extent_equal':
H5S.c:2018:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_extent_equal(const H5S_t *ds1, const H5S_t *ds2)
 ^
H5S.c: In function 'H5S_extent_nelem':
H5S.c:2079:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_extent_nelem(const H5S_extent_t *ext)
 ^
  CC       H5Sall.lo
H5Sall.c: In function 'H5S_all_project_simple':
H5Sall.c:814:37: warning: unused parameter 'base_space' [-Wunused-parameter]
 H5S_all_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                     ^
H5Sall.c:814:76: warning: unused parameter 'offset' [-Wunused-parameter]
 H5S_all_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                                                            ^
  CC       H5Sdbg.lo
H5Sdbg.c: In function 'H5S_debug':
H5Sdbg.c:113:34: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                                  indent + 3, MAX(0, fwidth - 3));
                                  ^
  CC       H5Shyper.lo
H5Shyper.c: In function 'H5S_hyper_serialize':
H5Shyper.c:2200:13: warning: conversion to 'uint32_t' from 'long unsigned int' may alter its value [-Wconversion]
         len += (size_t)(8 * space->extent.rank * block_count);
             ^
H5Shyper.c: In function 'H5S_hyper_iter_has_next_block':
H5Shyper.c:598:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_iter_has_next_block(const H5S_sel_iter_t *iter)
 ^
H5Shyper.c: In function 'H5S_hyper_cmp_spans':
H5Shyper.c:1415:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_cmp_spans (H5S_hyper_span_info_t *span_info1, H5S_hyper_span_info_t *span_info2)
 ^
H5Shyper.c: In function 'H5S_hyper_is_valid_helper.isra.4':
H5Shyper.c:1690:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_valid_helper (const H5S_hyper_span_info_t *spans, const hssize_t *offset, const hsize_t *size, hsize_t rank)
 ^
H5Shyper.c: In function 'H5S_hyper_is_valid':
H5Shyper.c:1753:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_valid (const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_span_nblocks':
H5Shyper.c:1814:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_span_nblocks(H5S_hyper_span_info_t *spans)
 ^
H5Shyper.c: In function 'H5S_get_select_hyper_nblocks.isra.5':
H5Shyper.c:1859:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_get_select_hyper_nblocks(H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_serial_size':
H5Shyper.c:1941:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_serial_size(const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_is_contiguous':
H5Shyper.c:2882:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_contiguous(const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_is_single':
H5Shyper.c:3067:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_is_single(const H5S_t *space)
 ^
H5Shyper.c: In function 'H5S_hyper_spans_nelem':
H5Shyper.c:5623:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_hyper_spans_nelem (H5S_hyper_span_info_t *spans)
 ^
H5Shyper.c: In function 'H5S_get_select_hyper_blocklist.isra.18.constprop.29':
H5Shyper.c:2515:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 while(temp_dim >= 0 && !done) {
                                ^
cc1: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
H5Shyper.c: In function 'H5S_hyper_serialize':
H5Shyper.c:2162:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 while(temp_dim >= 0 && done == 0) {
                                ^
cc1: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
  CC       H5Smpio.lo
  CC       H5Snone.lo
H5Snone.c: In function 'H5S_none_project_simple':
H5Snone.c:763:38: warning: unused parameter 'base_space' [-Wunused-parameter]
 H5S_none_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                      ^
H5Snone.c:763:77: warning: unused parameter 'offset' [-Wunused-parameter]
 H5S_none_project_simple(const H5S_t *base_space, H5S_t *new_space, hsize_t *offset)
                                                                             ^
  CC       H5Spoint.lo
H5Spoint.c: In function 'H5S_point_bounds':
H5Spoint.c:1106:63: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
             if(start[u] > (node->pnt[u] + space->select.offset[u]))
                                                               ^
H5Spoint.c:1107:63: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                 start[u] = node->pnt[u] + space->select.offset[u];
                                                               ^
H5Spoint.c:1108:61: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
             if(end[u] < (node->pnt[u] + space->select.offset[u]))
                                                             ^
H5Spoint.c:1109:61: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                 end[u] = node->pnt[u] + space->select.offset[u];
                                                             ^
H5Spoint.c: In function 'H5S_point_get_seq_list':
H5Spoint.c:1655:56: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
             loc += (node->pnt[i] + space->select.offset[i]) * acc;
                                                        ^
H5Spoint.c: In function 'H5S_point_is_valid':
H5Spoint.c:685:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_point_is_valid (const H5S_t *space)
 ^
H5Spoint.c: In function 'H5S_point_serial_size':
H5Spoint.c:774:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5S_point_serial_size (const H5S_t *space)
 ^
  CC       H5Sselect.lo
H5Sselect.c: In function 'H5S_select_iterate':
H5Sselect.c:1217:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info */
                    ^
H5Sselect.c:1263:17: warning: size of 'off' is 8192 bytes [-Wlarger-than=]
         hsize_t off[H5D_IO_VECTOR_SIZE];        /* Array to store sequence offsets */
                 ^
H5Sselect.c:1264:16: warning: size of 'len' is 8192 bytes [-Wlarger-than=]
         size_t len[H5D_IO_VECTOR_SIZE];         /* Array to store sequence lengths */
                ^
H5Sselect.c: In function 'H5S_select_shape_same':
H5Sselect.c:1436:20: warning: size of 'iter_a' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter_a;    /* Selection a iteration info */
                    ^
H5Sselect.c:1437:20: warning: size of 'iter_b' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter_b;    /* Selection b iteration info */
                    ^
H5Sselect.c: In function 'H5S_select_fill':
H5Sselect.c:2005:20: warning: size of 'iter' is 2232 bytes [-Wlarger-than=]
     H5S_sel_iter_t iter;        /* Selection iteration info */
                    ^
H5Sselect.c:2033:17: warning: size of 'off' is 8192 bytes [-Wlarger-than=]
         hsize_t off[H5D_IO_VECTOR_SIZE];          /* Array to store sequence offsets */
                 ^
H5Sselect.c:2034:16: warning: size of 'len' is 8192 bytes [-Wlarger-than=]
         size_t len[H5D_IO_VECTOR_SIZE];           /* Array to store sequence lengths */
                ^
H5Sselect.c: In function 'H5S_get_select_npoints':
H5Sselect.c:333:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_get_select_npoints(const H5S_t *space)
 ^
H5Sselect.c: In function 'H5S_get_select_type':
H5Sselect.c:1394:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5S_get_select_type(const H5S_t *space)
 ^
H5Sselect.c: In function 'H5S_select_iterate':
H5Sselect.c:1214:1: warning: stack usage is 19376 bytes [-Wstack-usage=]
 H5S_select_iterate(void *buf, const H5T_t *type, const H5S_t *space,
 ^
H5Sselect.c:1335:1: warning: the frame size of 19288 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* end H5S_select_iterate() */
 ^
H5Sselect.c: In function 'H5S_select_fill':
H5Sselect.c:2003:1: warning: stack usage is 18784 bytes [-Wstack-usage=]
 H5S_select_fill(const void *fill, size_t fill_size, const H5S_t *space, void *_buf)
 ^
H5Sselect.c:2065:1: warning: the frame size of 18696 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }   /* H5S_select_fill() */
 ^
  CC       H5Stest.lo
  CC       H5SL.lo
H5SL.c: In function 'H5SL_release_common':
H5SL.c:840:36: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             (void)(op)(node->item, (void *)node->key, op_data);
                                    ^
H5SL.c: In function 'H5SL_remove_first':
H5SL.c:1235:30: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     size_t      level = slist->curr_level;      /* Skip list level */
                              ^
H5SL.c: In function 'H5SL_iterate':
H5SL.c:2150:46: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if((ret_value = (op)(node->item, (void *)node->key, op_data)) != 0)
                                              ^
H5SL.c: In function 'H5SL_try_free_safe':
H5SL.c:2309:44: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
             if((op_ret = (op)(node->item , (void *)node->key, op_data)) < 0)
                                            ^
H5SL.c: In function 'H5SL_term_interface':
H5SL.c:2535:13: warning: variable 'ret' set but not used [-Wunused-but-set-variable]
     herr_t  ret;
             ^
H5SL.c: In function 'H5SL_count':
H5SL.c:1009:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_count(H5SL_t *slist)
 ^
H5SL.c: In function 'H5SL_first':
H5SL.c:1927:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_first(H5SL_t *slist)
 ^
H5SL.c: In function 'H5SL_next':
H5SL.c:1964:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_next(H5SL_node_t *slist_node)
 ^
H5SL.c: In function 'H5SL_prev':
H5SL.c:2001:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_prev(H5SL_node_t *slist_node)
 ^
H5SL.c: In function 'H5SL_last':
H5SL.c:2039:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_last(H5SL_t *slist)
 ^
H5SL.c: In function 'H5SL_item':
H5SL.c:2076:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5SL_item(H5SL_node_t *slist_node)
 ^
  CC       H5SM.lo
  CC       H5SMbtree2.lo
  CC       H5SMcache.lo
  CC       H5SMmessage.lo
H5SMmessage.c: In function 'H5SM_message_compare':
H5SMmessage.c:229:16: warning: variable 'status' set but not used [-Wunused-but-set-variable]
         herr_t status;
                ^
  CC       H5SMtest.lo
  CC       H5ST.lo
H5ST.c: In function 'H5ST_find_internal':
H5ST.c:290:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_find_internal(H5ST_ptr_t p, const char *s)
 ^
H5ST.c: In function 'H5ST_findfirst_internal':
H5ST.c:405:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_findfirst_internal(H5ST_ptr_t p)
 ^
H5ST.c: In function 'H5ST_getnext':
H5ST.c:484:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_getnext(H5ST_ptr_t p)
 ^
H5ST.c: In function 'H5ST_search':
H5ST.c:245:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_search(H5ST_tree_t *tree, const char *s)
 ^
H5ST.c: In function 'H5ST_findnext':
H5ST.c:542:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5ST_findnext(H5ST_ptr_t p)
 ^
  CC       H5T.lo
H5T.c: In function 'H5T_path_find':
H5T.c:4485:2: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
  if(NULL == (path->src = H5T_copy(src, H5T_COPY_ALL)))
  ^
H5T.c:3115:1: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5T_copy(H5T_t *old_dt, H5T_copy_t method)
 ^
H5T.c:4487:9: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
         if(NULL == (path->dst = H5T_copy(dst, H5T_COPY_ALL)))
         ^
H5T.c:3115:1: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5T_copy(H5T_t *old_dt, H5T_copy_t method)
 ^
H5T.c: In function 'H5T_is_variable_str':
H5T.c:2062:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_is_variable_str(const H5T_t *dt)
 ^
H5T.c: In function 'H5T_get_size':
H5T.c:3878:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_get_size(const H5T_t *dt)
 ^
H5T.c: In function 'H5T_path_bkg':
H5T.c:4726:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_path_bkg(const H5T_path_t *p)
 ^
H5T.c: In function 'H5T_cmp':
H5T.c:3968:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt1->shared->u.compnd.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:3980:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt2->shared->u.compnd.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:4053:95: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for (i = (int) dt1->shared->u.enumer.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                               ^
H5T.c:4071:95: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for (i = (int) dt2->shared->u.enumer.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                               ^
H5T.c:4068:15: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             if(dt2->shared->u.enumer.nmembs > 1) {
               ^
H5T.c:4051:15: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             if(dt1->shared->u.enumer.nmembs > 1) {
               ^
  CC       H5Tarray.lo
H5Tarray.c: In function 'H5T__get_array_ndims':
H5Tarray.c:275:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T__get_array_ndims(const H5T_t *dt)
 ^
  CC       H5Tbit.lo
H5Tbit.c: In function 'H5T__bit_find':
H5Tbit.c:424:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5T__bit_find(uint8_t *buf, size_t offset, size_t size, H5T_sdir_t direction,
 ^
  CC       H5Tcommit.lo
H5Tcommit.c: In function 'H5T_committed':
H5Tcommit.c:493:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_committed(const H5T_t *type)
 ^
  CC       H5Tcompound.lo
H5Tcompound.c: In function 'H5T__insert':
H5Tcompound.c:484:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     parent->shared->u.compnd.memb[idx].type = H5T_copy(member, H5T_COPY_ALL);
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tcompound.c:38:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tcompound.c: In function 'H5T_is_packed':
H5Tcompound.c:606:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5T_is_packed(const H5T_t *dt)
 ^
H5Tcompound.c: In function 'H5T_get_member_offset':
H5Tcompound.c:166:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T_get_member_offset(const H5T_t *dt, unsigned membno)
 ^
H5Tcompound.c: In function 'H5T__get_member_size':
H5Tcompound.c:315:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T__get_member_size(const H5T_t *dt, unsigned membno)
 ^
  CC       H5Tconv.lo
H5Tconv.c: In function 'H5T_conv_struct_free':
H5Tconv.c:1842:17: warning: variable 'status' set but not used [-Wunused-but-set-variable]
             int status;
                 ^
H5Tconv.c: In function 'H5T__conv_float_ullong':
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8692:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(FLOAT, ULLONG, float, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c: In function 'H5T__conv_double_ullong':
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8744:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(DOUBLE, ULLONG, double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c: In function 'H5T__conv_ldouble_ullong':
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:721:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DALIGN,POST_SALIGN,POST_DALIGN,GUTS,s,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:725:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SALIGN,PRE_DNOALIGN,POST_SALIGN,POST_DNOALIGN,GUTS,s,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:728:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DALIGN,POST_SNOALIGN,POST_DALIGN,GUTS,src,d,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:551:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     if(*(S) > (ST)(D_MAX) || (sprec < dprec && *(S) == (ST)(D_MAX))) {        \
                                                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c:569:21: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     } else if (*(S) != (ST)((DT)(*(S)))) {                                    \
                     ^
H5private.h:2097:28: note: in expansion of macro 'H5T_CONV_Fx_CORE'
 #define H5_GLUE(x,y)       x##y
                            ^
H5Tconv.c:852:9: note: in expansion of macro 'H5_GLUE'
         H5_GLUE(GUTS,_CORE)(S,D,ST,DT,D_MIN,D_MAX)
         ^
H5Tconv.c:833:9: note: in expansion of macro 'H5T_CONV_LOOP_GUTS'
         H5T_CONV_LOOP_GUTS(GUTS,S,D,ST,DT,D_MIN,D_MAX)         \
         ^
H5Tconv.c:817:9: note: in expansion of macro 'H5T_CONV_LOOP'
         H5T_CONV_LOOP(PRE_SALIGN_GUTS,PRE_DALIGN_GUTS,POST_SALIGN_GUTS,POST_DALIGN_GUTS,GUTS,S,D,ST,DT,D_MIN,D_MAX) \
         ^
H5Tconv.c:731:17: note: in expansion of macro 'H5T_CONV_LOOP_OUTER'
                 H5T_CONV_LOOP_OUTER(PRE_SNOALIGN,PRE_DNOALIGN,POST_SNOALIGN,POST_DNOALIGN,GUTS,src,dst,ST,DT,D_MIN,D_MAX) \
                 ^
H5Tconv.c:592:5: note: in expansion of macro 'H5T_CONV'
     H5T_CONV(H5T_CONV_Fx, STYPE, DTYPE, ST, DT, D_MIN, D_MAX, Y)              \
     ^
H5Tconv.c:8799:5: note: in expansion of macro 'H5T_CONV_Fx'
     H5T_CONV_Fx(LDOUBLE, ULLONG, long double, unsigned long long, 0, ULLONG_MAX);
     ^
H5Tconv.c: In function 'H5T__conv_f_i':
H5Tconv.c:8917:24: warning: cast from function call of type 'double' to non-matching type 'long unsigned int' [-Wbad-function-cast]
             buf_size = (size_t)HDpow((double)2.0f, (double)src.u.f.esize) / 8 + 1;
                        ^
H5Tconv.c:8993:38: warning: conversion to 'hssize_t' from 'uint64_t' may change the sign of the result [-Wsign-conversion]
                 sign = H5T__bit_get_d(s, src.u.f.sign, (size_t)1);
                                      ^
H5Tconv.c:9120:38: warning: conversion to 'hssize_t' from 'uint64_t' may change the sign of the result [-Wsign-conversion]
                 expo = H5T__bit_get_d(s, src.u.f.epos, src.u.f.esize);
                                      ^
H5Tconv.c:9127:21: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                     expo -= (src.u.f.ebias-1);
                     ^
H5Tconv.c:9127:26: warning: conversion to 'hssize_t' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                     expo -= (src.u.f.ebias-1);
                          ^
H5Tconv.c:9129:21: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                     expo -= src.u.f.ebias;
                     ^
H5Tconv.c:9129:26: warning: conversion to 'hssize_t' from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
                     expo -= src.u.f.ebias;
                          ^
H5Tconv.c:9159:17: warning: conversion to 'long long unsigned int' from 'hssize_t' may change the sign of the result [-Wsign-conversion]
                 H5T__bit_shift(int_buf, (ssize_t)(expo-src.u.f.msize), (size_t)0, buf_size * 8);
                 ^
H5Tconv.c:9364:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * buf_stride;
                     ^
H5Tconv.c:9365:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * buf_stride;
                     ^
H5Tconv.c:9367:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * src_p->shared->size;
                     ^
H5Tconv.c:9368:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * dst_p->shared->size;
                     ^
H5Tconv.c: In function 'H5T__conv_i_f':
H5Tconv.c:9714:28: warning: cast from function call of type 'double' to non-matching type 'long long unsigned int' [-Wbad-function-cast]
                 expo_max = (hsize_t)HDpow((double)2.0f, (double)dst.u.f.esize) - 1;
                            ^
H5Tconv.c:9793:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * buf_stride;
                     ^
H5Tconv.c:9794:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * buf_stride;
                     ^
H5Tconv.c:9796:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     sp += direction * src_p->shared->size;
                     ^
H5Tconv.c:9797:21: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                     dp += direction * dst_p->shared->size;
                     ^
In file included from H5Tconv.c:33:0:
H5Tconv.c: At top level:
H5private.h:1835:15: warning: 'H5_interface_initialize_g' defined but not used [-Wunused-variable]
 static int    H5_interface_initialize_g = 0;
               ^
H5Tconv.c:985:1: warning: 'H5T_init_conv_interface' defined but not used [-Wunused-function]
 H5T_init_conv_interface(void)
 ^
H5Tconv.c: In function 'H5T__conv_struct_subset':
H5Tconv.c:2077:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5T__conv_struct_subset(const H5T_cdata_t *cdata)
 ^
H5Tconv.c: In function 'H5T__conv_b_b':
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c: In function 'H5T__conv_i_i':
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c: In function 'H5T__conv_f_f':
H5Tconv.c:4482:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:4127:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c: In function 'H5T__conv_f_i':
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:8975:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c: In function 'H5T__conv_i_f':
H5Tconv.c:9774:21: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
                     for (i = 0; i < tsize; i += 4) {
                     ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
H5Tconv.c:9851:9: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         for (i = 0; i < size; i += 2) {
         ^
  CC       H5Tcset.lo
  CC       H5Tdbg.lo
H5Tdbg.c: In function 'H5T_debug':
H5Tdbg.c:175:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dt->shared->type) {
     ^
H5Tdbg.c:175:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tdbg.c:175:5: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
H5Tdbg.c:175:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Tdbg.c:249:2: warning: enumeration value 'H5T_ORDER_ERROR' not handled in switch [-Wswitch-enum]
  switch(dt->shared->u.atomic.order) {
  ^
H5Tdbg.c:249:2: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
H5Tdbg.c:281:17: warning: enumeration value 'H5T_SGN_ERROR' not handled in switch [-Wswitch-enum]
                 switch(dt->shared->u.atomic.u.i.sign) {
                 ^
H5Tdbg.c:281:17: warning: enumeration value 'H5T_NSGN' not handled in switch [-Wswitch-enum]
H5Tdbg.c:300:17: warning: enumeration value 'H5T_NORM_ERROR' not handled in switch [-Wswitch-enum]
                 switch(dt->shared->u.atomic.u.f.norm) {
                 ^
H5Tdbg.c:279:2: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
  switch(dt->shared->type) {
  ^
H5Tdbg.c:279:2: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_COMPOUND' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
H5Tdbg.c:279:2: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Tdbg.c:353:9: warning: enumeration value 'H5T_LOC_BADLOC' not handled in switch [-Wswitch-enum]
         switch(dt->shared->u.vlen.loc) {
         ^
H5Tdbg.c:353:9: warning: enumeration value 'H5T_LOC_MAXLOC' not handled in switch [-Wswitch-enum]
H5Tdbg.c: In function 'H5T__print_stats':
H5Tdbg.c:105:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5T__print_stats(H5T_path_t H5_ATTR_UNUSED * path, int H5_ATTR_UNUSED * nprint/*in,out*/)
 ^
  CC       H5Tdeprec.lo
  CC       H5Tenum.lo
H5Tenum.c: In function 'H5T__enum_create':
H5Tenum.c:136:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     ret_value->shared->parent = H5T_copy(parent, H5T_COPY_ALL);
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tenum.c:31:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tenum.c: In function 'H5T_enum_nameof':
H5Tenum.c:437:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (copied_dt = H5T_copy(dt, H5T_COPY_ALL)))
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tenum.c:31:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tenum.c: In function 'H5T_enum_valueof':
H5Tenum.c:576:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if (NULL==(copied_dt=H5T_copy(dt, H5T_COPY_ALL)))
     ^
In file included from H5Tpkg.h:39:0,
                 from H5Tenum.c:31:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
  CC       H5Tfields.lo
  CC       H5Tfixed.lo
H5Tfixed.c: In function 'H5Tget_sign':
H5Tfixed.c:82:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tfixed.c: In function 'H5Tset_sign':
H5Tfixed.c:161:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Tfloat.lo
  CC       H5detect.o
H5detect.c:115:19: warning: size of ‘d_g’ is 12800 bytes [-Wlarger-than=]
 static detected_t d_g[MAXDETECT];
                   ^
H5detect.c: In function ‘find_bias’:
H5detect.c:1180:24: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     unsigned char *a = (unsigned char *) _a;
                        ^
In file included from H5detect.c:57:0:
H5private.h:321:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define MIN(a,b)    (((a)<(b)) ? (a) : (b))
                                      ^
H5detect.c:1185:10: note: in expansion of macro ‘MIN’
  nbits = MIN(esize, (8 - epos % 8));
          ^
H5detect.c:1186:22: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
  mask = (1 << nbits) - 1;
                      ^
H5detect.c:1187:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  b = (a[perm[epos / 8]] >> (epos % 8)) & mask;
                                        ^
H5detect.c:1191:2: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  esize -= nbits;
  ^
H5detect.c:1191:8: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
  esize -= nbits;
        ^
H5detect.c:1192:2: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
  epos += nbits;
  ^
H5detect.c:1192:7: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]
  epos += nbits;
       ^
In file included from H5detect.c:57:0:
H5detect.c: In function ‘detect_C89_integers’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1357:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(signed char,   SCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1357:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(signed char,   SCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1358:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(unsigned char,   UCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1358:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(unsigned char,   UCHAR,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘short int’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1359:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(short,    SHORT,        d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1359:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(short,    SHORT,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1359:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(short,    SHORT,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘short unsigned int’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1360:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned short,   USHORT,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1360:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned short,   USHORT,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1360:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned short,   USHORT,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1361:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int,    INT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1361:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int,    INT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:1362:5: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(unsigned int,   UINT,         d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1362:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned int,   UINT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1362:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned int,   UINT,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1363:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long,    LONG,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1363:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long,    LONG,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:1364:5: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(unsigned long,   ULONG,        d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1364:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long,   ULONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1364:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long,   ULONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C89_floats’:
H5detect.c:327:21: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                        \
                     ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:329:67: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         for(_byte_mask = (unsigned char)1; _byte_mask; _byte_mask <<= 1) {    \
                                                                   ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:331:22: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
             HDmemcpy((void *)&_v2, (const void *)_buf1, sizeof(TYPE));        \
                      ^
H5private.h:1033:47: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:332:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(_v1 != _v2)                                                    \
                    ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:342:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:343:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf3, (const void *)&_v3, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:350:47: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     fix_order(sizeof(TYPE), _last, INFO.perm, (const char**)&_mesg);          \
                                               ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:448:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  if(_val!=_val2)             \
         ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1385:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(float,     FLOAT,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:327:21: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                        \
                     ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:329:67: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         for(_byte_mask = (unsigned char)1; _byte_mask; _byte_mask <<= 1) {    \
                                                                   ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:331:22: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
             HDmemcpy((void *)&_v2, (const void *)_buf1, sizeof(TYPE));        \
                      ^
H5private.h:1033:47: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:332:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(_v1 != _v2)                                                    \
                    ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:342:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:343:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf3, (const void *)&_v3, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:350:47: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     fix_order(sizeof(TYPE), _last, INFO.perm, (const char**)&_mesg);          \
                                               ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
H5detect.c:448:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  if(_val!=_val2)             \
         ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1386:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(double,    DOUBLE,     d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c: In function ‘detect_C99_integers8’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1409:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int8_t,           INT8,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1409:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int8_t,           INT8,         d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1416:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint8_t,    UINT8,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1416:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint8_t,    UINT8,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1423:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_least8_t,     INT_LEAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1423:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_least8_t,     INT_LEAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1430:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_least8_t,    UINT_LEAST8,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1430:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_least8_t,    UINT_LEAST8,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1437:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_fast8_t,      INT_FAST8,    d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1437:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(int_fast8_t,      INT_FAST8,    d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1444:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_fast8_t,    UINT_FAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:274:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,int)                                     \
     ^
H5detect.c:1444:5: note: in expansion of macro ‘DETECT_BYTE’
     DETECT_BYTE(uint_fast8_t,    UINT_FAST8,   d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_integers16’:
H5detect.c:254:24: warning: conversion to ‘int16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1470:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int16_t,     INT16,        d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1470:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int16_t,     INT16,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1470:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int16_t,     INT16,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘uint16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1473:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint16_t,     UINT16,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1473:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint16_t,     UINT16,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1473:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint16_t,     UINT16,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘int_least16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1476:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least16_t,    INT_LEAST16,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1476:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least16_t,    INT_LEAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1476:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least16_t,    INT_LEAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:254:24: warning: conversion to ‘uint_least16_t’ from ‘int’ may alter its value [-Wconversion]
         _v = (_v << 8) + _i;                                                  \
                        ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1479:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least16_t,    UINT_LEAST16, d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1479:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least16_t,    UINT_LEAST16, d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1479:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least16_t,    UINT_LEAST16, d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1482:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast16_t,    INT_FAST16,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1482:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast16_t,    INT_FAST16,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:1485:5: warning: conversion to ‘uint_fast16_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_fast16_t,    UINT_FAST16,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1485:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast16_t,    UINT_FAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1485:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast16_t,    UINT_FAST16,  d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_integers32’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1508:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int32_t,     INT32,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1508:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int32_t,     INT32,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:1511:5: warning: conversion to ‘uint32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint32_t,     UINT32,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1511:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint32_t,     UINT32,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1511:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint32_t,     UINT32,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1514:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least32_t,    INT_LEAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1514:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least32_t,    INT_LEAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:1517:5: warning: conversion to ‘uint_least32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_least32_t,    UINT_LEAST32, d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1517:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least32_t,    UINT_LEAST32, d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1517:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least32_t,    UINT_LEAST32, d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1520:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast32_t,    INT_FAST32,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1520:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast32_t,    INT_FAST32,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:1523:5: warning: conversion to ‘uint_fast32_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_fast32_t,    UINT_FAST32,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1523:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast32_t,    UINT_FAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1523:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast32_t,    UINT_FAST32,  d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_integers64’:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1546:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int64_t,     INT64,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1546:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int64_t,     INT64,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:1549:5: warning: conversion to ‘uint64_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint64_t,     UINT64,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1549:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint64_t,     UINT64,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1549:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint64_t,     UINT64,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1552:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least64_t,    INT_LEAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1552:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_least64_t,    INT_LEAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:1555:5: warning: conversion to ‘uint_least64_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_least64_t,    UINT_LEAST64, d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1555:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least64_t,    UINT_LEAST64, d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1555:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_least64_t,    UINT_LEAST64, d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1558:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast64_t,    INT_FAST64,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1558:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(int_fast64_t,    INT_FAST64,   d_g[nd_g]); nd_g++;
     ^
H5detect.c:1561:5: warning: conversion to ‘uint_fast64_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(uint_fast64_t,    UINT_FAST64,  d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1561:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast64_t,    UINT_FAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1561:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(uint_fast64_t,    UINT_FAST64,  d_g[nd_g]); nd_g++;
     ^
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1565:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long long,    LLONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1565:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(long long,    LLONG,        d_g[nd_g]); nd_g++;
     ^
H5detect.c:1566:5: warning: conversion to ‘long long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     DETECT_I(unsigned long long,  ULLONG,       d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1566:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long long,  ULLONG,       d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:263:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:280:5: note: in expansion of macro ‘DETECT_I_BYTE_CORE’
     DETECT_I_BYTE_CORE(TYPE,VAR,INFO,TYPE)                                    \
     ^
H5detect.c:1566:5: note: in expansion of macro ‘DETECT_I’
     DETECT_I(unsigned long long,  ULLONG,       d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘detect_C99_floats’:
H5detect.c:327:21: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
     HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                        \
                     ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:329:67: warning: conversion to ‘unsigned char’ from ‘int’ may alter its value [-Wconversion]
         for(_byte_mask = (unsigned char)1; _byte_mask; _byte_mask <<= 1) {    \
                                                                   ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:331:22: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
             HDmemcpy((void *)&_v2, (const void *)_buf1, sizeof(TYPE));        \
                      ^
H5private.h:1033:47: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                               ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:332:20: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
             if(_v1 != _v2)                                                    \
                    ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:342:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf1, (const void *)&_v1, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:343:25: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
         HDmemcpy(_buf3, (const void *)&_v3, sizeof(TYPE));                    \
                         ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:350:47: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
     fix_order(sizeof(TYPE), _last, INFO.perm, (const char**)&_mesg);          \
                                               ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
In file included from H5detect.c:57:0:
H5detect.c:444:80: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.size-((INFO.offset+INFO.precision)/8)),((char *)&_val)+(INFO.size-((INFO.offset+INFO.precision)/8)),(size_t)(INFO.precision/8)); \
                                                                                ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:446:51: warning: cast discards ‘__attribute__((noreturn))’ qualifier from pointer target type [-Wcast-qual]
      HDmemcpy(_buf+align_g[_ano]+(INFO.offset/8),((char *)&_val)+(INFO.offset/8),(size_t)(INFO.precision/8)); \
                                                   ^
H5private.h:1033:64: note: in definition of macro ‘HDmemcpy’
     #define HDmemcpy(X,Y,Z)    memcpy((char*)(X),(const char*)(Y),Z)
                                                                ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c:448:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
  if(_val!=_val2)             \
         ^
H5detect.c:381:5: note: in expansion of macro ‘ALIGNMENT’
     ALIGNMENT(TYPE, INFO);                                                    \
     ^
H5detect.c:1631:5: note: in expansion of macro ‘DETECT_F’
     DETECT_F(long double,   LDOUBLE,      d_g[nd_g]); nd_g++;
     ^
H5detect.c: In function ‘find_bias’:
H5detect.c:1178:1: warning: function might be candidate for attribute ‘pure’ if it is known to return normally [-Wsuggest-attribute=pure]
 find_bias(int epos, int esize, int *perm, volatile void *_a)
 ^
H5detect.c: In function ‘main’:
H5detect.c:900:2: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
  for (i=MIN(pass*4+3,d->size-1),
  ^
H5detect.c:891:2: warning: cannot optimize possibly infinite loops [-Wunsafe-loop-optimizations]
  for (i=MIN(pass*4+3,d->size-1); i>=pass*4; --i) {
  ^
  CCLD     H5detect
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5detect > H5Tinit.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5Tinit.c ; exit 1)
  CC       H5Tinit.lo
  CC       H5Tnative.lo
  CC       H5Toffset.lo
  CC       H5Toh.lo
  CC       H5Topaque.lo
H5Topaque.c: In function 'H5Tset_tag':
H5Topaque.c:80:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Topaque.c: In function 'H5Tget_tag':
H5Topaque.c:127:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Torder.lo
  CC       H5Tpad.lo
H5Tpad.c: In function 'H5Tget_pad':
H5Tpad.c:83:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tpad.c: In function 'H5Tset_pad':
H5Tpad.c:127:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Tprecis.lo
H5Tprecis.c: In function 'H5Tget_precision':
H5Tprecis.c:90:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tprecis.c: In function 'H5Tset_precision':
H5Tprecis.c:179:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tprecis.c: In function 'H5T_set_precision':
H5Tprecis.c:268:6: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
      switch (dt->shared->type) {
      ^
H5Tprecis.c:268:6: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_COMPOUND' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_ARRAY' not handled in switch [-Wswitch-enum]
H5Tprecis.c:268:6: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
  CC       H5Tstrpad.lo
H5Tstrpad.c: In function 'H5Tget_strpad':
H5Tstrpad.c:86:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
H5Tstrpad.c: In function 'H5Tset_strpad':
H5Tstrpad.c:143:21: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if (NULL == (dt = H5I_object_verify(type_id,H5I_DATATYPE)))
                     ^
  CC       H5Tvisit.lo
H5Tvisit.c: In function 'H5T__visit':
H5Tvisit.c:119:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dt->shared->type) {
     ^
H5Tvisit.c:119:5: warning: enumeration value 'H5T_INTEGER' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_FLOAT' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tvisit.c:119:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
  CC       H5Tvlen.lo
H5Tvlen.c: In function 'H5Tvlen_create':
H5Tvlen.c:116:22: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if(NULL == (base = H5I_object_verify(base_id, H5I_DATATYPE)))
                      ^
H5Tvlen.c: In function 'H5T__vlen_create':
H5Tvlen.c:168:5: warning: passing argument 1 of 'H5T_copy' discards 'const' qualifier from pointer target type [enabled by default]
     if(NULL == (dt->shared->parent = H5T_copy(base, H5T_COPY_ALL)))
     ^
In file included from H5Oprivate.h:41:0,
                 from H5Dprivate.h:27,
                 from H5Tvlen.c:28:
H5Tprivate.h:109:15: note: expected 'struct H5T_t *' but argument is of type 'const struct H5T_t *'
 H5_DLL H5T_t *H5T_copy(H5T_t *old_dt, H5T_copy_t method);
               ^
H5Tvlen.c: In function 'H5T__vlen_set_loc':
H5Tvlen.c:270:59: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
                 dt->shared->size = 4 + H5F_SIZEOF_ADDR(f) + 4;
                                                           ^
H5Tvlen.c:222:9: warning: enumeration value 'H5T_LOC_MAXLOC' not handled in switch [-Wswitch-enum]
         switch(loc) {
         ^
H5Tvlen.c: In function 'H5T_vlen_str_mem_write':
H5Tvlen.c:719:20: warning: request for implicit conversion from 'void *' to 'char *' not permitted in C++ [-Wc++-compat]
         if(NULL==(t=(vl_alloc_info->alloc_func)((seq_len+1)*base_size,vl_alloc_info->alloc_info)))
                    ^
H5Tvlen.c:723:20: warning: request for implicit conversion from 'void *' to 'char *' not permitted in C++ [-Wc++-compat]
         if(NULL==(t=H5MM_malloc((seq_len+1)*base_size)))
                    ^
H5Tvlen.c: In function 'H5T_vlen_disk_isnull':
H5Tvlen.c:847:23: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
     H5F_addr_decode(f,(const uint8_t **)&vl,&addr);
                       ^
H5Tvlen.c: In function 'H5T_vlen_disk_read':
H5Tvlen.c:884:23: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
     H5F_addr_decode(f,(const uint8_t **)&vl,&(hobjid.addr));
                       ^
H5Tvlen.c: In function 'H5T_vlen_disk_write':
H5Tvlen.c:937:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&bg, &(bg_hobjid.addr));
                            ^
H5Tvlen.c: In function 'H5T_vlen_disk_setnull':
H5Tvlen.c:999:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&bg, &(bg_hobjid.addr));
                            ^
H5Tvlen.c: In function 'H5T_vlen_reclaim_recurse':
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dt->shared->type) {
     ^
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_INTEGER' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_FLOAT' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Tvlen.c:1055:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Tvlen.c: In function 'H5T_vlen_reclaim':
H5Tvlen.c:1170:20: warning: request for implicit conversion from 'void *' to 'struct H5T_t *' not permitted in C++ [-Wc++-compat]
     if(NULL == (dt = H5I_object_verify(type_id, H5I_DATATYPE)))
                    ^
  CC       H5TS.lo
  CC       H5VM.lo
H5VM.c: In function 'H5VM_hyper_eq':
H5VM.c:359:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5VM_hyper_eq(unsigned n,
 ^
H5VM.c: In function 'H5VM_hyper_disjointp':
H5VM.c:407:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5VM_hyper_disjointp(unsigned n,
 ^
H5VM.c: In function 'H5VM_array_offset_pre':
H5VM.c:1080:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5VM_array_offset_pre(unsigned n, const hsize_t *acc, const hsize_t *offset)
 ^
  CC       H5WB.lo
  CC       H5Z.lo
H5Z.c: In function 'H5Z_find_idx':
H5Z.c:1203:1: warning: function might be candidate for attribute 'pure' if it is known to return normally [-Wsuggest-attribute=pure]
 H5Z_find_idx(H5Z_filter_t id)
 ^
  CC       H5Zdeflate.lo
  CC       H5Zfletcher32.lo
  CC       H5Znbit.lo
H5Znbit.c: In function 'H5Z_calc_parms_array':
H5Znbit.c:253:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_base_class) {
     ^
H5Znbit.c:253:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:253:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_calc_parms_compound':
H5Znbit.c:338:9: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
         switch(dtype_member_class) {
         ^
H5Znbit.c:338:9: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:338:9: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_set_parms_nooptype':
H5Znbit.c:408:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_size;
     ^
H5Znbit.c: In function 'H5Z_set_parms_atomic':
H5Znbit.c:450:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_size;
     ^
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_ERROR' not handled in switch [-Wswitch-enum]
     switch(dtype_order) {
     ^
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_VAX' not handled in switch [-Wswitch-enum]
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
H5Znbit.c:457:5: warning: enumeration value 'H5T_ORDER_NONE' not handled in switch [-Wswitch-enum]
H5Znbit.c:479:5: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
     if(dtype_precision > dtype_size * 8 || (dtype_precision + dtype_offset) > dtype_size * 8
     ^
H5Znbit.c:484:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_precision;
     ^
H5Znbit.c:487:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     cd_values[cd_values_index++] = dtype_offset;
     ^
H5Znbit.c: In function 'H5Z_set_parms_array':
H5Znbit.c:536:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++]=dtype_size;
     ^
H5Znbit.c:547:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_base_class) {
     ^
H5Znbit.c:547:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:547:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_set_parms_compound':
H5Znbit.c:626:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[cd_values_index++] = dtype_size;
     ^
H5Znbit.c:633:5: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
     cd_values[cd_values_index++] = nmembers;
     ^
H5Znbit.c:649:9: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
         cd_values[cd_values_index++] = dtype_member_offset;
         ^
H5Znbit.c:690:77: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
                     cd_values[cd_values_index++] = dtype_next_member_offset - dtype_member_offset;
                                                                             ^
H5Znbit.c:652:9: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
         switch(dtype_member_class) {
         ^
H5Znbit.c:652:9: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:652:9: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c: In function 'H5Z_set_local_nbit':
H5Znbit.c:757:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_class) {
     ^
H5Znbit.c:757:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:757:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_NO_CLASS' not handled in switch [-Wswitch-enum]
     switch(dtype_class) {
     ^
H5Znbit.c:812:5: warning: enumeration value 'H5T_TIME' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_STRING' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_BITFIELD' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_OPAQUE' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_REFERENCE' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_ENUM' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_VLEN' not handled in switch [-Wswitch-enum]
H5Znbit.c:812:5: warning: enumeration value 'H5T_NCLASSES' not handled in switch [-Wswitch-enum]
H5Znbit.c:837:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[0] = cd_values_actual_nparms;
     ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_byte':
H5Znbit.c:971:7: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + k] =
       ^
H5Znbit.c:972:58: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       ((val >> (*buf_len - dat_len)) & ~(~0 << dat_len)) << uchar_offset;
                                                          ^
H5Znbit.c:975:7: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + k] =
       ^
H5Znbit.c:976:59: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       ((val & ~(~0 << *buf_len)) << (dat_len - *buf_len)) << uchar_offset;
                                                           ^
H5Znbit.c:982:7: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + k] |=
       ^
H5Znbit.c:982:29: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       data[data_offset + k] |=
                             ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_nooptype':
H5Znbit.c:1001:72: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + i] = ((val & ~(~0 << *buf_len)) << (dat_len - *buf_len));
                                                                        ^
H5Znbit.c:1001:58: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       data[data_offset + i] = ((val & ~(~0 << *buf_len)) << (dat_len - *buf_len));
                                                          ^
H5Znbit.c:1002:18: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       dat_len -= *buf_len;
                  ^
H5Znbit.c:1007:42: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       data[data_offset + i] |= ((val >> (*buf_len - dat_len)) & ~(~0 << dat_len));
                                          ^
H5Znbit.c:1007:29: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       data[data_offset + i] |= ((val >> (*buf_len - dat_len)) & ~(~0 << dat_len));
                             ^
H5Znbit.c:1008:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
       ^
H5Znbit.c:1008:16: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
                ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_atomic':
H5Znbit.c:1020:26: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
    datatype_len = p.size * 8;
                          ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_array':
H5Znbit.c:1062:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[parms_index++];
                           ^
H5Znbit.c:1063:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[parms_index++];
                               ^
H5Znbit.c:1064:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[parms_index++];
                            ^
H5Znbit.c:1065:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
            n = total_size/p.size;
                          ^
H5Znbit.c: In function 'H5Z_nbit_decompress_one_compound':
H5Znbit.c:1115:30: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.order = parms[parms_index++];
                              ^
H5Znbit.c:1116:34: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.precision = parms[parms_index++];
                                  ^
H5Znbit.c:1117:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.offset = parms[parms_index++];
                               ^
H5Znbit.c: In function 'H5Z_nbit_decompress':
H5Znbit.c:1161:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[5];
                           ^
H5Znbit.c:1162:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[6];
                               ^
H5Znbit.c:1163:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[7];
                            ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_byte':
H5Znbit.c:1196:4: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
    val = data[data_offset + k];
    ^
H5Znbit.c:1202:14: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
          val >>= 8 - dat_len;
              ^
H5Znbit.c:1207:11: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       val >>= p.offset % 8;
           ^
H5Znbit.c:1212:18: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] |= (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                  ^
H5Znbit.c:1215:18: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] |= (val >> (dat_len - *buf_len)) & ~(~0 << *buf_len);
                  ^
H5Znbit.c:1220:45: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] = (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                                             ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_nooptype':
H5Znbit.c:1237:40: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       buffer[*j] |= (val >> (dat_len - *buf_len)) & ~(~0 << *buf_len);
                                        ^
H5Znbit.c:1237:18: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] |= (val >> (dat_len - *buf_len)) & ~(~0 << *buf_len);
                  ^
H5Znbit.c:1238:18: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       dat_len -= *buf_len;
                  ^
H5Znbit.c:1242:49: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       buffer[*j] = (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                                                 ^
H5Znbit.c:1242:45: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
       buffer[*j] = (val & ~(~0 << dat_len)) << (*buf_len - dat_len);
                                             ^
H5Znbit.c:1243:7: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
       ^
H5Znbit.c:1243:16: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
       *buf_len -= dat_len;
                ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_atomic':
H5Znbit.c:1254:26: warning: conversion to 'int' from 'size_t' may alter its value [-Wconversion]
    datatype_len = p.size * 8;
                          ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_array':
H5Znbit.c:1295:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[parms_index++];
                           ^
H5Znbit.c:1296:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[parms_index++];
                               ^
H5Znbit.c:1297:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[parms_index++];
                            ^
H5Znbit.c:1298:26: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
            n = total_size/p.size;
                          ^
H5Znbit.c: In function 'H5Z_nbit_compress_one_compound':
H5Znbit.c:1348:30: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.order = parms[parms_index++];
                              ^
H5Znbit.c:1349:34: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.precision = parms[parms_index++];
                                  ^
H5Znbit.c:1350:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
               p.offset = parms[parms_index++];
                               ^
H5Znbit.c: In function 'H5Z_nbit_compress':
H5Znbit.c:1393:27: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.order = parms[5];
                           ^
H5Znbit.c:1394:31: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.precision = parms[6];
                               ^
H5Znbit.c:1395:28: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
            p.offset = parms[7];
                            ^
  CC       H5Zshuffle.lo
  CC       H5Zszip.lo
  CC       H5Zscaleoffset.lo
H5Zscaleoffset.c: In function 'H5Z_set_local_scaleoffset':
H5Zscaleoffset.c:940:5: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
     cd_values[H5Z_SCALEOFFSET_PARM_SIZE] = dtype_size;
     ^
H5Zscaleoffset.c:969:5: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
     switch(dtype_order) {
     ^
H5Zscaleoffset.c: In function 'H5Z_filter_scaleoffset':
H5Zscaleoffset.c:1065:5: warning: enumeration value 'H5T_ORDER_MIXED' not handled in switch [-Wswitch-enum]
     switch(H5T_native_order_g) {
     ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_convert':
H5Zscaleoffset.c:1328:48: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
        for(i = 0; i < d_nelmts * dtype_size; i += dtype_size)
                                                ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_precompress_fd':
H5Zscaleoffset.c:395:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:395:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:560:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:38: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                      ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                  ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:488:37: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                               buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));  \
                                     ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:488:63: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                               buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));  \
                                                               ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:487:50: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
             *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                    \
                                                  ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:496:38: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                      ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:496:64: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                                                ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:495:51: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
             *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                   \
                                                   ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:504:43: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                     buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                           ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:504:69: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                     buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                                                     ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:503:56: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
             *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                              \
                                                        ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:395:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:395:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:400:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:33: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                 ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:405:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       if(H5Z_scaleoffset_rnd(max*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val))       \
                                                           ^
H5Zscaleoffset.c:567:7: note: in expansion of macro 'H5Z_scaleoffset_check_3'
       H5Z_scaleoffset_check_3(i, type, max, min, minbits, D_val)                         \
       ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:38: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                      ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                  ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:516:34: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                            buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));     \
                                  ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:516:60: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                            buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));     \
                                                            ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:515:47: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
          *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                       \
                                               ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:520:35: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                             buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));    \
                                   ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:520:61: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                             buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val));    \
                                                             ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:519:48: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
          *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                      \
                                                ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:524:40: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                  buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                        ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:524:66: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                                  buf[i]*HDpow(10.0f, D_val) - min*HDpow(10.0f, D_val)); \
                                                                  ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:523:53: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
          *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                                 \
                                                     ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1517:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(float, data, d_nelmts,
       ^
H5Zscaleoffset.c:561:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:487:50: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
             *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                    \
                                                  ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:495:51: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
             *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                   \
                                                   ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:503:56: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
             *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                              \
                                                        ^
H5Zscaleoffset.c:564:10: note: in expansion of macro 'H5Z_scaleoffset_modify_1'
          H5Z_scaleoffset_modify_1(i, type, buf, d_nelmts, filval, minbits, min, D_val)   \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:568:89: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
       span = H5Z_scaleoffset_rnd(max * HDpow(10.0f, D_val) - min * HDpow(10.0f, D_val)) + 1; \
                                                                                         ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:515:47: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
          *(int *)&buf[i] = H5Z_scaleoffset_rnd(                                       \
                                               ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:519:48: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
          *(long *)&buf[i] = H5Z_scaleoffset_rnd(                                      \
                                                ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c:523:53: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
          *(long long *)&buf[i] = H5Z_scaleoffset_rnd(                                 \
                                                     ^
H5Zscaleoffset.c:571:10: note: in expansion of macro 'H5Z_scaleoffset_modify_2'
          H5Z_scaleoffset_modify_2(i, type, buf, d_nelmts, min, D_val)                    \
          ^
H5Zscaleoffset.c:1520:7: note: in expansion of macro 'H5Z_scaleoffset_precompress_3'
       H5Z_scaleoffset_precompress_3(double, data, d_nelmts,
       ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_postdecompress_fd':
H5Zscaleoffset.c:629:76: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                   filval : (double)(*(int *)&buf[i]) / HDpow(10.0f, D_val) + min);        \
                                                                            ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:629:26: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
                   filval : (double)(*(int *)&buf[i]) / HDpow(10.0f, D_val) + min);        \
                          ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:633:77: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                   filval : (double)(*(long *)&buf[i]) / HDpow(10.0f, D_val) + min);       \
                                                                             ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:633:26: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
                   filval : (double)(*(long *)&buf[i]) / HDpow(10.0f, D_val) + min);       \
                          ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:637:82: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
                   filval : (double)(*(long long *)&buf[i]) / HDpow(10.0f, D_val) + min);  \
                                                                                  ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:637:26: warning: implicit conversion from 'float' to 'double' to match other result of conditional [-Wdouble-promotion]
                   filval : (double)(*(long long *)&buf[i]) / HDpow(10.0f, D_val) + min);  \
                          ^
H5Zscaleoffset.c:669:7: note: in expansion of macro 'H5Z_scaleoffset_modify_3'
       H5Z_scaleoffset_modify_3(i, type, buf, d_nelmts, filval, minbits, min, D_val)    \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:647:74: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
          buf[i] = (type)((double)(*(int *)&buf[i]) / HDpow(10.0f, D_val) + min);       \
                                                                          ^
H5Zscaleoffset.c:671:7: note: in expansion of macro 'H5Z_scaleoffset_modify_4'
       H5Z_scaleoffset_modify_4(i, type, buf, d_nelmts, min, D_val)                     \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:650:75: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
          buf[i] = (type)((double)(*(long *)&buf[i]) / HDpow(10.0f, D_val) + min);      \
                                                                           ^
H5Zscaleoffset.c:671:7: note: in expansion of macro 'H5Z_scaleoffset_modify_4'
       H5Z_scaleoffset_modify_4(i, type, buf, d_nelmts, min, D_val)                     \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c:653:80: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
          buf[i] = (type)((double)(*(long long *)&buf[i]) / HDpow(10.0f, D_val) + min); \
                                                                                ^
H5Zscaleoffset.c:671:7: note: in expansion of macro 'H5Z_scaleoffset_modify_4'
       H5Z_scaleoffset_modify_4(i, type, buf, d_nelmts, min, D_val)                     \
       ^
H5Zscaleoffset.c:1540:7: note: in expansion of macro 'H5Z_scaleoffset_postdecompress_3'
       H5Z_scaleoffset_postdecompress_3(float, data, d_nelmts, filavail,
       ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_decompress_one_atomic':
H5Zscaleoffset.c:1600:23: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
    dtype_len = p.size * 8;
                       ^
H5Zscaleoffset.c:1603:28: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
       begin_i = p.size - 1 - (dtype_len - p.minbits) / 8;
                            ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_compress_one_atomic':
H5Zscaleoffset.c:1683:23: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
    dtype_len = p.size * 8;
                       ^
H5Zscaleoffset.c:1686:28: warning: conversion to 'unsigned int' from 'size_t' may alter its value [-Wconversion]
       begin_i = p.size - 1 - (dtype_len - p.minbits) / 8;
                            ^
H5Zscaleoffset.c: In function 'H5Z_scaleoffset_log2':
H5Zscaleoffset.c:1368:1: warning: function might be candidate for attribute 'const' if it is known to return normally [-Wsuggest-attribute=const]
 H5Z_scaleoffset_log2(unsigned long long num)
 ^
  CC       H5Ztrans.lo
H5Ztrans.c: In function 'H5Z_parse_term':
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_ERROR' not handled in switch [-Wswitch-enum]
         switch (current->tok_type) {
         ^
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_INTEGER' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_FLOAT' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_SYMBOL' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_PLUS' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_MINUS' not handled in switch [-Wswitch-enum]
H5Ztrans.c:689:9: warning: enumeration value 'H5Z_XFORM_LPAREN' not handled in switch [-Wswitch-enum]
H5Ztrans.c: In function 'H5Z_parse_factor':
H5Ztrans.c:775:5: warning: enumeration value 'H5Z_XFORM_ERROR' not handled in switch [-Wswitch-enum]
     switch (current->tok_type) {
     ^
H5Ztrans.c:775:5: warning: enumeration value 'H5Z_XFORM_MULT' not handled in switch [-Wswitch-enum]
H5Ztrans.c:775:5: warning: enumeration value 'H5Z_XFORM_DIVIDE' not handled in switch [-Wswitch-enum]
H5Ztrans.c: In function 'H5Z_xform_eval_full':
H5Ztrans.c:1094:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'short unsigned int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1094:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1094:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, +, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'short unsigned int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1098:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1098:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, -, array_size)
    ^
H5Ztrans.c:1102:45: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned char' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'short unsigned int' from 'int' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1102:45: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
                                             ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1102:3: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
   H5Z_XFORM_TYPE_OP(resl, resr, array_type, *, array_size)
   ^
H5Ztrans.c:1106:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'signed char' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'signed char' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:155:16: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *pl = *pl OP *pr;                                            \
                ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'short unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:181:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long, OP, (SIZE))  \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:183:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:185:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:128:11: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = *p OP tree_val;                                            \
           ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:145:23: warning: conversion to 'double' from 'long long unsigned int' may alter its value [-Wconversion]
      *p = tree_val OP *p;                                            \
                       ^
H5Ztrans.c:187:2: note: in expansion of macro 'H5Z_XFORM_DO_OP1'
  H5Z_XFORM_DO_OP1((RESL), (RESR), unsigned long long, OP, (SIZE)) \
  ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'long long unsigned int' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:128:14: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = *p OP tree_val;                                            \
              ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1106:46: warning: conversion to 'float' from 'double' may alter its value [-Wconversion]
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
                                              ^
H5Ztrans.c:145:20: note: in definition of macro 'H5Z_XFORM_DO_OP1'
      *p = tree_val OP *p;                                            \
                    ^
H5Ztrans.c:1106:4: note: in expansion of macro 'H5Z_XFORM_TYPE_OP'
    H5Z_XFORM_TYPE_OP(resl, resr, array_type, /, array_size)
    ^
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_ERROR' not handled in switch [-Wswitch-enum]
  switch (tree->type) {
  ^
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_INTEGER' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_FLOAT' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_SYMBOL' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_LPAREN' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_RPAREN' not handled in switch [-Wswitch-enum]
H5Ztrans.c:1092:2: warning: enumeration value 'H5Z_XFORM_END' not handled in switch [-Wswitch-enum]
H5Ztrans.c: In function 'H5Z_xform_noop':
H5Ztrans.c:1678:1: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5Z_xform_noop(const H5Z_data_xform_t *data_xform_prop)
 ^
H5Ztrans.c: In function 'H5Z_xform_extract_xform_str':
H5Ztrans.c:1707:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 H5Z_xform_extract_xform_str(const H5Z_data_xform_t *data_xform_prop)
 ^
  CCLD     libhdf5.la
make[2]: Leaving directory `/data/commons/GFOLD_db_tools/tools/hdf5-1.8.16/src'
make[1]: Leaving directory `/data/commons/GFOLD_db_tools/tools/hdf5-1.8.16/src'
Making all in test
make[1]: Entering directory `/data/commons/GFOLD_db_tools/tools/hdf5-1.8.16/test'
  CC       dynlib1.lo
dynlib1.c: In function 'H5PLget_plugin_type':
dynlib1.c:41:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib1.c: In function 'H5PLget_plugin_info':
dynlib1.c:42:16: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void    *H5PLget_plugin_info(void) {return H5Z_DYNLIB1;}
                ^
dynlib1.c: In function 'H5Z_filter_dynlib1':
dynlib1.c:82:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
dynlib1.c:89:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
  CCLD     libdynlib1.la
  CC       dynlib2.lo
dynlib2.c: In function 'H5PLget_plugin_type':
dynlib2.c:42:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib2.c: In function 'H5PLget_plugin_info':
dynlib2.c:43:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void   *H5PLget_plugin_info(void) {return H5Z_DYNLIB2;}
               ^
dynlib2.c: In function 'H5Z_filter_dynlib2':
dynlib2.c:79:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
dynlib2.c:86:14: warning: cannot optimize loop, the loop counter may overflow [-Wunsafe-loop-optimizations]
         while(buf_left > 0) {
              ^
  CCLD     libdynlib2.la
  CC       dynlib3.lo
dynlib3.c: In function 'H5Z_filter_dynlib3':
dynlib3.c:91:21: warning: cast discards '__attribute__((const))' qualifier from pointer target type [-Wcast-qual]
         memcpy(dst, (void*)GROUP_SUFFIX, SUFFIX_LEN);
                     ^
dynlib3.c: In function 'H5PLget_plugin_type':
dynlib3.c:44:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 H5PL_type_t   H5PLget_plugin_type(void) {return H5PL_TYPE_FILTER;}
               ^
dynlib3.c: In function 'H5PLget_plugin_info':
dynlib3.c:45:15: warning: function might be candidate for attribute 'const' [-Wsuggest-attribute=const]
 const void   *H5PLget_plugin_info(void) {return H5Z_DYNLIB3;}
               ^
  CCLD     libdynlib3.la
  CC       h5test.lo
h5test.c: In function 'h5_cleanup':
h5test.c:160:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                     HDsnprintf(temp, sizeof temp, filename, j);
                     ^
h5test.c:160:21: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
h5test.c: In function 'h5_fileaccess':
h5test.c:605:14: warning: size of 'sv' is 7168 bytes [-Wlarger-than=]
         char sv[H5FD_MEM_NTYPES][1024];
              ^
h5test.c:619:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             memb_addr[mt] = (haddr_t)MAX(mt - 1, 0) * (HADDR_MAX / 10);
             ^
h5test.c: In function 'h5_get_file_size':
h5test.c:986:17: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
                 HDsnprintf(temp, sizeof temp, filename, j);
                 ^
h5test.c:986:17: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
h5test.c: In function 'print_func':
h5test.c:1023:3: warning: function might be possible candidate for 'gnu_printf' format attribute [-Wsuggest-attribute=format]
   ret_value = vprintf(format, arglist);
   ^
h5test.c: In function 'h5_make_local_copy':
h5test.c:1192:11: warning: size of 'buf' is 4096 bytes [-Wlarger-than=]
     char  buf[READ_BUF_SIZE];           /* Buffer for copying data */
           ^
In file included from h5test.c:28:0:
h5test.c: At top level:
H5srcdir.h:53:20: warning: 'H5_get_srcdir' defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
h5test.c: In function 'h5_rmprefix':
h5test.c:526:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 h5_rmprefix(const char *filename)
 ^
h5test.c: In function 'h5_fileaccess':
h5test.c:558:1: warning: stack usage is 8464 bytes [-Wstack-usage=]
 h5_fileaccess(void)
 ^
  CC       testframe.lo
testframe.c:54:19: warning: size of 'Test' is 6720 bytes [-Wlarger-than=]
 static TestStruct Test[MAXNUMOFTESTS];
                   ^
testframe.c: In function 'PrintErrorStackOn':
testframe.c:618:5: warning: passing argument 2 of 'H5Eset_auto2' from incompatible pointer type [enabled by default]
     H5Eset_auto2(H5E_DEFAULT, PrintErrorStackFunc, PrintErrorStackData);
     ^
In file included from ../src/H5Eprivate.h:22:0,
                 from testhdf5.h:28,
                 from testframe.c:24:
../src/H5Epublic.h:174:15: note: expected 'H5E_auto2_t' but argument is of type 'herr_t (**)(hid_t,  void *)'
 H5_DLL herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data);
               ^
testframe.c: In function 'GetTestVerbosity':
testframe.c:365:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestVerbosity(void)
     ^
testframe.c: In function 'GetTestSummary':
testframe.c:452:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestSummary(void)
     ^
testframe.c: In function 'GetTestCleanup':
testframe.c:461:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestCleanup(void)
     ^
testframe.c: In function 'GetTestNumErrs':
testframe.c:498:5: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 int GetTestNumErrs(void)
     ^
testframe.c: In function 'GetTestParameters':
testframe.c:516:13: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 const void *GetTestParameters(void)
             ^
  CC       cache_common.lo
cache_common.c:67:21: warning: size of 'pico_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t pico_entries[NUM_PICO_ENTRIES], orig_pico_entries[NUM_PICO_ENTRIES];
                     ^
cache_common.c:67:53: warning: size of 'orig_pico_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t pico_entries[NUM_PICO_ENTRIES], orig_pico_entries[NUM_PICO_ENTRIES];
                                                     ^
cache_common.c:68:21: warning: size of 'nano_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t nano_entries[NUM_NANO_ENTRIES], orig_nano_entries[NUM_NANO_ENTRIES];
                     ^
cache_common.c:68:53: warning: size of 'orig_nano_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t nano_entries[NUM_NANO_ENTRIES], orig_nano_entries[NUM_NANO_ENTRIES];
                                                     ^
cache_common.c:69:21: warning: size of 'micro_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t micro_entries[NUM_MICRO_ENTRIES], orig_micro_entries[NUM_MICRO_ENTRIES];
                     ^
cache_common.c:69:55: warning: size of 'orig_micro_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t micro_entries[NUM_MICRO_ENTRIES], orig_micro_entries[NUM_MICRO_ENTRIES];
                                                       ^
cache_common.c:70:21: warning: size of 'tiny_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t tiny_entries[NUM_TINY_ENTRIES], orig_tiny_entries[NUM_TINY_ENTRIES];
                     ^
cache_common.c:70:53: warning: size of 'orig_tiny_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t tiny_entries[NUM_TINY_ENTRIES], orig_tiny_entries[NUM_TINY_ENTRIES];
                                                     ^
cache_common.c:71:21: warning: size of 'small_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t small_entries[NUM_SMALL_ENTRIES], orig_small_entries[NUM_SMALL_ENTRIES];
                     ^
cache_common.c:71:55: warning: size of 'orig_small_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t small_entries[NUM_SMALL_ENTRIES], orig_small_entries[NUM_SMALL_ENTRIES];
                                                       ^
cache_common.c:72:21: warning: size of 'medium_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t medium_entries[NUM_MEDIUM_ENTRIES], orig_medium_entries[NUM_MEDIUM_ENTRIES];
                     ^
cache_common.c:72:57: warning: size of 'orig_medium_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t medium_entries[NUM_MEDIUM_ENTRIES], orig_medium_entries[NUM_MEDIUM_ENTRIES];
                                                         ^
cache_common.c:73:21: warning: size of 'large_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t large_entries[NUM_LARGE_ENTRIES], orig_large_entries[NUM_LARGE_ENTRIES];
                     ^
cache_common.c:73:55: warning: size of 'orig_large_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t large_entries[NUM_LARGE_ENTRIES], orig_large_entries[NUM_LARGE_ENTRIES];
                                                       ^
cache_common.c:74:21: warning: size of 'huge_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t huge_entries[NUM_HUGE_ENTRIES], orig_huge_entries[NUM_HUGE_ENTRIES];
                     ^
cache_common.c:74:53: warning: size of 'orig_huge_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t huge_entries[NUM_HUGE_ENTRIES], orig_huge_entries[NUM_HUGE_ENTRIES];
                                                     ^
cache_common.c:75:21: warning: size of 'monster_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t monster_entries[NUM_MONSTER_ENTRIES], orig_monster_entries[NUM_MONSTER_ENTRIES];
                     ^
cache_common.c:75:59: warning: size of 'orig_monster_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t monster_entries[NUM_MONSTER_ENTRIES], orig_monster_entries[NUM_MONSTER_ENTRIES];
                                                           ^
cache_common.c:76:21: warning: size of 'variable_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t variable_entries[NUM_VARIABLE_ENTRIES], orig_variable_entries[NUM_VARIABLE_ENTRIES];
                     ^
cache_common.c:76:61: warning: size of 'orig_variable_entries' is 5734400 bytes [-Wlarger-than=]
 static test_entry_t variable_entries[NUM_VARIABLE_ENTRIES], orig_variable_entries[NUM_VARIABLE_ENTRIES];
                                                             ^
cache_common.c: In function 'clear':
cache_common.c:523:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'destroy':
cache_common.c:647:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'flush':
cache_common.c:811:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'size':
cache_common.c:1098:20: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t * base_addr;
                    ^
cache_common.c: In function 'row_major_scan_forward':
cache_common.c:3353:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 1) >= 0 ) &&
             ^
cache_common.c:3355:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 1) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3363:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 2) >= 0 ) &&
             ^
cache_common.c:3365:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3374:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( (idx + lag - 2) >= 0 ) &&
             ^
cache_common.c:3376:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3383:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 3) >= 0 ) &&
             ^
cache_common.c:3385:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 3) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3393:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 5) >= 0 ) &&
             ^
cache_common.c:3395:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 5) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3405:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 5) >= 0 ) &&
   ^
cache_common.c:3407:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 5) % 9 == 0 ) ) {
        ^
cache_common.c:3407:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3416:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 6) >= 0 ) &&
   ^
cache_common.c:3418:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 6) % 11 == 0 ) ) {
        ^
cache_common.c:3418:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3427:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 7) >= 0 ) &&
   ^
cache_common.c:3429:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 7) % 13 == 0 ) ) {
        ^
cache_common.c:3429:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3438:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 7) >= 0 ) &&
   ^
cache_common.c:3440:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 7) % 9 == 0 ) ) {
        ^
cache_common.c:3440:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3449:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 8) >= 0 ) &&
   ^
cache_common.c:3451:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 8) % 11 == 0 ) ) {
        ^
cache_common.c:3451:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3460:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx + lag - 9) >= 0 ) &&
   ^
cache_common.c:3462:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx + lag - 9) % 13 == 0 ) ) {
        ^
cache_common.c:3462:8: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3480:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 2) >= 0 ) &&
             ^
cache_common.c:3482:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 2) % 7 ) == 0 ) ) {
                  ^
cache_common.c:3482:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3490:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 1) >= 0 ) &&
             ^
cache_common.c:3492:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 1) % 7 ) == 0 ) ) {
                  ^
cache_common.c:3492:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c: In function 'row_major_scan_backward':
cache_common.c:3751:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 1) >= 0 ) &&
             ^
cache_common.c:3753:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 1) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3753:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3761:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 2) >= 0 ) &&
             ^
cache_common.c:3763:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3763:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3772:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( (idx - lag + 2) >= 0 ) &&
             ^
cache_common.c:3774:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 2) % 3 ) == 0 ) ) {
                  ^
cache_common.c:3774:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3781:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 3) >= 0 ) &&
             ^
cache_common.c:3783:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 3) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3783:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3791:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx - lag + 5) >= 0 ) &&
             ^
cache_common.c:3793:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx - lag + 5) % 5 ) == 0 ) ) {
                  ^
cache_common.c:3793:18: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
cache_common.c:3803:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 5) >= 0 ) &&
   ^
cache_common.c:3805:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 5) % 9 == 0 ) ) {
        ^
cache_common.c:3814:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 6) >= 0 ) &&
   ^
cache_common.c:3816:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 6) % 11 == 0 ) ) {
        ^
cache_common.c:3825:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 7) >= 0 ) &&
   ^
cache_common.c:3827:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 7) % 13 == 0 ) ) {
        ^
cache_common.c:3836:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 7) >= 0 ) &&
   ^
cache_common.c:3838:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 7) % 9 == 0 ) ) {
        ^
cache_common.c:3847:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 8) >= 0 ) &&
   ^
cache_common.c:3849:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 8) % 11 == 0 ) ) {
        ^
cache_common.c:3858:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   if ( ( pass ) && ( (idx - lag + 9) >= 0 ) &&
   ^
cache_common.c:3860:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        ( (idx - lag + 9) % 13 == 0 ) ) {
        ^
cache_common.c:3879:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 2) >= 0 ) &&
             ^
cache_common.c:3881:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 2) % 7 ) == 0 ) ) {
                  ^
cache_common.c:3889:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( (idx + lag - 1) >= 0 ) &&
             ^
cache_common.c:3891:18: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                  ( ( (idx + lag - 1) % 7 ) == 0 ) ) {
                  ^
In file included from cache_common.c:23:0:
cache_common.c: In function 'check_and_validate_cache_hit_rate':
h5test.h:135:47: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_REL_EQUAL(X,Y,M)    (fabs((Y-X)/X)<M)
                                               ^
cache_common.c:4622:23: note: in expansion of macro 'DBL_REL_EQUAL'
         } else if ( ! DBL_REL_EQUAL(hit_rate, expected_hit_rate, 0.00001F) ) {
                       ^
cache_common.c: At top level:
cache_common.c:4804:1: warning: no previous prototype for 'resize_configs_are_equal' [-Wmissing-prototypes]
 resize_configs_are_equal(const H5C_auto_size_ctl_t *a,
 ^
cache_common.c: In function 'resize_configs_are_equal':
cache_common.c:4816:67: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->min_clean_fraction - b->min_clean_fraction) > FP_EPSILON)
                                                                   ^
cache_common.c:4826:67: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->lower_hr_threshold - b->lower_hr_threshold) > FP_EPSILON)
                                                                   ^
cache_common.c:4828:49: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->increment - b->increment) > FP_EPSILON)
                                                 ^
cache_common.c:4836:59: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->flash_multiple - b->flash_multiple) > FP_EPSILON)
                                                           ^
cache_common.c:4838:61: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->flash_threshold - b->flash_threshold) > FP_EPSILON)
                                                             ^
cache_common.c:4842:67: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->upper_hr_threshold - b->upper_hr_threshold) > FP_EPSILON)
                                                                   ^
cache_common.c:4844:49: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->decrement - b->decrement) > FP_EPSILON)
                                                 ^
cache_common.c:4854:57: warning: implicit conversion from 'float' to 'double' to match other operand of binary expression [-Wdouble-promotion]
     else if(HDfabs(a->empty_reserve - b->empty_reserve) > FP_EPSILON)
                                                         ^
In file included from cache_common.c:27:0:
cache_common.c: In function 'validate_mdc_config':
cache_common.h:398:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).min_clean_fraction      == (b).min_clean_fraction ) &&      \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:403:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).lower_hr_threshold      == (b).lower_hr_threshold ) &&      \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:404:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).increment               == (b).increment ) &&               \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:408:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_multiple          == (b).flash_multiple ) &&          \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:409:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).flash_threshold         == (b).flash_threshold ) &&         \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:411:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).upper_hr_threshold      == (b).upper_hr_threshold ) &&      \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:412:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).decrement               == (b).decrement ) &&               \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.h:417:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     ( (a).empty_reserve           == (b).empty_reserve ) &&           \
                                   ^
cache_common.c:4965:16: note: in expansion of macro 'CACHE_CONFIGS_EQUAL'
         if ( ! CACHE_CONFIGS_EQUAL((*ext_config_ptr), scratch, \
                ^
cache_common.c: In function 'hl_row_major_scan_forward':
cache_common.c:3634:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_inserts ) && ( (idx + lag) >= 0 ) &&
                                             ^
cache_common.c: In function 'hl_row_major_scan_backward':
cache_common.c:4032:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_inserts ) && ( (idx + lag) >= 0 ) &&
                                             ^
cache_common.c: In function 'resize_configs_are_equal':
cache_common.c:4804:1: warning: function might be candidate for attribute 'pure' [-Wsuggest-attribute=pure]
 resize_configs_are_equal(const H5C_auto_size_ctl_t *a,
 ^
cache_common.c: In function 'col_major_scan_backward':
cache_common.c:4361:36: warning: 'cache_ptr' may be used uninitialized in this function [-Wmaybe-uninitialized]
                  ( ! entry_in_cache(cache_ptr, type, (idx - lag)) ) ) {
                                    ^
  CCLD     libh5test.la
  CC       testhdf5.o
  CC       tarray.o
tarray.c: In function ‘test_array_funcs’:
tarray.c:192:26: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_precision(type);
                          ^
tarray.c:195:21: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_size(type);
                     ^
tarray.c:198:22: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
     size=H5Tget_ebias(type);
                      ^
tarray.c: In function ‘test_array_compound_atomic’:
tarray.c:544:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
             wdata[i][j].f = (float)(i * 2.5F + j);
             ^
tarray.c:544:13: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
tarray.c:689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Array data information doesn't match!, wdata[%d][%d].f=%f, rdata[%d][%d].f=%f\n", (int)i, (int)j, wdata[i][j].f, (int)i, (int)j, rdata[i][j].f);
                 ^
tarray.c:689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c: In function ‘test_array_compound_array’:
tarray.c:748:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
                 wdata[i][j].f[k]=(float)(i * 10.0F + j * 2.5F + k);
                 ^
tarray.c:748:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
tarray.c:748:17: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
tarray.c:932:21: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                     TestErrPrintf("Array data information doesn't match!, wdata[%d][%d].f[%d]=%f, rdata[%d][%d].f[%d]=%f\n",(int)i,(int)j,(int)k,wdata[i][j].f[k],(int)i,(int)j,(int)k,rdata[i][j].f[k]);
                     ^
tarray.c:932:21: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c: In function ‘test_array_alloc_custom’:
tarray.c:977:9: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *mem_used+=size;
         ^
tarray.c:977:18: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
         *mem_used+=size;
                  ^
tarray.c: In function ‘test_array_free_custom’:
tarray.c:1005:9: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         *mem_used-=*(size_t *)mem;
         ^
tarray.c:1005:18: warning: conversion to ‘int’ from ‘size_t’ may alter its value [-Wconversion]
         *mem_used-=*(size_t *)mem;
                  ^
In file included from testhdf5.h:27:0,
                 from tarray.c:24:
tarray.c: In function ‘test_array_vlen_atomic’:
tarray.c:1044:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].p=HDmalloc((i+j+1)*sizeof(unsigned int));
                                        ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
tarray.c:1045:32: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].len=i+j+1;
                                ^
tarray.c:1046:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
tarray.c:1047:62: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 ((unsigned int *)wdata[i][j].p)[k]=i*100+j*10+k;
                                                              ^
In file included from testhdf5.h:27:0,
                 from tarray.c:24:
tarray.c: In function ‘test_array_vlen_array’:
tarray.c:1255:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].p=HDmalloc((i+j+1)*(sizeof(unsigned int)*ARRAY1_DIM1));
                                        ^
../src/H5private.h:1008:35: note: in definition of macro ‘HDmalloc’
     #define HDmalloc(Z)    malloc(Z)
                                   ^
tarray.c:1256:32: warning: conversion to ‘size_t’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata[i][j].len=i+j+1;
                                ^
tarray.c:1257:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
tarray.c:1259:87: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                     ((unsigned int *)wdata[i][j].p)[k*ARRAY1_DIM1+l]=i*1000+j*100+k*10+l;
                                                                                       ^
tarray.c: In function ‘test_array_bkg’:
tarray.c:1537:34: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].b[j] = (float)(100.0F*(i+1) + 0.01F*j);
                                  ^
tarray.c:1537:4: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].b[j] = (float)(100.0F*(i+1) + 0.01F*j);
    ^
tarray.c:1538:35: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].c[j] = (double)(100.0F*(i+1) + 0.02F*j);
                                   ^
tarray.c:1538:4: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
    cf[i].c[j] = (double)(100.0F*(i+1) + 0.02F*j);
    ^
tarray.c:1622:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field b data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].b[j],(int)i,(int)j,(float)cfr[i].b[j]);
                 ^
tarray.c:1622:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1626:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field c data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].c[j],(int)i,(int)j,(float)cfr[i].c[j]);
                 ^
tarray.c:1626:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field data doesn't match, fld[%d].b[%d]=%f, fldr[%d].b[%d]=%f\n",(int)i,(int)j,(float)fld[i].b[j],(int)i,(int)j,(float)fldr[i].b[j]);
                 ^
tarray.c:1689:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1715:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field b data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].b[j],(int)i,(int)j,(float)cfr[i].b[j]);
                 ^
tarray.c:1715:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1719:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field c data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].c[j],(int)i,(int)j,(float)cfr[i].c[j]);
                 ^
tarray.c:1719:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1764:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field b data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].b[j],(int)i,(int)j,(float)cfr[i].b[j]);
                 ^
tarray.c:1764:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
tarray.c:1768:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
                 TestErrPrintf("Field c data doesn't match, cf[%d].b[%d]=%f, cfr[%d].b[%d]=%f\n",(int)i,(int)j,(float)cf[i].c[j],(int)i,(int)j,(float)cfr[i].c[j]);
                 ^
tarray.c:1768:17: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
In file included from tarray.c:25:0:
tarray.c: At top level:
H5srcdir.h:35:20: warning: ‘H5_get_srcdir_filename’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir_filename(const char *filename)
                    ^
H5srcdir.h:53:20: warning: ‘H5_get_srcdir’ defined but not used [-Wunused-function]
 static const char *H5_get_srcdir(void)
                    ^
  CC       tattr.o
In file included from testhdf5.h:31:0,
                 from tattr.c:24:
tattr.c: In function ‘test_attr_flush’:
h5test.h:131:35: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_ABS_EQUAL(X,Y) (fabs(X-Y)<DBL_EPSILON)
                                   ^
tattr.c:524:9: note: in expansion of macro ‘DBL_ABS_EQUAL’
     if(!DBL_ABS_EQUAL(rdata,0.0F))
         ^
tattr.c:525:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
         TestErrPrintf("attribute value wrong: rdata=%f, should be %f\n",rdata,0.0F);
         ^
In file included from testhdf5.h:31:0,
                 from tattr.c:24:
h5test.h:131:35: warning: implicit conversion from ‘float’ to ‘double’ to match other operand of binary expression [-Wdouble-promotion]
 #define DBL_ABS_EQUAL(X,Y) (fabs(X-Y)<DBL_EPSILON)
                                   ^
tattr.c:533:9: note: in expansion of macro ‘DBL_ABS_EQUAL’
     if(!DBL_ABS_EQUAL(rdata,0.0F))
         ^
tattr.c:534:9: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
         TestErrPrintf("attribute value wrong: rdata=%f, should be %f\n",rdata,0.0F);
         ^
In file included from tattr.c:24:0:
tattr.c: In function ‘test_attr_compound_read’:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:847:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_INT), "H5Tget_order");
     ^
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:856:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_DOUBLE), "H5Tget_order");
     ^
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:865:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_SCHAR), "H5Tget_order");
     ^
tattr.c:884:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c: In function ‘test_attr_scalar_read’:
tattr.c:1016:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
      "H5Aread", attr_data5, rdata, (int)__LINE__, __FILE__);
      ^
tattr.c:1016:6: warning: implicit conversion from ‘float’ to ‘double’ when passing argument to function [-Wdouble-promotion]
In file included from tattr.c:24:0:
tattr.c: In function ‘test_attr_mult_read’:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:1228:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_INT), "H5Tget_order");
     ^
tattr.c:1243:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1249:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr,HDstrlen(ATTR1_NAME), attr_name);
                           ^
In file included from tattr.c:24:0:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:1283:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_INT), "H5Tget_order");
     ^
tattr.c:1299:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1305:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, HDstrlen(ATTR2_NAME), attr_name);
                           ^
In file included from tattr.c:24:0:
testhdf5.h:85:34: warning: cast from function call of type ‘H5T_order_t’ to non-matching type ‘long int’ [-Wbad-function-cast]
     long __x = (long)_x, __val = (long)_val;          \
                                  ^
tattr.c:1341:5: note: in expansion of macro ‘VERIFY’
     VERIFY(order, H5Tget_order(H5T_NATIVE_DOUBLE), "H5Tget_order");
     ^
tattr.c:1358:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1364:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, HDstrlen(ATTR3_NAME), attr_name);
                           ^
tattr.c: In function ‘test_attr_delete’:
tattr.c:1552:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1566:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c:1589:27: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
     name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, attr_name);
                           ^
tattr.c: In function ‘test_attr_dense_verify’:
tattr.c:2086:31: warning: conversion to ‘size_t’ from ‘ssize_t’ may change the sign of the result [-Wsign-conversion]
         name_len = H5Aget_name(attr, (size_t)ATTR_NAME_LEN, check_name);
                               ^
tattr.c: In function ‘attr_info_by_idx_check’:
tattr.c:5559:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, n, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c:5584:33: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
         ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_NATIVE, n, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                 ^
tattr.c:5605:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_CRT_ORDER, H5_ITER_DEC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c:5625:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_NAME, H5_ITER_INC, n, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c:5650:29: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
     ret = H5Aget_name_by_idx(obj_id, ".", H5_INDEX_NAME, H5_ITER_DEC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                             ^
tattr.c: In function ‘test_attr_info_by_idx’:
tattr.c:5759:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Aget_name_by_idx(my_dataset, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
tattr.c:5796:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Aget_name_by_idx(my_dataset, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
tattr.c:5846:37: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
             ret = H5Aget_name_by_idx(my_dataset, ".", H5_INDEX_CRT_ORDER, H5_ITER_INC, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                     ^
tattr.c: In function ‘test_attr_delete_by_idx’:
tattr.c:5918:74: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(idx_type = H5_INDEX_NAME; idx_type <=H5_INDEX_CRT_ORDER; idx_type++) {
                                                                          ^
tattr.c:5920:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(order = H5_ITER_INC; order <=H5_ITER_DEC; order++) {
                                                            ^
tattr.c:6073:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c:6198:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c:6309:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)u, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c:6358:49: warning: conversion to ‘herr_t’ from ‘ssize_t’ may alter its value [-Wconversion]
                         ret = H5Aget_name_by_idx(my_dataset, ".", idx_type, order, (hsize_t)0, tmpname, (size_t)NAME_BUF_SIZE, H5P_DEFAULT);
                                                 ^
tattr.c: In function ‘attr_iterate_check’:
tattr.c:6614:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
                                                                      ^
tattr.c:6614:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
     ^
tattr.c:6646:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
                                                                      ^
tattr.c:6646:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
     ^
tattr.c:6678:70: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
                                                                      ^
tattr.c:6678:5: warning: conversion to ‘int64_t’ from ‘hsize_t’ may change the sign of the result [-Wsign-conversion]
     iter_info->curr = order != H5_ITER_DEC ? skip : ((max_attrs - 1) - skip);
     ^
tattr.c: In function ‘test_attr_iterate2’:
tattr.c:6867:74: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(idx_type = H5_INDEX_NAME; idx_type <=H5_INDEX_CRT_ORDER; idx_type++) {
                                                                          ^
tattr.c:6869:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(order = H5_ITER_INC; order <=H5_ITER_DEC; order++) {
                                                            ^
tattr.c: In function ‘test_attr_open_by_idx’:
tattr.c:7221:74: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
     for(idx_type = H5_INDEX_NAME; idx_type <=H5_INDEX_CRT_ORDER; idx_type++) {
                                                                          ^
tattr.c:7223:60: warning: increment of enumeration value is invalid in C++ [-Wc++-compat]
         for(order = H5_ITER_INC; order <=H5_ITER_DEC; order++) {
                                                            ^
tattr.c: In function ‘test_attr_shared_write’:
tattr.c:8026:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_shared_rename’:
tattr.c:8352:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_shared_delete’:
tattr.c:8793:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_shared_unlink’:
tattr.c:9157:14: warning: size of ‘big_value’ is 2340 bytes [-Wlarger-than=]
     unsigned big_value[SPACE1_DIM1 * SPACE1_DIM2 * SPACE1_DIM3];   /* Data for "big" attribute */
              ^
tattr.c: In function ‘test_attr_bug3’:
tattr.c:9861:28: warning: conversion to ‘unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             wdata2[u][v] = (int)((u * dims2[1]) + v);
                            ^
